/* Generated by Yosys 0.27+30 (git sha1 101075611, clang 14.0.0 -fPIC -Os) */

module \$paramod$25d8924d372eee084dfc5c8d348ade21ebd4dc97\rr_arb_tree_52163_F264E (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk_i;
  wire clk_i;
  input [514:0] data_i;
  wire [514:0] data_i;
  output [102:0] data_o;
  wire [102:0] data_o;
  input flush_i;
  wire flush_i;
  wire [720:0] \gen_arbiter.data_nodes ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  wire [6:0] \gen_arbiter.gnt_nodes ;
  wire [20:0] \gen_arbiter.index_nodes ;
  wire [4:0] \gen_arbiter.req_d ;
  wire [6:0] \gen_arbiter.req_nodes ;
  reg [2:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [4:0] gnt_o;
  wire [4:0] gnt_o;
  output [2:0] idx_o;
  wire [2:0] idx_o;
  input [4:0] req_i;
  wire [4:0] req_i;
  output req_o;
  wire req_o;
  input [2:0] rr_i;
  wire [2:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:358$559.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:358$560.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$543.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$544.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$553.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$554.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$555.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$556.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$557.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$558.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [3] & _19_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [4] & _20_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [3] & \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [4] & \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _03_ = req_i[4] & \gen_arbiter.rr_q [2];
  assign _04_ = \gen_arbiter.req_nodes [4] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _23_;
  assign \gen_arbiter.gnt_nodes [3] = \gen_arbiter.gnt_nodes [1] & _24_;
  assign gnt_o[4] = \gen_arbiter.gnt_nodes [2] & req_i[4];
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [4] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 3'h0;
    else if (_05_) \gen_arbiter.rr_q  <= _00_;
  assign _05_ = | { _16_, flush_i };
  assign _06_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _10_ = 32'd4 > \gen_arbiter.rr_q ;
  assign _11_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _13_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _14_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _15_ = 32'd4 <= \gen_arbiter.rr_q ;
  assign _16_ = gnt_i && req_o;
  assign _17_ = ~ req_i[0];
  assign _18_ = ~ req_i[2];
  assign _19_ = ~ \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign _20_ = ~ \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _21_ = ~ \gen_arbiter.req_nodes [1];
  assign _22_ = ~ \gen_arbiter.req_nodes [3];
  assign _23_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign _24_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [3] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [4] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[2].gen_level[0].sel  = _17_ | _01_;
  assign \gen_arbiter.gen_levels[2].gen_level[1].sel  = _18_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | req_i[4];
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_nodes [3] | \gen_arbiter.req_nodes [4];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _21_ | _03_;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _22_ | _04_;
  assign _00_ = flush_i ? 3'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _06_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _07_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _08_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _09_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [4] = _10_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _11_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _12_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _13_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _14_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [4] = _15_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _16_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 3'hx;
  assign \gen_arbiter.data_nodes [411:309] = \gen_arbiter.gen_levels[2].gen_level[0].sel  ? data_i[205:103] : data_i[102:0];
  assign \gen_arbiter.data_nodes [514:412] = \gen_arbiter.gen_levels[2].gen_level[1].sel  ? data_i[411:309] : data_i[308:206];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$543.$result [1:0] } : { 1'h0, \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$544.$result [1:0] };
  assign { \gen_arbiter.index_nodes [5], \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$544.$result [1:0] } = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? { 2'h1, \gen_arbiter.gen_levels[2].gen_level[1].sel  } : { 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel  };
  assign { \gen_arbiter.index_nodes [8], \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$543.$result [1:0] } = req_i[4] ? 3'h0 : 3'h2;
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [308:206] : \gen_arbiter.data_nodes [205:103];
  assign \gen_arbiter.data_nodes [205:103] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? \gen_arbiter.data_nodes [514:412] : \gen_arbiter.data_nodes [411:309];
  assign \gen_arbiter.data_nodes [308:206] = req_i[4] ? data_i[514:412] : 103'h00000000000000000000000000;
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign { \gen_arbiter.data_nodes [720:515], \gen_arbiter.data_nodes [102:0] } = { 103'h00000000000000000000000000, data_i[514:412], data_o };
  assign { \gen_arbiter.gnt_nodes [5], \gen_arbiter.gnt_nodes [0] } = { gnt_o[4], gnt_i };
  assign { \gen_arbiter.index_nodes [20:9], \gen_arbiter.index_nodes [7:6], \gen_arbiter.index_nodes [4:0] } = { 8'h00, \gen_arbiter.gen_levels[2].gen_level[1].sel , 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel , \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$543.$result [1:0], \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$544.$result [1:0], idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign { \gen_arbiter.req_nodes [6:5], \gen_arbiter.req_nodes [2], \gen_arbiter.req_nodes [0] } = { 1'h0, req_i[4], req_i[4], req_o };
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:358$559.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:358$560.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$543.$result [2] = 1'h1;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$544.$result [2] = 1'h0;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$553.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$554.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$555.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$556.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$557.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:378$558.inp  = 3'hx;
endmodule

module \$paramod$375bff7dd5de64f04e99c7614eef794cffe5d364\fpnew_fma_FC83A_5615B (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o, out_ready_i, busy_o);
  wire _000_;
  wire [6:0] _001_;
  wire [9:0] _002_;
  wire [24:0] _003_;
  wire [6:0] _004_;
  wire [9:0] _005_;
  wire _006_;
  wire [31:0] _007_;
  wire _008_;
  wire [50:0] _009_;
  wire [9:0] _010_;
  wire [24:0] _011_;
  wire _012_;
  wire [31:0] _013_;
  wire _014_;
  wire [50:0] _015_;
  wire [31:0] _016_;
  wire _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [76:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire [76:0] _054_;
  wire _055_;
  wire _056_;
  wire [75:0] _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [76:0] _073_;
  wire _074_;
  wire _075_;
  wire [31:0] _076_;
  wire _077_;
  wire [75:0] addend_after_shift;
  wire [6:0] addend_shamt;
  wire [6:0] addend_shamt_q;
  wire [75:0] addend_shifted;
  wire [23:0] addend_sticky_bits;
  wire any_operand_inf;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire effective_subtraction;
  wire effective_subtraction_q;
  wire [9:0] exponent_a;
  wire [9:0] exponent_addend;
  wire [9:0] exponent_b;
  wire [9:0] exponent_c;
  wire [9:0] exponent_difference;
  wire [9:0] exponent_difference_q;
  wire [9:0] exponent_product;
  wire [9:0] exponent_product_q;
  output extension_bit_o;
  wire extension_bit_o;
  wire [9:0] final_exponent;
  wire [24:0] final_mantissa;
  wire final_sign;
  wire final_sign_q;
  input flush_i;
  wire flush_i;
  wire \gen_inside_pipeline[0].reg_ena ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [7:0] info_c;
  wire [23:0] info_q;
  wire inject_carry_in;
  wire inp_pipe_aux_q;
  wire [2:0] inp_pipe_is_boxed_q;
  wire inp_pipe_op_mod_q;
  wire [3:0] inp_pipe_op_q;
  wire [95:0] inp_pipe_operands_q;
  wire inp_pipe_ready;
  wire [2:0] inp_pipe_rnd_mode_q;
  wire inp_pipe_tag_q;
  wire inp_pipe_valid_q;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [5:0] leading_zero_count;
  wire [6:0] leading_zero_count_sgn;
  wire lzc_zeroes;
  wire [23:0] mantissa_a;
  wire [23:0] mantissa_b;
  wire [23:0] mantissa_c;
  wire [13:0] mid_pipe_add_shamt_q;
  wire [0:1] mid_pipe_aux_q;
  wire [0:1] mid_pipe_eff_sub_q;
  wire [19:0] mid_pipe_exp_diff_q;
  wire [19:0] mid_pipe_exp_prod_q;
  wire [0:1] mid_pipe_final_sign_q;
  wire [0:1] mid_pipe_ready;
  wire [0:1] mid_pipe_res_is_spec_q;
  wire [5:0] mid_pipe_rnd_mode_q;
  wire [63:0] mid_pipe_spec_res_q;
  wire [9:0] mid_pipe_spec_stat_q;
  wire [0:1] mid_pipe_sticky_q;
  wire [151:0] mid_pipe_sum_q;
  wire [1:0] mid_pipe_tag_q;
  wire [19:0] mid_pipe_tent_exp_q;
  wire [0:1] mid_pipe_valid_q;
  wire [6:0] norm_shamt;
  wire [9:0] normalized_exponent;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [31:0] operand_a;
  wire [31:0] operand_b;
  wire [31:0] operand_c;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  wire out_pipe_aux_q;
  wire out_pipe_ready;
  wire [31:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [30:0] pre_round_abs;
  wire [7:0] pre_round_exponent;
  wire [22:0] pre_round_mantissa;
  wire pre_round_sign;
  wire [47:0] product;
  wire [75:0] product_shifted;
  wire [31:0] regular_result;
  wire [4:0] regular_status;
  wire [31:0] result_d;
  wire result_is_special;
  wire result_is_special_q;
  output [31:0] result_o;
  wire [31:0] result_o;
  wire result_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [30:0] rounded_abs;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire signalling_nan;
  wire [31:0] special_result;
  wire [31:0] special_result_q;
  wire [4:0] special_status;
  wire [4:0] special_status_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire sticky_after_norm;
  wire sticky_before_add;
  wire sticky_before_add_q;
  wire [75:0] sum;
  wire sum_carry;
  wire [50:0] sum_lower;
  wire [75:0] sum_q;
  wire [76:0] sum_raw;
  wire [76:0] sum_shifted;
  wire [50:0] sum_sticky_bits;
  wire [10:1] sv2v_tmp_00793;
  wire [32:1] sv2v_tmp_0252C;
  wire sv2v_tmp_192AB;
  wire sv2v_tmp_25EE6;
  wire [5:1] sv2v_tmp_2A843;
  wire [10:1] sv2v_tmp_2D21E;
  wire sv2v_tmp_36387;
  wire [32:1] sv2v_tmp_4A83E;
  wire sv2v_tmp_56A72;
  wire sv2v_tmp_6DFE4;
  wire sv2v_tmp_6F5F7;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DEC5;
  wire [7:1] sv2v_tmp_83404;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_9E262;
  wire [3:1] sv2v_tmp_A74E2;
  wire [10:1] sv2v_tmp_B4C85;
  wire [96:1] sv2v_tmp_BC8B9;
  wire sv2v_tmp_CB10A;
  wire [4:1] sv2v_tmp_CBA8F;
  wire sv2v_tmp_CDA0E;
  wire [76:1] sv2v_tmp_CEAB3;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_D7BD0;
  wire [3:1] sv2v_tmp_E1339;
  wire [5:1] sv2v_tmp_EC01B;
  wire [3:1] sv2v_tmp_FE389;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  wire [9:0] tentative_exponent;
  wire [9:0] tentative_exponent_q;
  wire tentative_sign;
  wire uf_after_round;
  assign exponent_addend = $signed({ 2'h0, operand_c[30:23] }) + $signed({ 9'h000, _056_ });
  assign _020_ = { 2'h0, exponent_a[7:0] } + info_a[6];
  assign _021_ = _020_ + { 2'h0, operand_b[30:23] };
  assign _022_ = _021_ + info_b[6];
  assign _023_ = { 26'h0000000, product, 2'h0 } + addend_shifted;
  assign sum_raw = _023_ + inject_carry_in;
  assign _025_ = 32'd26 + leading_zero_count;
  assign _024_ = $signed(_070_) + $signed(32'd1);
  assign _026_ = $signed(32'd26) + $signed(mid_pipe_exp_prod_q[9:0]);
  assign _027_ = $signed(normalized_exponent) + $signed(32'd1);
  assign inject_carry_in = effective_subtraction & _058_;
  assign \gen_inside_pipeline[0].reg_ena  = in_ready_o & in_valid_i;
  assign regular_status[1] = uf_after_round & regular_status[0];
  reg [75:0] _091_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _091_ <= 76'h0000000000000000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _091_ <= mid_pipe_sum_q[151:76];
  assign mid_pipe_sum_q[75:0] = _091_;
  reg \mid_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_028_) \mid_pipe_valid_q_reg[0]  <= _000_;
  assign mid_pipe_valid_q[1] = \mid_pipe_valid_q_reg[0] ;
  reg \mid_pipe_eff_sub_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_eff_sub_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_eff_sub_q_reg[0]  <= effective_subtraction;
  assign mid_pipe_eff_sub_q[1] = \mid_pipe_eff_sub_q_reg[0] ;
  reg \mid_pipe_sticky_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_sticky_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_sticky_q_reg[0]  <= sticky_before_add;
  assign mid_pipe_sticky_q[1] = \mid_pipe_sticky_q_reg[0] ;
  reg \mid_pipe_final_sign_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_final_sign_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_final_sign_q_reg[0]  <= final_sign;
  assign mid_pipe_final_sign_q[1] = \mid_pipe_final_sign_q_reg[0] ;
  reg [9:0] _096_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _096_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _096_ <= exponent_product;
  assign mid_pipe_exp_prod_q[9:0] = _096_;
  reg [9:0] _097_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _097_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _097_ <= exponent_difference;
  assign mid_pipe_exp_diff_q[9:0] = _097_;
  reg [6:0] _098_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _098_ <= 7'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _098_ <= addend_shamt;
  assign mid_pipe_add_shamt_q[6:0] = _098_;
  reg [9:0] _099_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _099_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _099_ <= sv2v_tmp_B4C85;
  assign mid_pipe_tent_exp_q[9:0] = _099_;
  reg \mid_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_aux_q_reg[0]  <= aux_i;
  assign mid_pipe_aux_q[1] = \mid_pipe_aux_q_reg[0] ;
  reg \mid_pipe_tag_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_tag_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_tag_q_reg[0]  <= tag_i;
  assign mid_pipe_tag_q[0] = \mid_pipe_tag_q_reg[0] ;
  reg [31:0] _102_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _102_ <= 32'd0;
    else if (\gen_inside_pipeline[0].reg_ena ) _102_ <= special_result;
  assign mid_pipe_spec_res_q[31:0] = _102_;
  reg [2:0] _103_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _103_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _103_ <= rnd_mode_i;
  assign mid_pipe_rnd_mode_q[2:0] = _103_;
  reg \mid_pipe_res_is_spec_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_res_is_spec_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_res_is_spec_q_reg[0]  <= result_is_special;
  assign mid_pipe_res_is_spec_q[1] = \mid_pipe_res_is_spec_q_reg[0] ;
  reg \mid_pipe_spec_stat_q_reg[4] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_spec_stat_q_reg[4]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_spec_stat_q_reg[4]  <= mid_pipe_spec_stat_q[9];
  assign mid_pipe_spec_stat_q[4] = \mid_pipe_spec_stat_q_reg[4] ;
  assign _028_ = | { in_ready_o, flush_i };
  assign _029_ = | { _065_, _062_ };
  assign _030_ = | { _065_, _064_, _063_ };
  assign _031_ = | { _065_, _064_, _062_ };
  assign _032_ = | { _065_, _064_, _063_, _062_ };
  assign _033_ = sum_raw[76] == tentative_sign;
  assign uf_after_round = ! rounded_abs[30:23];
  assign of_after_round = rounded_abs[30:23] == 8'hff;
  assign _034_ = $signed(_024_) >= $signed(32'd0);
  assign of_before_round = $signed(final_exponent) >= $signed(32'd255);
  assign _035_ = $signed(exponent_difference) > $signed(32'd0);
  assign _036_ = $signed(normalized_exponent) > $signed(32'd1);
  assign _037_ = $signed(exponent_difference) <= $signed(32'd4294967247);
  assign _038_ = $signed(exponent_difference) <= $signed(32'd26);
  assign _039_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd0);
  assign _040_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd2);
  assign _041_ = info_a[4] && info_b[5];
  assign _042_ = info_a[5] && info_b[4];
  assign _043_ = _051_ && info_c[4];
  assign _044_ = _043_ && effective_subtraction;
  assign _045_ = effective_subtraction && _059_;
  assign _046_ = effective_subtraction && _033_;
  assign _047_ = mid_pipe_eff_sub_q[1] && _040_;
  assign _048_ = _034_ && _049_;
  assign _049_ = ! lzc_zeroes;
  assign _050_ = _041_ || _042_;
  assign _051_ = info_a[4] || info_b[4];
  assign _052_ = info_a[5] || info_b[5];
  assign _053_ = _039_ || _047_;
  assign product = { info_a[7], mantissa_a[22:0] } * { info_b[7], operand_b[22:0] };
  assign _054_ = - sum_raw;
  assign _055_ = ~ operands_i[31];
  assign _056_ = ~ info_c[7];
  assign _057_ = ~ addend_after_shift;
  assign _058_ = ~ sticky_before_add;
  assign _059_ = ~ sum_raw[76];
  assign _060_ = ~ mid_pipe_valid_q[1];
  assign in_ready_o = out_ready_i | _060_;
  assign sticky_after_norm = _066_ | mid_pipe_sticky_q[1];
  assign regular_status[2] = of_before_round | of_after_round;
  assign _061_ = _067_ | of_before_round;
  assign regular_status[0] = _061_ | of_after_round;
  assign _011_ = _036_ ? sum_shifted[74:50] : { 1'h0, sum_shifted[74:51] };
  assign _015_ = _036_ ? { sum_shifted[49:0], 1'h0 } : sum_shifted[50:0];
  assign _010_ = _036_ ? _071_[9:0] : 10'h000;
  assign _002_ = sum_shifted[75] ? normalized_exponent : _010_;
  assign _009_ = sum_shifted[75] ? sum_shifted[50:0] : _015_;
  assign _003_ = sum_shifted[75] ? { 1'h1, sum_shifted[74:51] } : _011_;
  assign final_mantissa = sum_shifted[76] ? { 1'h1, sum_shifted[75:52] } : _003_;
  assign sum_sticky_bits = sum_shifted[76] ? sum_shifted[51:1] : _009_;
  assign final_exponent = sum_shifted[76] ? _027_[9:0] : _002_;
  assign _005_ = _048_ ? _024_[9:0] : 10'h000;
  assign _004_ = _048_ ? _025_[6:0] : _026_[6:0];
  assign normalized_exponent = _053_ ? _005_ : mid_pipe_tent_exp_q[9:0];
  assign norm_shamt = _053_ ? _004_ : mid_pipe_add_shamt_q[6:0];
  assign _001_ = _038_ ? _069_[6:0] : 7'h00;
  assign addend_shamt = _037_ ? 7'h4c : _001_;
  assign _019_ = info_c[4] ? { operand_c[31], 31'h7f800000 } : 32'd2143289344;
  assign _018_ = _051_ ? { tentative_sign, 31'h7f800000 } : _019_;
  assign _017_ = _044_ ? 1'h1 : 1'h0;
  assign _016_ = _044_ ? 32'd2143289344 : _018_;
  assign _014_ = any_operand_inf ? _017_ : 1'h0;
  assign _013_ = any_operand_inf ? _016_ : 32'd2143289344;
  assign _012_ = any_operand_inf ? 1'h1 : 1'h0;
  assign _008_ = any_operand_nan ? signalling_nan : _014_;
  assign _006_ = any_operand_nan ? 1'h1 : _012_;
  assign _007_ = any_operand_nan ? 32'd2143289344 : _013_;
  assign mid_pipe_spec_stat_q[9] = _050_ ? 1'h1 : _008_;
  assign result_is_special = _050_ ? 1'h1 : _006_;
  assign special_result = _050_ ? 32'd2143289344 : _007_;
  function [0:0] _176_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _176_ = b[0:0];
      3'b?1?:
        _176_ = b[1:1];
      3'b1??:
        _176_ = b[2:2];
      default:
        _176_ = a;
    endcase
  endfunction
  assign operand_a[31] = _176_(1'h1, { _055_, 1'h0, operands_i[31] }, { _064_, _063_, _029_ });
  function [30:0] _177_;
    input [30:0] a;
    input [61:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _177_ = b[30:0];
      2'b1?:
        _177_ = b[61:31];
      default:
        _177_ = a;
    endcase
  endfunction
  assign { exponent_a[7:0], mantissa_a[22:0] } = _177_(31'h00800001, { 31'h3f800000, operands_i[30:0] }, { _063_, _031_ });
  assign info_b = _032_ ? info_q[15:8] : 8'hff;
  function [7:0] _179_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _179_ = b[7:0];
      2'b1?:
        _179_ = b[15:8];
      default:
        _179_ = a;
    endcase
  endfunction
  assign info_a = _179_(8'hff, { 8'h81, info_q[7:0] }, { _063_, _031_ });
  function [31:0] _180_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _180_ = b[31:0];
      2'b1?:
        _180_ = b[63:32];
      default:
        _180_ = a;
    endcase
  endfunction
  assign operand_c = _180_(32'd2155872257, { _077_, operands_i[94:64], 32'h80000000 }, { _030_, _062_ });
  assign operand_b = _032_ ? operands_i[63:32] : 32'd2155872257;
  function [7:0] _182_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _182_ = b[7:0];
      2'b1?:
        _182_ = b[15:8];
      default:
        _182_ = a;
    endcase
  endfunction
  assign info_c = _182_(8'hff, { info_q[23:16], 8'h21 }, { _030_, _062_ });
  assign _062_ = op_i == 4'h3;
  assign _063_ = op_i == 4'h2;
  assign _064_ = op_i == 4'h1;
  assign _065_ = ! op_i;
  assign any_operand_inf = | { info_c[4], info_b[4], info_a[4] };
  assign any_operand_nan = | { info_c[3], info_b[3], info_a[3] };
  assign signalling_nan = | { info_c[2], info_b[2], info_a[2] };
  assign sticky_before_add = | addend_sticky_bits;
  assign _066_ = | sum_sticky_bits;
  assign _067_ = | round_sticky_bits;
  assign busy_o = | { mid_pipe_valid_q[1], in_valid_i };
  assign sum_shifted = mid_pipe_sum_q[75:0] << norm_shamt;
  assign { addend_after_shift, addend_sticky_bits } = { info_c[7], operand_c[22:0], 76'h0000000000000000000 } >> addend_shamt;
  assign _068_ = _022_ - 32'd127;
  assign exponent_difference = $signed(exponent_addend) - $signed(exponent_product);
  assign _069_ = $signed(32'd27) - $signed(exponent_difference);
  assign _070_ = $signed(mid_pipe_exp_prod_q[9:0]) - $signed({ 1'h0, leading_zero_count });
  assign _071_ = $signed(normalized_exponent) - $signed(32'd1);
  assign { _072_[31:10], exponent_product } = _052_ ? 32'd4294967171 : _068_;
  assign sv2v_tmp_B4C85 = _035_ ? exponent_addend : exponent_product;
  assign addend_shifted = effective_subtraction ? _057_ : addend_after_shift;
  assign { _073_[76], mid_pipe_sum_q[151:76] } = _045_ ? _054_ : sum_raw;
  assign _074_ = effective_subtraction ? 1'h0 : tentative_sign;
  assign final_sign = _046_ ? 1'h1 : _074_;
  assign _075_ = in_ready_o ? in_valid_i : 1'hx;
  assign _000_ = flush_i ? 1'h0 : _075_;
  assign { _076_[31:8], pre_round_abs[30:23] } = of_before_round ? 32'd254 : { 24'h000000, final_exponent[7:0] };
  assign pre_round_mantissa = of_before_round ? 23'h7fffff : final_mantissa[23:1];
  assign round_sticky_bits = of_before_round ? 2'h3 : { final_mantissa[0], sticky_after_norm };
  assign result_o = mid_pipe_res_is_spec_q[1] ? mid_pipe_spec_res_q[31:0] : { rounded_sign, rounded_abs };
  assign status_o = mid_pipe_res_is_spec_q[1] ? { mid_pipe_spec_stat_q[4], 4'h0 } : { 2'h0, regular_status[2:0] };
  assign _077_ = operands_i[95] ^ op_mod_i;
  assign effective_subtraction = tentative_sign ^ operand_c[31];
  assign tentative_sign = operand_a[31] ^ operand_b[31];
  \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier  i_class_inputs (
    .info_o(info_q),
    .is_boxed_i(is_boxed_i),
    .operands_i(operands_i)
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i({ pre_round_abs[30:23], pre_round_mantissa }),
    .effective_subtraction_i(mid_pipe_eff_sub_q[1]),
    .exact_zero_o(result_zero),
    .rnd_mode_i(mid_pipe_rnd_mode_q[2:0]),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(mid_pipe_final_sign_q[1]),
    .sign_o(rounded_sign)
  );
  \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc  i_lzc (
    .cnt_o(leading_zero_count),
    .empty_o(lzc_zeroes),
    .in_i(mid_pipe_sum_q[50:0])
  );
  assign _072_[9:0] = exponent_product;
  assign _073_[75:0] = mid_pipe_sum_q[151:76];
  assign _076_[7:0] = pre_round_abs[30:23];
  assign addend_shamt_q = mid_pipe_add_shamt_q[6:0];
  assign aux_o = mid_pipe_aux_q[1];
  assign effective_subtraction_q = mid_pipe_eff_sub_q[1];
  assign exponent_a[9:8] = 2'h0;
  assign exponent_b = { 2'h0, operand_b[30:23] };
  assign exponent_c = { 2'h0, operand_c[30:23] };
  assign exponent_difference_q = mid_pipe_exp_diff_q[9:0];
  assign exponent_product_q = mid_pipe_exp_prod_q[9:0];
  assign extension_bit_o = 1'h1;
  assign final_sign_q = mid_pipe_final_sign_q[1];
  assign inp_pipe_aux_q = aux_i;
  assign inp_pipe_is_boxed_q = is_boxed_i;
  assign inp_pipe_op_mod_q = op_mod_i;
  assign inp_pipe_op_q = op_i;
  assign inp_pipe_operands_q = operands_i;
  assign inp_pipe_ready = in_ready_o;
  assign inp_pipe_rnd_mode_q = rnd_mode_i;
  assign inp_pipe_tag_q = tag_i;
  assign inp_pipe_valid_q = in_valid_i;
  assign leading_zero_count_sgn = { 1'h0, leading_zero_count };
  assign mantissa_a[23] = info_a[7];
  assign mantissa_b = { info_b[7], operand_b[22:0] };
  assign mantissa_c = { info_c[7], operand_c[22:0] };
  assign mid_pipe_add_shamt_q[13:7] = addend_shamt;
  assign mid_pipe_aux_q[0] = aux_i;
  assign mid_pipe_eff_sub_q[0] = effective_subtraction;
  assign mid_pipe_exp_diff_q[19:10] = exponent_difference;
  assign mid_pipe_exp_prod_q[19:10] = exponent_product;
  assign mid_pipe_final_sign_q[0] = final_sign;
  assign mid_pipe_ready = { in_ready_o, out_ready_i };
  assign mid_pipe_res_is_spec_q[0] = result_is_special;
  assign mid_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign mid_pipe_spec_res_q[63:32] = special_result;
  assign { mid_pipe_spec_stat_q[8:5], mid_pipe_spec_stat_q[3:0] } = 8'h00;
  assign mid_pipe_sticky_q[0] = sticky_before_add;
  assign mid_pipe_tag_q[1] = tag_i;
  assign mid_pipe_tent_exp_q[19:10] = sv2v_tmp_B4C85;
  assign mid_pipe_valid_q[0] = in_valid_i;
  assign operand_a[30:0] = { exponent_a[7:0], mantissa_a[22:0] };
  assign out_pipe_aux_q = mid_pipe_aux_q[1];
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = mid_pipe_tag_q[0];
  assign out_pipe_valid_q = mid_pipe_valid_q[1];
  assign out_valid_o = mid_pipe_valid_q[1];
  assign pre_round_abs[22:0] = pre_round_mantissa;
  assign pre_round_exponent = pre_round_abs[30:23];
  assign pre_round_sign = mid_pipe_final_sign_q[1];
  assign product_shifted = { 26'h0000000, product, 2'h0 };
  assign regular_result = { rounded_sign, rounded_abs };
  assign regular_status[4:3] = 2'h0;
  assign result_d = result_o;
  assign result_is_special_q = mid_pipe_res_is_spec_q[1];
  assign rnd_mode_q = mid_pipe_rnd_mode_q[2:0];
  assign special_result_q = mid_pipe_spec_res_q[31:0];
  assign special_status = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign special_status_q = { mid_pipe_spec_stat_q[4], 4'h0 };
  assign status_d = status_o;
  assign sticky_before_add_q = mid_pipe_sticky_q[1];
  assign sum = mid_pipe_sum_q[151:76];
  assign sum_carry = sum_raw[76];
  assign sum_lower = mid_pipe_sum_q[50:0];
  assign sum_q = mid_pipe_sum_q[75:0];
  assign sv2v_tmp_00793 = exponent_difference;
  assign sv2v_tmp_0252C = result_o;
  assign sv2v_tmp_192AB = mid_pipe_tag_q[0];
  assign sv2v_tmp_25EE6 = mid_pipe_valid_q[1];
  assign sv2v_tmp_2A843 = status_o;
  assign sv2v_tmp_2D21E = exponent_product;
  assign sv2v_tmp_36387 = tag_i;
  assign sv2v_tmp_4A83E = special_result;
  assign sv2v_tmp_56A72 = effective_subtraction;
  assign sv2v_tmp_6DFE4 = tag_i;
  assign sv2v_tmp_6F5F7 = sticky_before_add;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DEC5 = result_is_special;
  assign sv2v_tmp_83404 = addend_shamt;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_9E262 = mid_pipe_aux_q[1];
  assign sv2v_tmp_A74E2 = rnd_mode_i;
  assign sv2v_tmp_BC8B9 = operands_i;
  assign sv2v_tmp_CB10A = in_valid_i;
  assign sv2v_tmp_CBA8F = op_i;
  assign sv2v_tmp_CDA0E = aux_i;
  assign sv2v_tmp_CEAB3 = mid_pipe_sum_q[151:76];
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D7BD0 = final_sign;
  assign sv2v_tmp_E1339 = rnd_mode_i;
  assign sv2v_tmp_EC01B = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign sv2v_tmp_FE389 = is_boxed_i;
  assign tag_o = mid_pipe_tag_q[0];
  assign tentative_exponent = sv2v_tmp_B4C85;
  assign tentative_exponent_q = mid_pipe_tent_exp_q[9:0];
endmodule

module \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc (in_i, cnt_o, empty_o);
  output [5:0] cnt_o;
  wire [5:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [50:0] \gen_lzc.in_tmp ;
  wire [305:0] \gen_lzc.index_lut ;
  wire [383:0] \gen_lzc.index_nodes ;
  wire [63:0] \gen_lzc.sel_nodes ;
  input [50:0] in_i;
  wire [50:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [31] = in_i[50] | in_i[49];
  assign \gen_lzc.sel_nodes [32] = in_i[48] | in_i[47];
  assign \gen_lzc.sel_nodes [33] = in_i[46] | in_i[45];
  assign \gen_lzc.sel_nodes [34] = in_i[44] | in_i[43];
  assign \gen_lzc.sel_nodes [35] = in_i[42] | in_i[41];
  assign \gen_lzc.sel_nodes [36] = in_i[40] | in_i[39];
  assign \gen_lzc.sel_nodes [37] = in_i[38] | in_i[37];
  assign \gen_lzc.sel_nodes [38] = in_i[36] | in_i[35];
  assign \gen_lzc.sel_nodes [39] = in_i[34] | in_i[33];
  assign \gen_lzc.sel_nodes [40] = in_i[32] | in_i[31];
  assign \gen_lzc.sel_nodes [41] = in_i[30] | in_i[29];
  assign \gen_lzc.sel_nodes [42] = in_i[28] | in_i[27];
  assign \gen_lzc.sel_nodes [43] = in_i[26] | in_i[25];
  assign \gen_lzc.sel_nodes [44] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [45] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [46] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [47] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [48] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [49] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [50] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [51] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [52] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [53] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [54] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [55] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | \gen_lzc.sel_nodes [6];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.sel_nodes [15] = \gen_lzc.sel_nodes [31] | \gen_lzc.sel_nodes [32];
  assign \gen_lzc.sel_nodes [16] = \gen_lzc.sel_nodes [33] | \gen_lzc.sel_nodes [34];
  assign \gen_lzc.sel_nodes [17] = \gen_lzc.sel_nodes [35] | \gen_lzc.sel_nodes [36];
  assign \gen_lzc.sel_nodes [18] = \gen_lzc.sel_nodes [37] | \gen_lzc.sel_nodes [38];
  assign \gen_lzc.sel_nodes [19] = \gen_lzc.sel_nodes [39] | \gen_lzc.sel_nodes [40];
  assign \gen_lzc.sel_nodes [20] = \gen_lzc.sel_nodes [41] | \gen_lzc.sel_nodes [42];
  assign \gen_lzc.sel_nodes [21] = \gen_lzc.sel_nodes [43] | \gen_lzc.sel_nodes [44];
  assign \gen_lzc.sel_nodes [22] = \gen_lzc.sel_nodes [45] | \gen_lzc.sel_nodes [46];
  assign \gen_lzc.sel_nodes [23] = \gen_lzc.sel_nodes [47] | \gen_lzc.sel_nodes [48];
  assign \gen_lzc.sel_nodes [24] = \gen_lzc.sel_nodes [49] | \gen_lzc.sel_nodes [50];
  assign \gen_lzc.sel_nodes [25] = \gen_lzc.sel_nodes [51] | \gen_lzc.sel_nodes [52];
  assign \gen_lzc.sel_nodes [26] = \gen_lzc.sel_nodes [53] | \gen_lzc.sel_nodes [54];
  assign \gen_lzc.sel_nodes [6] = \gen_lzc.sel_nodes [55] | in_i[0];
  assign \gen_lzc.index_nodes [191:186] = in_i[50] ? 6'h00 : 6'h01;
  assign \gen_lzc.index_nodes [197:192] = in_i[48] ? 6'h02 : 6'h03;
  assign \gen_lzc.index_nodes [203:198] = in_i[46] ? 6'h04 : 6'h05;
  assign \gen_lzc.index_nodes [209:204] = in_i[44] ? 6'h06 : 6'h07;
  assign \gen_lzc.index_nodes [215:210] = in_i[42] ? 6'h08 : 6'h09;
  assign \gen_lzc.index_nodes [221:216] = in_i[40] ? 6'h0a : 6'h0b;
  assign \gen_lzc.index_nodes [227:222] = in_i[38] ? 6'h0c : 6'h0d;
  assign \gen_lzc.index_nodes [233:228] = in_i[36] ? 6'h0e : 6'h0f;
  assign \gen_lzc.index_nodes [239:234] = in_i[34] ? 6'h10 : 6'h11;
  assign \gen_lzc.index_nodes [245:240] = in_i[32] ? 6'h12 : 6'h13;
  assign \gen_lzc.index_nodes [251:246] = in_i[30] ? 6'h14 : 6'h15;
  assign \gen_lzc.index_nodes [257:252] = in_i[28] ? 6'h16 : 6'h17;
  assign \gen_lzc.index_nodes [263:258] = in_i[26] ? 6'h18 : 6'h19;
  assign \gen_lzc.index_nodes [269:264] = in_i[24] ? 6'h1a : 6'h1b;
  assign \gen_lzc.index_nodes [275:270] = in_i[22] ? 6'h1c : 6'h1d;
  assign \gen_lzc.index_nodes [281:276] = in_i[20] ? 6'h1e : 6'h1f;
  assign \gen_lzc.index_nodes [287:282] = in_i[18] ? 6'h20 : 6'h21;
  assign \gen_lzc.index_nodes [293:288] = in_i[16] ? 6'h22 : 6'h23;
  assign \gen_lzc.index_nodes [299:294] = in_i[14] ? 6'h24 : 6'h25;
  assign \gen_lzc.index_nodes [305:300] = in_i[12] ? 6'h26 : 6'h27;
  assign \gen_lzc.index_nodes [311:306] = in_i[10] ? 6'h28 : 6'h29;
  assign \gen_lzc.index_nodes [317:312] = in_i[8] ? 6'h2a : 6'h2b;
  assign \gen_lzc.index_nodes [323:318] = in_i[6] ? 6'h2c : 6'h2d;
  assign \gen_lzc.index_nodes [329:324] = in_i[4] ? 6'h2e : 6'h2f;
  assign \gen_lzc.index_nodes [335:330] = in_i[2] ? 6'h30 : 6'h31;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [11:6] : \gen_lzc.index_nodes [17:12];
  assign \gen_lzc.index_nodes [11:6] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [23:18] : \gen_lzc.index_nodes [29:24];
  assign \gen_lzc.index_nodes [17:12] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [35:30] : \gen_lzc.index_nodes [41:36];
  assign \gen_lzc.index_nodes [23:18] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [47:42] : \gen_lzc.index_nodes [53:48];
  assign \gen_lzc.index_nodes [29:24] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [59:54] : \gen_lzc.index_nodes [65:60];
  assign \gen_lzc.index_nodes [35:30] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [71:66] : \gen_lzc.index_nodes [77:72];
  assign \gen_lzc.index_nodes [41:36] = \gen_lzc.sel_nodes [6] ? \gen_lzc.index_nodes [83:78] : 6'h00;
  assign \gen_lzc.index_nodes [47:42] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [95:90] : \gen_lzc.index_nodes [101:96];
  assign \gen_lzc.index_nodes [53:48] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [107:102] : \gen_lzc.index_nodes [113:108];
  assign \gen_lzc.index_nodes [59:54] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [119:114] : \gen_lzc.index_nodes [125:120];
  assign \gen_lzc.index_nodes [65:60] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [131:126] : \gen_lzc.index_nodes [137:132];
  assign \gen_lzc.index_nodes [71:66] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [143:138] : \gen_lzc.index_nodes [149:144];
  assign \gen_lzc.index_nodes [77:72] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [155:150] : \gen_lzc.index_nodes [161:156];
  assign \gen_lzc.index_nodes [95:90] = \gen_lzc.sel_nodes [31] ? \gen_lzc.index_nodes [191:186] : \gen_lzc.index_nodes [197:192];
  assign \gen_lzc.index_nodes [101:96] = \gen_lzc.sel_nodes [33] ? \gen_lzc.index_nodes [203:198] : \gen_lzc.index_nodes [209:204];
  assign \gen_lzc.index_nodes [107:102] = \gen_lzc.sel_nodes [35] ? \gen_lzc.index_nodes [215:210] : \gen_lzc.index_nodes [221:216];
  assign \gen_lzc.index_nodes [113:108] = \gen_lzc.sel_nodes [37] ? \gen_lzc.index_nodes [227:222] : \gen_lzc.index_nodes [233:228];
  assign \gen_lzc.index_nodes [119:114] = \gen_lzc.sel_nodes [39] ? \gen_lzc.index_nodes [239:234] : \gen_lzc.index_nodes [245:240];
  assign \gen_lzc.index_nodes [125:120] = \gen_lzc.sel_nodes [41] ? \gen_lzc.index_nodes [251:246] : \gen_lzc.index_nodes [257:252];
  assign \gen_lzc.index_nodes [131:126] = \gen_lzc.sel_nodes [43] ? \gen_lzc.index_nodes [263:258] : \gen_lzc.index_nodes [269:264];
  assign \gen_lzc.index_nodes [137:132] = \gen_lzc.sel_nodes [45] ? \gen_lzc.index_nodes [275:270] : \gen_lzc.index_nodes [281:276];
  assign \gen_lzc.index_nodes [143:138] = \gen_lzc.sel_nodes [47] ? \gen_lzc.index_nodes [287:282] : \gen_lzc.index_nodes [293:288];
  assign \gen_lzc.index_nodes [149:144] = \gen_lzc.sel_nodes [49] ? \gen_lzc.index_nodes [299:294] : \gen_lzc.index_nodes [305:300];
  assign \gen_lzc.index_nodes [155:150] = \gen_lzc.sel_nodes [51] ? \gen_lzc.index_nodes [311:306] : \gen_lzc.index_nodes [317:312];
  assign \gen_lzc.index_nodes [161:156] = \gen_lzc.sel_nodes [53] ? \gen_lzc.index_nodes [323:318] : \gen_lzc.index_nodes [329:324];
  assign \gen_lzc.index_nodes [83:78] = \gen_lzc.sel_nodes [55] ? \gen_lzc.index_nodes [335:330] : 6'h32;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd51;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24], in_i[25], in_i[26], in_i[27], in_i[28], in_i[29], in_i[30], in_i[31], in_i[32], in_i[33], in_i[34], in_i[35], in_i[36], in_i[37], in_i[38], in_i[39], in_i[40], in_i[41], in_i[42], in_i[43], in_i[44], in_i[45], in_i[46], in_i[47], in_i[48], in_i[49], in_i[50] };
  assign \gen_lzc.index_lut  = 306'h32c70beeb6caeaa689e69648e28607de75c6da6585d65544d24503ce34c2ca2481c61440c2040;
  assign { \gen_lzc.index_nodes [377:336], \gen_lzc.index_nodes [185:162], \gen_lzc.index_nodes [89:84], \gen_lzc.index_nodes [5:0] } = { 60'h000000000c80000, \gen_lzc.index_nodes [83:78], 6'h00, cnt_o };
  assign { \gen_lzc.sel_nodes [62:56], \gen_lzc.sel_nodes [30:27], \gen_lzc.sel_nodes [14:13] } = { 6'h00, in_i[0], 3'h0, \gen_lzc.sel_nodes [6], 1'h0, \gen_lzc.sel_nodes [6] };
endmodule

module \$paramod$4ad69b37e21d25e1f375caf61de90101c95aea44\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [102:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [514:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$25d8924d372eee084dfc5c8d348ade21ebd4dc97\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[1];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
  assign result_o = arbiter_output[102:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[0];
endmodule

module \$paramod$78c4f765751976d874075cb6704428d12ae7ae78\FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_21317_11D0A (clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire [101:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  wire [1:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$126.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$161.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$210.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$226.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$242.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$258.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$56.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$91.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:91$194.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:91$36.$result ;
  wire \gen_operation_groups[0].in_valid ;
  wire [14:0] \gen_operation_groups[0].input_boxed ;
  wire [31:0] \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[1].in_valid ;
  wire [9:0] \gen_operation_groups[1].input_boxed ;
  wire [31:0] \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[2].in_valid ;
  wire [9:0] \gen_operation_groups[2].input_boxed ;
  wire [31:0] \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[3].in_valid ;
  wire [14:0] \gen_operation_groups[3].input_boxed ;
  wire [31:0] \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [14:0] is_boxed;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [287:0] operands_i;
  wire [287:0] operands_i;
  wire [3:0] opgrp_busy;
  wire [3:0] opgrp_ext;
  wire [3:0] opgrp_in_ready;
  wire [3:0] opgrp_out_ready;
  wire [3:0] opgrp_out_valid;
  wire [407:0] opgrp_outputs;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1335  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1335 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1335 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1335 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1335 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1335 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1335 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1335 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1335 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1335 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1335 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1335 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1335 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1335 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1335 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1335 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1335 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$161.$result  = \$auto$proc_rom.cc:150:do_switch$1335 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1339  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1339 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1339 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1339 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1339 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1339 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1339 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1339 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1339 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1339 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1339 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1339 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1339 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1339 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1339 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1339 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1339 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$126.$result  = \$auto$proc_rom.cc:150:do_switch$1339 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1343  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1343 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1343 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1343 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1343 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1343 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1343 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1343 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1343 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1343 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1343 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1343 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1343 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1343 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1343 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1343 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1343 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$91.$result  = \$auto$proc_rom.cc:150:do_switch$1343 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1347  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1347 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1347 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1347 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1347 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1347 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1347 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1347 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1347 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1347 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1347 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1347 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1347 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1347 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1347 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1347 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1347 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$56.$result  = \$auto$proc_rom.cc:150:do_switch$1347 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1351  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1351 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1351 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1351 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1351 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1351 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1351 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1351 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1351 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1351 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1351 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1351 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1351 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1351 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1351 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1351 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1351 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:91$36.$result  = \$auto$proc_rom.cc:150:do_switch$1351 [op_i];
  assign \gen_operation_groups[0].in_valid  = in_valid_i & _12_;
  assign \gen_operation_groups[1].in_valid  = in_valid_i & _13_;
  assign \gen_operation_groups[2].in_valid  = in_valid_i & _14_;
  assign \gen_operation_groups[3].in_valid  = in_valid_i & _15_;
  assign in_ready_o = in_valid_i & _16_;
  assign _00_ = operands_i[95:32] == 64'hffffffffffffffff;
  assign _01_ = operands_i[191:128] == 64'hffffffffffffffff;
  assign _02_ = operands_i[287:224] == 64'hffffffffffffffff;
  assign _03_ = operands_i[95:64] == 32'd4294967295;
  assign _04_ = operands_i[191:160] == 32'd4294967295;
  assign _05_ = operands_i[287:256] == 32'd4294967295;
  assign _09_ = operands_i[95:8] == 88'hffffffffffffffffffffff;
  assign _10_ = operands_i[191:104] == 88'hffffffffffffffffffffff;
  assign _11_ = operands_i[287:200] == 88'hffffffffffffffffffffff;
  assign _06_ = operands_i[95:16] == 80'hffffffffffffffffffff;
  assign _07_ = operands_i[191:112] == 80'hffffffffffffffffffff;
  assign _08_ = operands_i[287:208] == 80'hffffffffffffffffffff;
  assign _12_ = ! \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$56.$result ;
  assign _13_ = \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$91.$result  == 2'h1;
  assign _14_ = \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$126.$result  == 2'h2;
  assign _15_ = \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$161.$result  == 2'h3;
  assign busy_o = | opgrp_busy;
  wire [3:0] _62_ = opgrp_in_ready;
  assign _16_ = _62_[\fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:91$36.$result  +: 1];
  assign \gen_operation_groups[0].input_boxed [0] = vectorial_op_i ? 1'h1 : _00_;
  assign \gen_operation_groups[0].input_boxed [1] = vectorial_op_i ? 1'h1 : _01_;
  assign \gen_operation_groups[0].input_boxed [2] = vectorial_op_i ? 1'h1 : _02_;
  assign \gen_operation_groups[0].input_boxed [3] = vectorial_op_i ? 1'h1 : _03_;
  assign \gen_operation_groups[0].input_boxed [4] = vectorial_op_i ? 1'h1 : _04_;
  assign \gen_operation_groups[0].input_boxed [5] = vectorial_op_i ? 1'h1 : _05_;
  assign \gen_operation_groups[0].input_boxed [9] = vectorial_op_i ? 1'h1 : _09_;
  assign \gen_operation_groups[0].input_boxed [10] = vectorial_op_i ? 1'h1 : _10_;
  assign \gen_operation_groups[0].input_boxed [11] = vectorial_op_i ? 1'h1 : _11_;
  assign \gen_operation_groups[0].input_boxed [12] = vectorial_op_i ? 1'h1 : _06_;
  assign \gen_operation_groups[0].input_boxed [13] = vectorial_op_i ? 1'h1 : _07_;
  assign \gen_operation_groups[0].input_boxed [14] = vectorial_op_i ? 1'h1 : _08_;
  \$paramod$b84a696d21c022a0088bf4ba72ca5972d8b9b5aa\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[0].i_opgroup_block  (
    .busy_o(opgrp_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[0]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[0]),
    .in_valid_i(\gen_operation_groups[0].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[0]),
    .out_valid_o(opgrp_out_valid[0]),
    .result_o(opgrp_outputs[101:6]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[5:1]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$4ad69b37e21d25e1f375caf61de90101c95aea44\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[1].i_opgroup_block  (
    .busy_o(opgrp_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[1]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[1]),
    .in_valid_i(\gen_operation_groups[1].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[191:0]),
    .out_ready_i(opgrp_out_ready[1]),
    .out_valid_o(opgrp_out_valid[1]),
    .result_o(opgrp_outputs[203:108]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[107:103]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[102]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$fac29a0b6f82f9be9026852c6ea7fc707c5eb427\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[2].i_opgroup_block  (
    .busy_o(opgrp_busy[2]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[2]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[2]),
    .in_valid_i(\gen_operation_groups[2].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[191:0]),
    .out_ready_i(opgrp_out_ready[2]),
    .out_valid_o(opgrp_out_valid[2]),
    .result_o(opgrp_outputs[305:210]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[209:205]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[204]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$9e832374ca5ef23ac6afbbc4ccdfe51f925036cc\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[3].i_opgroup_block  (
    .busy_o(opgrp_busy[3]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[3]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[3]),
    .in_valid_i(\gen_operation_groups[3].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[3]),
    .out_valid_o(opgrp_out_valid[3]),
    .result_o(opgrp_outputs[407:312]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[311:307]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[306]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$e77a38ca16a2a9acd55e0da04797beb3bfc12c80\rr_arb_tree_DE4E6_76EE6  i_arbiter (
    .clk_i(clk_i),
    .data_i(opgrp_outputs),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(opgrp_out_ready),
    .req_i(opgrp_out_valid),
    .req_o(out_valid_o),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$210.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$226.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$242.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:140$258.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:91$194.op  = 4'hx;
  assign \gen_operation_groups[0].input_boxed [8:6] = \gen_operation_groups[0].input_boxed [14:12];
  assign \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[1].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[2].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[3].input_boxed  = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] };
  assign \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign is_boxed = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] };
  assign result_o = arbiter_output[101:6];
  assign status_o = arbiter_output[5:1];
  assign tag_o = arbiter_output[0];
endmodule

module \$paramod$84742d6f36b81f72c2d278e510af69e7c85b3c2f\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire [4:0] _00_;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[1].local_result ;
  wire \gen_num_lanes[1].local_sign ;
  wire \gen_num_lanes[2].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[2].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[2].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[2].active_lane.op_status ;
  wire \gen_num_lanes[2].active_lane.out_ready ;
  wire \gen_num_lanes[2].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[2].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[2].local_result ;
  wire \gen_num_lanes[2].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [2:0] lane_busy;
  wire [29:0] lane_class_mask;
  wire [2:0] lane_ext_bit;
  wire [2:0] lane_in_ready;
  wire [2:0] lane_is_class;
  wire [2:0] lane_out_valid;
  wire [14:0] lane_status;
  wire [2:0] lane_tags;
  wire [2:0] lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [287:0] operands_i;
  wire [287:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  wire result_is_class;
  wire result_is_vector;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire [95:0] slice_regular_result;
  wire [95:0] slice_result;
  wire [95:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & result_is_vector;
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & result_is_vector;
  assign lane_out_valid[2] = \gen_num_lanes[2].active_lane.out_valid  & result_is_vector;
  assign _00_ = lane_status[4:0] | lane_status[9:5];
  assign status_o = _00_ | lane_status[14:10];
  assign busy_o = | lane_busy;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[2].local_result  = lane_out_valid[2] ? \gen_num_lanes[2].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  assign lane_status[14:10] = lane_out_valid[2] ? \gen_num_lanes[2].active_lane.op_status  : 5'h00;
  \$paramod$375bff7dd5de64f04e99c7614eef794cffe5d364\fpnew_fma_FC83A_5615B  \gen_num_lanes[0].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(result_is_vector),
    .busy_o(lane_busy[0]),
    .clk_i(clk_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[223:192], operands_i[127:96], operands_i[31:0] }),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$375bff7dd5de64f04e99c7614eef794cffe5d364\fpnew_fma_FC83A_5615B  \gen_num_lanes[1].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial[1]),
    .busy_o(lane_busy[1]),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit[1]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[255:224], operands_i[159:128], operands_i[63:32] }),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[1])
  );
  \$paramod$375bff7dd5de64f04e99c7614eef794cffe5d364\fpnew_fma_FC83A_5615B  \gen_num_lanes[2].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial[2]),
    .busy_o(lane_busy[2]),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit[2]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[2]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[287:256], operands_i[191:160], operands_i[95:64] }),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[2].active_lane.out_valid ),
    .result_o(\gen_num_lanes[2].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[2].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[2])
  );
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = { operands_i[223:192], operands_i[127:96], operands_i[31:0] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[0].local_sign  = 1'h1;
  assign \gen_num_lanes[1].active_lane.local_operands  = { operands_i[255:224], operands_i[159:128], operands_i[63:32] };
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[1].local_sign  = 1'h1;
  assign \gen_num_lanes[2].active_lane.in_valid  = \gen_num_lanes[1].active_lane.in_valid ;
  assign \gen_num_lanes[2].active_lane.local_operands  = { operands_i[287:256], operands_i[191:160], operands_i[95:64] };
  assign \gen_num_lanes[2].active_lane.out_ready  = \gen_num_lanes[1].active_lane.out_ready ;
  assign \gen_num_lanes[2].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[2].local_sign  = 1'h1;
  assign lane_class_mask = 30'h00100401;
  assign lane_ext_bit[0] = extension_bit_o;
  assign lane_in_ready[0] = in_ready_o;
  assign lane_is_class = 3'h0;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[0] = tag_o;
  assign lane_vectorial[0] = result_is_vector;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd3;
  assign \output_processing.temp_status  = status_o;
  assign result_is_class = 1'h0;
  assign result_o = { \gen_num_lanes[2].local_result , \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_regular_result = { \gen_num_lanes[2].local_result , \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_result = { \gen_num_lanes[2].local_result , \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_vec_class_result = 96'h000000000000000000818181;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$9e832374ca5ef23ac6afbbc4ccdfe51f925036cc\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [102:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [514:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [287:0] operands_i;
  wire [287:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$25d8924d372eee084dfc5c8d348ade21ebd4dc97\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[1];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
  assign result_o = arbiter_output[102:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[0];
endmodule

module \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [31:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [31:0] \gen_num_values[1].value ;
  wire \gen_num_values[2].is_boxed ;
  wire \gen_num_values[2].is_inf ;
  wire \gen_num_values[2].is_nan ;
  wire \gen_num_values[2].is_normal ;
  wire \gen_num_values[2].is_quiet ;
  wire \gen_num_values[2].is_signalling ;
  wire \gen_num_values[2].is_subnormal ;
  wire \gen_num_values[2].is_zero ;
  wire [31:0] \gen_num_values[2].value ;
  output [23:0] info_o;
  wire [23:0] info_o;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  assign _000_ = ! operands_i[30:23];
  assign _002_ = ! operands_i[62:55];
  assign _004_ = ! operands_i[94:87];
  assign _001_ = ! operands_i[22:0];
  assign _003_ = ! operands_i[54:32];
  assign _005_ = ! operands_i[86:64];
  assign _006_ = operands_i[30:23] == 8'hff;
  assign _007_ = operands_i[62:55] == 8'hff;
  assign _008_ = operands_i[94:87] == 8'hff;
  assign _009_ = ~ operands_i[22];
  assign _010_ = ~ operands_i[54];
  assign _011_ = ~ operands_i[86];
  assign _012_ = is_boxed_i[0] && _036_;
  assign \gen_num_values[0].is_normal  = _012_ && _037_;
  assign _013_ = is_boxed_i[1] && _038_;
  assign \gen_num_values[1].is_normal  = _013_ && _039_;
  assign _014_ = is_boxed_i[2] && _040_;
  assign \gen_num_values[2].is_normal  = _014_ && _041_;
  assign \gen_num_values[0].is_zero  = _015_ && _001_;
  assign \gen_num_values[1].is_zero  = _016_ && _003_;
  assign \gen_num_values[2].is_zero  = _017_ && _005_;
  assign _015_ = is_boxed_i[0] && _000_;
  assign \gen_num_values[0].is_subnormal  = _015_ && _027_;
  assign _016_ = is_boxed_i[1] && _002_;
  assign \gen_num_values[1].is_subnormal  = _016_ && _028_;
  assign _017_ = is_boxed_i[2] && _004_;
  assign \gen_num_values[2].is_subnormal  = _017_ && _029_;
  assign _018_ = _006_ && _001_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _018_;
  assign _019_ = _007_ && _003_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _019_;
  assign _020_ = _008_ && _005_;
  assign \gen_num_values[2].is_inf  = is_boxed_i[2] && _020_;
  assign _021_ = _006_ && _042_;
  assign _022_ = _007_ && _043_;
  assign _023_ = _008_ && _044_;
  assign _024_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _024_ && _009_;
  assign _025_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _025_ && _010_;
  assign _026_ = is_boxed_i[2] && \gen_num_values[2].is_nan ;
  assign \gen_num_values[2].is_signalling  = _026_ && _011_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _033_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _034_;
  assign \gen_num_values[2].is_quiet  = \gen_num_values[2].is_nan  && _035_;
  assign _027_ = ! \gen_num_values[0].is_zero ;
  assign _028_ = ! \gen_num_values[1].is_zero ;
  assign _029_ = ! \gen_num_values[2].is_zero ;
  assign _030_ = ! is_boxed_i[0];
  assign _031_ = ! is_boxed_i[1];
  assign _032_ = ! is_boxed_i[2];
  assign _033_ = ! \gen_num_values[0].is_signalling ;
  assign _034_ = ! \gen_num_values[1].is_signalling ;
  assign _035_ = ! \gen_num_values[2].is_signalling ;
  assign \gen_num_values[0].is_nan  = _030_ || _021_;
  assign \gen_num_values[1].is_nan  = _031_ || _022_;
  assign \gen_num_values[2].is_nan  = _032_ || _023_;
  assign _036_ = | operands_i[30:23];
  assign _037_ = operands_i[30:23] != 8'hff;
  assign _038_ = | operands_i[62:55];
  assign _039_ = operands_i[62:55] != 8'hff;
  assign _040_ = | operands_i[94:87];
  assign _041_ = operands_i[94:87] != 8'hff;
  assign _042_ = | operands_i[22:0];
  assign _043_ = | operands_i[54:32];
  assign _044_ = | operands_i[86:64];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[31:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[63:32];
  assign \gen_num_values[2].is_boxed  = is_boxed_i[2];
  assign \gen_num_values[2].value  = operands_i[95:64];
  assign info_o = { \gen_num_values[2].is_normal , \gen_num_values[2].is_subnormal , \gen_num_values[2].is_zero , \gen_num_values[2].is_inf , \gen_num_values[2].is_nan , \gen_num_values[2].is_signalling , \gen_num_values[2].is_quiet , is_boxed_i[2], \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$b84a696d21c022a0088bf4ba72ca5972d8b9b5aa\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire _1_;
  wire [102:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [514:0] fmt_outputs;
  wire \gen_parallel_slices[0].active_format.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [287:0] operands_i;
  wire [287:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[0].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = ! dst_fmt_i;
  wire [4:0] _6_ = { 4'h0, fmt_in_ready[0] };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$84742d6f36b81f72c2d278e510af69e7c85b3c2f\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[0].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[1]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_parallel_slices[0].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[2:0]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .result_o(fmt_outputs[102:7]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(fmt_outputs[6:2]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$25d8924d372eee084dfc5c8d348ade21ebd4dc97\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 412'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, fmt_outputs[102:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[1];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[514:103] = 412'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
  assign result_o = arbiter_output[102:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[0];
endmodule

module \$paramod$e77a38ca16a2a9acd55e0da04797beb3bfc12c80\rr_arb_tree_DE4E6_76EE6 (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk_i;
  wire clk_i;
  input [407:0] data_i;
  wire [407:0] data_i;
  output [101:0] data_o;
  wire [101:0] data_o;
  input flush_i;
  wire flush_i;
  wire [305:0] \gen_arbiter.data_nodes ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [5:0] \gen_arbiter.index_nodes ;
  wire [3:0] \gen_arbiter.req_d ;
  wire [2:0] \gen_arbiter.req_nodes ;
  reg [1:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  output [1:0] idx_o;
  wire [1:0] idx_o;
  input [3:0] req_i;
  wire [3:0] req_i;
  output req_o;
  wire req_o;
  input [1:0] rr_i;
  wire [1:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [1:0] \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:536$471.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:536$472.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:556$469.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:556$470.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & _16_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & _17_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _03_ = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _19_;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (_04_) \gen_arbiter.rr_q  <= _00_;
  assign _04_ = | { _13_, flush_i };
  assign _05_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _06_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _10_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _11_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _13_ = gnt_i && req_o;
  assign _14_ = ~ req_i[0];
  assign _15_ = ~ req_i[2];
  assign _16_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign _17_ = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _18_ = ~ \gen_arbiter.req_nodes [1];
  assign _19_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [2] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _14_ | _01_;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = _15_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _18_ | _03_;
  assign _00_ = flush_i ? 2'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _05_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _06_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _07_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _08_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _09_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _10_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _11_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _12_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _13_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 2'hx;
  assign \gen_arbiter.data_nodes [203:102] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[203:102] : data_i[101:0];
  assign \gen_arbiter.data_nodes [305:204] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[407:306] : data_i[305:204];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [305:204] : \gen_arbiter.data_nodes [203:102];
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign \gen_arbiter.data_nodes [101:0] = data_o;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
  assign \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:536$471.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:536$472.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:556$469.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$/Users/tianshu/Desktop/Local/Codes/590/Project/composer/Composer-Hardware/.fpnew_cache/FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_yosys.v:556$470.inp  = 2'hx;
endmodule

module \$paramod$fac29a0b6f82f9be9026852c6ea7fc707c5eb427\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [102:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [514:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$25d8924d372eee084dfc5c8d348ade21ebd4dc97\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[1];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 515'h7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
  assign result_o = arbiter_output[102:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[0];
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output [30:0] abs_rounded_o;
  wire [30:0] abs_rounded_o;
  input [30:0] abs_value_i;
  wire [30:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = ! abs_value_i;
  assign exact_zero_o = _01_ && _02_;
  assign _04_ = exact_zero_o && effective_subtraction_i;
  assign _05_ = ~ sign_i;
  function [0:0] _22_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _22_ = b[0:0];
      3'b?1?:
        _22_ = b[1:1];
      3'b1??:
        _22_ = b[2:2];
      default:
        _22_ = a;
    endcase
  endfunction
  assign _00_ = _22_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _09_, _07_, _06_ });
  assign _06_ = round_sticky_bits_i == 2'h3;
  assign _07_ = round_sticky_bits_i == 2'h2;
  assign _09_ = | { _08_[1], _02_ };
  assign _02_ = ! round_sticky_bits_i;
  assign _08_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _28_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _28_ = b[0:0];
      5'b???1?:
        _28_ = b[1:1];
      5'b??1??:
        _28_ = b[2:2];
      5'b?1???:
        _28_ = b[3:3];
      5'b1????:
        _28_ = b[4:4];
      default:
        _28_ = a;
    endcase
  endfunction
  assign round_up = _28_(1'h1, { _00_, 1'h0, _15_, _16_, round_sticky_bits_i[1] }, { _10_, _13_, _03_, _12_, _11_ });
  assign _11_ = rnd_mode_i == 3'h4;
  assign _12_ = rnd_mode_i == 3'h3;
  assign _03_ = rnd_mode_i == 3'h2;
  assign _13_ = rnd_mode_i == 3'h1;
  assign _10_ = ! rnd_mode_i;
  assign _14_ = | round_sticky_bits_i;
  assign _15_ = _14_ ? sign_i : 1'h0;
  assign _16_ = _14_ ? _05_ : 1'h0;
  assign sign_o = _04_ ? _03_ : sign_i;
  assign _08_[0] = _02_;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0 (in_i, cnt_o, empty_o);
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [3:0] \gen_lzc.in_tmp ;
  wire [7:0] \gen_lzc.index_lut ;
  wire [7:0] \gen_lzc.index_nodes ;
  wire [3:0] \gen_lzc.sel_nodes ;
  input [3:0] in_i;
  wire [3:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [3:2] = in_i[0] ? 2'h0 : 2'h1;
  assign \gen_lzc.index_nodes [5:4] = in_i[2] ? 2'h2 : 2'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [3:2] : \gen_lzc.index_nodes [5:4];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd4;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign \gen_lzc.index_nodes [1:0] = cnt_o;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0 (in_i, cnt_o, empty_o);
  output [2:0] cnt_o;
  wire [2:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [4:0] \gen_lzc.in_tmp ;
  wire [14:0] \gen_lzc.index_lut ;
  wire [23:0] \gen_lzc.index_nodes ;
  wire [7:0] \gen_lzc.sel_nodes ;
  input [4:0] in_i;
  wire [4:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [3] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [4] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | in_i[4];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.index_nodes [11:9] = in_i[0] ? 3'h0 : 3'h1;
  assign \gen_lzc.index_nodes [14:12] = in_i[2] ? 3'h2 : 3'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [5:3] : \gen_lzc.index_nodes [8:6];
  assign \gen_lzc.index_nodes [5:3] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [11:9] : \gen_lzc.index_nodes [14:12];
  assign \gen_lzc.index_nodes [8:6] = in_i[4] ? 3'h4 : 3'h0;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd5;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 15'h4688;
  assign { \gen_lzc.index_nodes [20:15], \gen_lzc.index_nodes [2:0] } = { 6'h04, cnt_o };
  assign { \gen_lzc.sel_nodes [6:5], \gen_lzc.sel_nodes [2] } = { 1'h0, in_i[4], in_i[4] };
endmodule

module FPNewBlackbox_tyfloat_l3_1s_1tw_1ops(clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [287:0] operands_i;
  wire [287:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [95:0] result_o;
  wire [95:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input tag_i;
  wire tag_i;
  output tag_o;
  wire tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  \$paramod$78c4f765751976d874075cb6704428d12ae7ae78\FPNewBlackbox_tyfloat_l3_1s_1tw_1ops_21317_11D0A  inst (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(out_valid_o),
    .result_o(result_o),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(status_o),
    .tag_i(tag_i),
    .tag_o(tag_o),
    .vectorial_op_i(vectorial_op_i)
  );
endmodule
