#!/usr/bin/python3

import os
import sys
from functools import reduce
import util

help_message = """Composer AWS build mover

Usage:
composer-mv
    Run without arguments to move build within $COMPOSER_ROOT/Composer-Hardware/ to FPGA staging
composer-mv --help
    Display this help message
composer-mv --reset_cache
    Run move script but first reset AWS configuration cache
"""

if "--help" in sys.argv:
    print(help_message)
    exit(0)

config = util.get_config()

gen_root = os.environ["COMPOSER_ROOT"] + "/Composer-Hardware/vsim"
gen_src = gen_root + "/generated-src"

vivado_root = gen_root + "/build/"

# First, check that build ran correctly
reports = vivado_root + "reports"
checkpoints = vivado_root + "checkpoints/to_aws"
walk = list(os.walk(reports))[0][2]
timings = list(filter(lambda x: "SH_CL_final_timing_summary.rpt" in x, walk))
if len(timings) > 1:
    print(
        "Multiple builds found in output directory. Please choose the one you'd like to move."
    )
    for i, t in enumerate(timings):
        print(f"[{i}] {t}")
    answer = input("Select which one you'd like. [Default: newest build]\n")
    if answer == "":
        timings.sort()
        timing = timings[-1]
        print("selected " + timing)
    else:
        idx = int(answer.strip())
        if idx < 0 or idx >= len(timings):
            print("Out of range?")
            exit(1)
        timing = timings[idx]
else:
    timing = timings[0]

timing_f = reports + "/" + timing

# Now we have timing file, make sure it contains the success message
f = open(timing_f)
has_success = reduce(
    lambda x, y: x or y,
    map(lambda x: x.strip() == "All user specified timing constraints are met.",
        f.readlines()))
if not has_success:
    print("This build failed to pass timing. See specified report for details.")
    exit(2)

# Else we passed timing, and we can actually build it
name = input(
    "Beginning to build final image. Give this run a key so you can identify it on the FPGA system.\n"
).strip()
timing_prefix = timing.split(".")[0]
s3_name = f"composer-{config['username']}"
assert 0 == os.system(f"aws s3 mb s3://{s3_name} --region {config['region']}")
assert 0 == os.system(f"aws s3 mb s3://{s3_name}/logs")
assert 0 == os.system(f"aws s3 mb s3://{s3_name}/tars")
assert 0 == os.system(f"aws s3 mb s3://{s3_name}/headers")
os.system(
    f"aws s3 cp {checkpoints}/{timing_prefix}.Developer_CL.tar s3://{s3_name}/tars/{name}.tar"
)
os.system(
    f"aws s3 cp {gen_src}/composer_allocator_declaration.h s3://{s3_name}/headers/{name}.h"
)
assert 0 == os.system(
    f"aws s3 cp {gen_src}/composer_allocator_declaration.h s3://{s3_name}/{name}.h"
)

cmd = f'aws ec2 create-fpga-image --region {config["region"]} --name {name} --description "{name}" ' \
      f'--input-storage-location Bucket=composer,Key=tars/{name}.tar --logs-storage-location Bucket={s3_name},Key=logs/'
print(cmd)
assert 0 == os.system(
    f'aws ec2 create-fpga-image --region {config["region"]} --name {name}'
    f' --description "{name}" --input-storage-location Bucket={s3_name},Key=tars/{name}.tar'
    f' --logs-storage-location Bucket={s3_name},Key=logs/')

print(
    "Your AFI should be building...\n"
    "You can check its progress by running `aws ec2 describe-fpga-images --owner self`"
)
