FIRRTL version 1.1.0
circuit ComposerTop :
  module CScratchpadPackedSubwordLoader :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_block_in : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<512>, len : UInt<7>, idxBase : UInt<6>}}, sp_write_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<128>, idx : UInt<6>}}}

    reg subwordCounter_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire datCounter_value : UInt @[Counter.scala 61:73]
    datCounter_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg beat : UInt<512>, clock with :
      reset => (UInt<1>("h0"), beat) @[CScratchpadPackedSubwordLoader.scala 16:17]
    reg idxBase : UInt<6>, clock with :
      reset => (UInt<1>("h0"), idxBase) @[CScratchpadPackedSubwordLoader.scala 17:20]
    reg lenRemainingFromReq : UInt<7>, clock with :
      reset => (UInt<1>("h0"), lenRemainingFromReq) @[CScratchpadPackedSubwordLoader.scala 18:32]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 21:22]
    node _io_cache_block_in_ready_T = eq(state, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 22:36]
    io.cache_block_in.ready <= _io_cache_block_in_ready_T @[CScratchpadPackedSubwordLoader.scala 22:27]
    io.sp_write_out.bits.idx is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.bits.dat is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.valid <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 24:25]
    node _datSelection_T = bits(beat, 127, 0) @[CScratchpadPackedSubwordLoader.scala 29:9]
    wire datSelection : UInt<128>[1] @[CScratchpadPackedSubwordLoader.scala 26:29]
    datSelection[0] <= _datSelection_T @[CScratchpadPackedSubwordLoader.scala 26:29]
    node _T = eq(UInt<1>("h0"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
    when _T : @[CScratchpadPackedSubwordLoader.scala 32:17]
      node _T_1 = and(io.cache_block_in.ready, io.cache_block_in.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[CScratchpadPackedSubwordLoader.scala 34:36]
        state <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 35:15]
        beat <= io.cache_block_in.bits.dat @[CScratchpadPackedSubwordLoader.scala 36:14]
        idxBase <= io.cache_block_in.bits.idxBase @[CScratchpadPackedSubwordLoader.scala 37:17]
        lenRemainingFromReq <= io.cache_block_in.bits.len @[CScratchpadPackedSubwordLoader.scala 38:29]
        datCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
        subwordCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
      when _T_2 : @[CScratchpadPackedSubwordLoader.scala 32:17]
        io.sp_write_out.valid <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 45:29]
        io.sp_write_out.bits.dat <= datSelection[UInt<1>("h0")] @[CScratchpadPackedSubwordLoader.scala 46:32]
        io.sp_write_out.bits.idx <= idxBase @[CScratchpadPackedSubwordLoader.scala 47:32]
        node _T_3 = and(io.sp_write_out.ready, io.sp_write_out.valid) @[Decoupled.scala 51:35]
        when _T_3 : @[CScratchpadPackedSubwordLoader.scala 48:34]
          node _idxBase_T = add(idxBase, UInt<1>("h1")) @[CScratchpadPackedSubwordLoader.scala 50:28]
          node _idxBase_T_1 = tail(_idxBase_T, 1) @[CScratchpadPackedSubwordLoader.scala 50:28]
          idxBase <= _idxBase_T_1 @[CScratchpadPackedSubwordLoader.scala 50:17]
          node _T_4 = eq(datCounter_value, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 51:31]
          when _T_4 : @[CScratchpadPackedSubwordLoader.scala 51:59]
            node wrap = eq(subwordCounter_value, UInt<6>("h3f")) @[Counter.scala 73:24]
            node _value_T = add(subwordCounter_value, UInt<1>("h1")) @[Counter.scala 77:24]
            node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
            subwordCounter_value <= _value_T_1 @[Counter.scala 77:15]
            node _lenRemainingFromReq_T = sub(lenRemainingFromReq, UInt<5>("h10")) @[CScratchpadPackedSubwordLoader.scala 53:54]
            node _lenRemainingFromReq_T_1 = tail(_lenRemainingFromReq_T, 1) @[CScratchpadPackedSubwordLoader.scala 53:54]
            lenRemainingFromReq <= _lenRemainingFromReq_T_1 @[CScratchpadPackedSubwordLoader.scala 53:31]
            node _T_5 = eq(lenRemainingFromReq, UInt<5>("h10")) @[CScratchpadPackedSubwordLoader.scala 54:36]
            when _T_5 : @[CScratchpadPackedSubwordLoader.scala 54:60]
              state <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 55:19]
            node _beat_T = shr(beat, 128) @[CScratchpadPackedSubwordLoader.scala 57:24]
            beat <= _beat_T @[CScratchpadPackedSubwordLoader.scala 57:16]


  module CScratchpad :
    input clock : Clock
    input reset : Reset
    output auto : { mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output access : { flip readReq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<6>}, readRes : { valid : UInt<1>, bits : UInt<128>}, flip writeReq : { valid : UInt<1>, bits : { addr : UInt<6>, data : UInt<128>}}}
    output req : { progress : UInt<7>, flip request : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<6>, len : UInt<34>}}, flip writeback : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<6>, len : UInt<34>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    access is invalid
    req is invalid
    wire mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    mem_out is invalid @[Nodes.scala 1212:84]
    auto.mem_out <- mem_out @[LazyModule.scala 368:12]
    req.request.ready <= UInt<1>("h1") @[CScratchpad.scala 90:21]
    smem mem : UInt<128> [64] @[CScratchpad.scala 92:24]
    inst loader of CScratchpadPackedSubwordLoader @[CScratchpad.scala 94:30]
    loader.clock <= clock
    loader.reset <= reset
    reg mem_tx_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CScratchpad.scala 102:37]
    reg access_readRes_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), access_readRes_valid_REG) @[CScratchpad.scala 85:30]
    access_readRes_valid_REG <= access.readReq.valid @[CScratchpad.scala 85:30]
    access.readRes.valid <= access_readRes_valid_REG @[CScratchpad.scala 103:24]
    wire _rval_WIRE : UInt @[CScratchpad.scala 104:30]
    _rval_WIRE is invalid @[CScratchpad.scala 104:30]
    when access.readReq.valid : @[CScratchpad.scala 104:30]
      _rval_WIRE <= access.readReq.bits @[CScratchpad.scala 104:30]
      node _rval_T = or(_rval_WIRE, UInt<6>("h0")) @[CScratchpad.scala 104:30]
      node _rval_T_1 = bits(_rval_T, 5, 0) @[CScratchpad.scala 104:30]
      read mport rval = mem[_rval_T_1], clock @[CScratchpad.scala 104:30]
    access.readRes.bits <= rval @[CScratchpad.scala 105:23]
    node _req_request_ready_T = eq(mem_tx_state, UInt<2>("h0")) @[CScratchpad.scala 108:37]
    req.request.ready <= _req_request_ready_T @[CScratchpad.scala 108:21]
    wire _reqIdleBits_WIRE : UInt<1>[16] @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[0] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[1] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[2] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[3] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[4] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[5] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[6] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[7] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[8] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[9] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[10] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[11] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[12] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[13] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[14] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[15] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    reg reqIdleBits : UInt<1>[16], clock with :
      reset => (reset, _reqIdleBits_WIRE) @[CScratchpad.scala 110:36]
    node _reqAvailable_T = or(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_1 = or(_reqAvailable_T, reqIdleBits[2]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_2 = or(_reqAvailable_T_1, reqIdleBits[3]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_3 = or(_reqAvailable_T_2, reqIdleBits[4]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_4 = or(_reqAvailable_T_3, reqIdleBits[5]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_5 = or(_reqAvailable_T_4, reqIdleBits[6]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_6 = or(_reqAvailable_T_5, reqIdleBits[7]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_7 = or(_reqAvailable_T_6, reqIdleBits[8]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_8 = or(_reqAvailable_T_7, reqIdleBits[9]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_9 = or(_reqAvailable_T_8, reqIdleBits[10]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_10 = or(_reqAvailable_T_9, reqIdleBits[11]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_11 = or(_reqAvailable_T_10, reqIdleBits[12]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_12 = or(_reqAvailable_T_11, reqIdleBits[13]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_13 = or(_reqAvailable_T_12, reqIdleBits[14]) @[CScratchpad.scala 111:51]
    node reqAvailable = or(_reqAvailable_T_13, reqIdleBits[15]) @[CScratchpad.scala 111:51]
    node _reqChosen_T = mux(reqIdleBits[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _reqChosen_T_1 = mux(reqIdleBits[13], UInt<4>("hd"), _reqChosen_T) @[Mux.scala 47:70]
    node _reqChosen_T_2 = mux(reqIdleBits[12], UInt<4>("hc"), _reqChosen_T_1) @[Mux.scala 47:70]
    node _reqChosen_T_3 = mux(reqIdleBits[11], UInt<4>("hb"), _reqChosen_T_2) @[Mux.scala 47:70]
    node _reqChosen_T_4 = mux(reqIdleBits[10], UInt<4>("ha"), _reqChosen_T_3) @[Mux.scala 47:70]
    node _reqChosen_T_5 = mux(reqIdleBits[9], UInt<4>("h9"), _reqChosen_T_4) @[Mux.scala 47:70]
    node _reqChosen_T_6 = mux(reqIdleBits[8], UInt<4>("h8"), _reqChosen_T_5) @[Mux.scala 47:70]
    node _reqChosen_T_7 = mux(reqIdleBits[7], UInt<3>("h7"), _reqChosen_T_6) @[Mux.scala 47:70]
    node _reqChosen_T_8 = mux(reqIdleBits[6], UInt<3>("h6"), _reqChosen_T_7) @[Mux.scala 47:70]
    node _reqChosen_T_9 = mux(reqIdleBits[5], UInt<3>("h5"), _reqChosen_T_8) @[Mux.scala 47:70]
    node _reqChosen_T_10 = mux(reqIdleBits[4], UInt<3>("h4"), _reqChosen_T_9) @[Mux.scala 47:70]
    node _reqChosen_T_11 = mux(reqIdleBits[3], UInt<2>("h3"), _reqChosen_T_10) @[Mux.scala 47:70]
    node _reqChosen_T_12 = mux(reqIdleBits[2], UInt<2>("h2"), _reqChosen_T_11) @[Mux.scala 47:70]
    node _reqChosen_T_13 = mux(reqIdleBits[1], UInt<1>("h1"), _reqChosen_T_12) @[Mux.scala 47:70]
    node reqChosen = mux(reqIdleBits[0], UInt<1>("h0"), _reqChosen_T_13) @[Mux.scala 47:70]
    reg req_cache : { scratchpadAddress : UInt<6>, memoryLength : UInt<16>}[16], clock with :
      reset => (UInt<1>("h0"), req_cache) @[CScratchpad.scala 114:30]
    node _T = sub(req.request.bits.len, UInt<1>("h1")) @[CScratchpad.scala 119:76]
    node _T_1 = tail(_T, 1) @[CScratchpad.scala 119:76]
    node _T_2 = and(req.request.bits.len, _T_1) @[CScratchpad.scala 119:52]
    node _T_3 = neq(_T_2, UInt<1>("h0")) @[CScratchpad.scala 119:84]
    node _T_4 = and(req.request.valid, _T_3) @[CScratchpad.scala 119:26]
    when _T_4 : @[CScratchpad.scala 119:94]
      node _T_5 = asUInt(reset) @[CScratchpad.scala 120:11]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[CScratchpad.scala 120:11]
      when _T_6 : @[CScratchpad.scala 120:11]
        printf(clock, UInt<1>("h1"), "Len is not pow2: %d\n", req.request.bits.len) : printf @[CScratchpad.scala 120:11]
      node _T_7 = asUInt(reset) @[CScratchpad.scala 121:11]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[CScratchpad.scala 121:11]
      when _T_8 : @[CScratchpad.scala 121:11]
        node _T_9 = eq(UInt<1>("h0"), UInt<1>("h0")) @[CScratchpad.scala 121:11]
        when _T_9 : @[CScratchpad.scala 121:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at CScratchpad.scala:121 assert(false.B)\n") : printf_1 @[CScratchpad.scala 121:11]
        assert(clock, UInt<1>("h0"), UInt<1>("h1"), "") : assert @[CScratchpad.scala 121:11]
    reg totalTx : { memoryAddress : UInt<34>, scratchpadAddress : UInt<6>, memoryLength : UInt<34>}, clock with :
      reset => (UInt<1>("h0"), totalTx) @[CScratchpad.scala 124:28]
    wire txEmitLengthLg : UInt<4> @[CScratchpad.scala 130:36]
    txEmitLengthLg <= UInt<1>("h0") @[CScratchpad.scala 131:18]
    node _x1_a_bits_legal_T = leq(UInt<1>("h0"), txEmitLengthLg) @[Parameters.scala 92:32]
    node _x1_a_bits_legal_T_1 = leq(txEmitLengthLg, UInt<3>("h6")) @[Parameters.scala 92:42]
    node _x1_a_bits_legal_T_2 = and(_x1_a_bits_legal_T, _x1_a_bits_legal_T_1) @[Parameters.scala 92:37]
    node _x1_a_bits_legal_T_3 = or(UInt<1>("h0"), _x1_a_bits_legal_T_2) @[Parameters.scala 670:31]
    node _x1_a_bits_legal_T_4 = xor(totalTx.memoryAddress, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _x1_a_bits_legal_T_5 = cvt(_x1_a_bits_legal_T_4) @[Parameters.scala 137:45]
    node _x1_a_bits_legal_T_6 = and(_x1_a_bits_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_7 = asSInt(_x1_a_bits_legal_T_6) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_8 = eq(_x1_a_bits_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _x1_a_bits_legal_T_9 = and(_x1_a_bits_legal_T_3, _x1_a_bits_legal_T_8) @[Parameters.scala 670:56]
    node x1_a_bits_legal = or(UInt<1>("h0"), _x1_a_bits_legal_T_9) @[Parameters.scala 672:30]
    wire x1_a_bits_a : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 447:17]
    x1_a_bits_a is invalid @[Edges.scala 447:17]
    x1_a_bits_a.opcode <= UInt<3>("h4") @[Edges.scala 448:15]
    x1_a_bits_a.param <= UInt<1>("h0") @[Edges.scala 449:15]
    x1_a_bits_a.size <= txEmitLengthLg @[Edges.scala 450:15]
    x1_a_bits_a.source <= reqChosen @[Edges.scala 451:15]
    x1_a_bits_a.address <= totalTx.memoryAddress @[Edges.scala 452:15]
    node _x1_a_bits_a_mask_sizeOH_T = or(txEmitLengthLg, UInt<6>("h0")) @[Misc.scala 201:34]
    node x1_a_bits_a_mask_sizeOH_shiftAmount = bits(_x1_a_bits_a_mask_sizeOH_T, 2, 0) @[OneHot.scala 63:49]
    node _x1_a_bits_a_mask_sizeOH_T_1 = dshl(UInt<1>("h1"), x1_a_bits_a_mask_sizeOH_shiftAmount) @[OneHot.scala 64:12]
    node _x1_a_bits_a_mask_sizeOH_T_2 = bits(_x1_a_bits_a_mask_sizeOH_T_1, 5, 0) @[OneHot.scala 64:27]
    node x1_a_bits_a_mask_sizeOH = or(_x1_a_bits_a_mask_sizeOH_T_2, UInt<1>("h1")) @[Misc.scala 201:81]
    node _x1_a_bits_a_mask_T = geq(txEmitLengthLg, UInt<3>("h6")) @[Misc.scala 205:21]
    node x1_a_bits_a_mask_size = bits(x1_a_bits_a_mask_sizeOH, 5, 5) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit = bits(totalTx.memoryAddress, 5, 5) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit = eq(x1_a_bits_a_mask_bit, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq = and(UInt<1>("h1"), x1_a_bits_a_mask_nbit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_1 = and(UInt<1>("h1"), x1_a_bits_a_mask_bit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_1 = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq_1) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_1 = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T_1) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_1 = bits(x1_a_bits_a_mask_sizeOH, 4, 4) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_1 = bits(totalTx.memoryAddress, 4, 4) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_1 = eq(x1_a_bits_a_mask_bit_1, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_2 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_2 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_2) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_2 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_2) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_3 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_3 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_3) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_3 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_3) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_4 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_4 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_4) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_4 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_4) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_5 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_5 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_5) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_5 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_5) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_2 = bits(x1_a_bits_a_mask_sizeOH, 3, 3) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_2 = bits(totalTx.memoryAddress, 3, 3) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_2 = eq(x1_a_bits_a_mask_bit_2, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_6 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_6 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_6) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_6 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_6) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_7 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_7 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_7) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_7 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_7) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_8 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_8 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_8) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_8 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_8) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_9 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_9 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_9) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_9 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_9) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_10 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_10 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_10) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_10 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_10) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_11 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_11 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_11) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_11 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_11) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_12 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_12 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_12) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_12 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_12) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_13 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_13 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_13) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_13 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_13) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_3 = bits(x1_a_bits_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_3 = bits(totalTx.memoryAddress, 2, 2) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_3 = eq(x1_a_bits_a_mask_bit_3, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_14 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_14 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_14) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_14 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_14) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_15 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_15 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_15) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_15 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_15) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_16 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_16 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_16) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_16 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_16) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_17 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_17 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_17) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_17 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_17) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_18 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_18 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_18) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_18 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_18) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_19 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_19 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_19) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_19 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_19) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_20 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_20 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_20) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_20 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_20) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_21 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_21 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_21) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_21 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_21) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_22 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_22 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_22) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_22 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_22) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_23 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_23 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_23) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_23 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_23) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_24 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_24 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_24) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_24 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_24) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_25 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_25 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_25) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_25 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_25) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_26 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_26 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_26) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_26 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_26) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_27 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_27 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_27) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_27 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_27) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_28 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_28 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_28) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_28 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_28) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_29 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_29 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_29) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_29 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_29) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_4 = bits(x1_a_bits_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_4 = bits(totalTx.memoryAddress, 1, 1) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_4 = eq(x1_a_bits_a_mask_bit_4, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_30 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_30 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_30) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_30 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_30) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_31 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_31 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_31) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_31 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_31) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_32 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_32 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_32) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_32 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_32) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_33 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_33 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_33) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_33 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_33) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_34 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_34 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_34) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_34 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_34) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_35 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_35 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_35) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_35 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_35) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_36 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_36 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_36) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_36 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_36) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_37 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_37 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_37) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_37 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_37) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_38 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_38 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_38) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_38 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_38) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_39 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_39 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_39) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_39 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_39) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_40 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_40 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_40) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_40 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_40) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_41 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_41 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_41) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_41 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_41) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_42 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_42 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_42) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_42 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_42) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_43 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_43 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_43) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_43 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_43) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_44 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_44 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_44) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_44 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_44) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_45 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_45 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_45) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_45 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_45) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_46 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_46 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_46) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_46 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_46) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_47 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_47 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_47) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_47 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_47) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_48 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_48 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_48) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_48 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_48) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_49 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_49 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_49) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_49 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_49) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_50 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_50 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_50) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_50 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_50) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_51 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_51 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_51) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_51 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_51) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_52 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_52 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_52) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_52 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_52) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_53 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_53 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_53) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_53 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_53) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_54 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_54 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_54) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_54 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_54) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_55 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_55 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_55) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_55 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_55) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_56 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_56 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_56) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_56 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_56) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_57 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_57 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_57) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_57 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_57) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_58 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_58 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_58) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_58 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_58) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_59 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_59 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_59) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_59 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_59) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_60 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_60 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_60) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_60 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_60) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_61 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_61 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_61) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_61 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_61) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_5 = bits(x1_a_bits_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_5 = bits(totalTx.memoryAddress, 0, 0) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_5 = eq(x1_a_bits_a_mask_bit_5, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_62 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_62 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_62) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_62 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_62) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_63 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_63 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_63) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_63 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_63) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_64 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_64 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_64) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_64 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_64) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_65 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_65 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_65) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_65 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_65) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_66 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_66 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_66) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_66 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_66) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_67 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_67 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_67) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_67 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_67) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_68 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_68 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_68) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_68 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_68) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_69 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_69 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_69) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_69 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_69) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_70 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_70 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_70) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_70 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_70) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_71 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_71 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_71) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_71 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_71) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_72 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_72 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_72) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_72 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_72) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_73 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_73 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_73) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_73 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_73) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_74 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_74 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_74) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_74 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_74) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_75 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_75 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_75) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_75 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_75) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_76 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_76 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_76) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_76 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_76) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_77 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_77 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_77) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_77 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_77) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_78 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_78 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_78) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_78 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_78) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_79 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_79 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_79) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_79 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_79) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_80 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_80 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_80) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_80 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_80) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_81 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_81 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_81) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_81 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_81) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_82 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_82 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_82) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_82 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_82) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_83 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_83 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_83) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_83 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_83) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_84 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_84 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_84) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_84 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_84) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_85 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_85 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_85) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_85 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_85) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_86 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_86 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_86) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_86 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_86) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_87 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_87 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_87) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_87 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_87) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_88 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_88 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_88) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_88 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_88) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_89 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_89 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_89) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_89 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_89) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_90 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_90 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_90) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_90 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_90) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_91 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_91 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_91) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_91 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_91) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_92 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_92 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_92) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_92 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_92) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_93 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_93 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_93) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_93 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_93) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_94 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_94 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_94) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_94 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_94) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_95 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_95 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_95) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_95 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_95) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_96 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_96 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_96) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_96 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_96) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_97 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_97 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_97) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_97 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_97) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_98 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_98 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_98) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_98 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_98) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_99 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_99 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_99) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_99 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_99) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_100 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_100 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_100) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_100 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_100) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_101 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_101 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_101) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_101 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_101) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_102 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_102 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_102) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_102 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_102) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_103 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_103 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_103) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_103 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_103) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_104 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_104 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_104) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_104 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_104) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_105 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_105 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_105) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_105 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_105) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_106 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_106 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_106) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_106 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_106) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_107 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_107 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_107) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_107 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_107) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_108 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_108 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_108) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_108 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_108) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_109 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_109 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_109) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_109 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_109) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_110 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_110 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_110) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_110 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_110) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_111 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_111 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_111) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_111 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_111) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_112 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_112 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_112) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_112 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_112) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_113 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_113 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_113) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_113 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_113) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_114 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_114 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_114) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_114 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_114) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_115 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_115 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_115) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_115 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_115) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_116 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_116 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_116) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_116 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_116) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_117 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_117 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_117) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_117 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_117) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_118 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_118 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_118) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_118 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_118) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_119 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_119 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_119) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_119 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_119) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_120 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_120 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_120) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_120 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_120) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_121 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_121 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_121) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_121 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_121) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_122 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_122 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_122) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_122 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_122) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_123 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_123 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_123) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_123 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_123) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_124 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_124 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_124) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_124 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_124) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_125 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_125 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_125) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_125 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_125) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_lo_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_63, x1_a_bits_a_mask_acc_62) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_65, x1_a_bits_a_mask_acc_64) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_67, x1_a_bits_a_mask_acc_66) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_69, x1_a_bits_a_mask_acc_68) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_71, x1_a_bits_a_mask_acc_70) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_73, x1_a_bits_a_mask_acc_72) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo = cat(x1_a_bits_a_mask_lo_lo_hi_lo_hi, x1_a_bits_a_mask_lo_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_75, x1_a_bits_a_mask_acc_74) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_77, x1_a_bits_a_mask_acc_76) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi_hi, x1_a_bits_a_mask_lo_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo = cat(x1_a_bits_a_mask_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_79, x1_a_bits_a_mask_acc_78) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_81, x1_a_bits_a_mask_acc_80) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo = cat(x1_a_bits_a_mask_lo_hi_lo_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_83, x1_a_bits_a_mask_acc_82) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_85, x1_a_bits_a_mask_acc_84) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi = cat(x1_a_bits_a_mask_lo_hi_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo = cat(x1_a_bits_a_mask_lo_hi_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_87, x1_a_bits_a_mask_acc_86) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_89, x1_a_bits_a_mask_acc_88) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo = cat(x1_a_bits_a_mask_lo_hi_hi_lo_hi, x1_a_bits_a_mask_lo_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_91, x1_a_bits_a_mask_acc_90) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_93, x1_a_bits_a_mask_acc_92) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi = cat(x1_a_bits_a_mask_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo = cat(x1_a_bits_a_mask_lo_hi, x1_a_bits_a_mask_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_95, x1_a_bits_a_mask_acc_94) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_97, x1_a_bits_a_mask_acc_96) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_99, x1_a_bits_a_mask_acc_98) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_101, x1_a_bits_a_mask_acc_100) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi = cat(x1_a_bits_a_mask_hi_lo_lo_hi_hi, x1_a_bits_a_mask_hi_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_103, x1_a_bits_a_mask_acc_102) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_105, x1_a_bits_a_mask_acc_104) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi_lo_hi, x1_a_bits_a_mask_hi_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_107, x1_a_bits_a_mask_acc_106) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_109, x1_a_bits_a_mask_acc_108) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi_hi, x1_a_bits_a_mask_hi_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi, x1_a_bits_a_mask_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi, x1_a_bits_a_mask_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_111, x1_a_bits_a_mask_acc_110) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_113, x1_a_bits_a_mask_acc_112) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo = cat(x1_a_bits_a_mask_hi_hi_lo_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_115, x1_a_bits_a_mask_acc_114) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_117, x1_a_bits_a_mask_acc_116) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi = cat(x1_a_bits_a_mask_hi_hi_lo_hi_hi, x1_a_bits_a_mask_hi_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_119, x1_a_bits_a_mask_acc_118) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_121, x1_a_bits_a_mask_acc_120) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_123, x1_a_bits_a_mask_acc_122) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_125, x1_a_bits_a_mask_acc_124) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi, x1_a_bits_a_mask_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi = cat(x1_a_bits_a_mask_hi_hi, x1_a_bits_a_mask_hi_lo) @[Cat.scala 33:92]
    node _x1_a_bits_a_mask_T_1 = cat(x1_a_bits_a_mask_hi, x1_a_bits_a_mask_lo) @[Cat.scala 33:92]
    x1_a_bits_a.mask <= _x1_a_bits_a_mask_T_1 @[Edges.scala 453:15]
    x1_a_bits_a.data <= UInt<1>("h0") @[Edges.scala 454:15]
    x1_a_bits_a.corrupt <= UInt<1>("h0") @[Edges.scala 455:15]
    mem_out.a.bits <= x1_a_bits_a @[CScratchpad.scala 132:18]
    node _x1_a_valid_T = eq(mem_tx_state, UInt<2>("h1")) @[CScratchpad.scala 136:35]
    mem_out.a.valid <= _x1_a_valid_T @[CScratchpad.scala 136:19]
    node _T_10 = eq(UInt<2>("h0"), mem_tx_state) @[CScratchpad.scala 138:24]
    when _T_10 : @[CScratchpad.scala 138:24]
      node _T_11 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
      when _T_11 : @[CScratchpad.scala 140:30]
        totalTx.memoryLength <= req.request.bits.len @[CScratchpad.scala 141:30]
        totalTx.scratchpadAddress <= req.request.bits.scAddr @[CScratchpad.scala 142:35]
        totalTx.memoryAddress <= req.request.bits.memAddr @[CScratchpad.scala 143:31]
        mem_tx_state <= UInt<2>("h1") @[CScratchpad.scala 144:22]
    else :
      node _T_12 = eq(UInt<2>("h1"), mem_tx_state) @[CScratchpad.scala 138:24]
      when _T_12 : @[CScratchpad.scala 138:24]
        node isBelowLimit = leq(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 149:47]
        node txEmitLengthLg_hi = bits(totalTx.memoryLength, 33, 32) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo = bits(totalTx.memoryLength, 31, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T = orr(txEmitLengthLg_hi) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_1 = or(txEmitLengthLg_hi, txEmitLengthLg_lo) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_1 = bits(_txEmitLengthLg_T_1, 31, 16) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_1 = bits(_txEmitLengthLg_T_1, 15, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_2 = orr(txEmitLengthLg_hi_1) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_3 = or(txEmitLengthLg_hi_1, txEmitLengthLg_lo_1) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_2 = bits(_txEmitLengthLg_T_3, 15, 8) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_2 = bits(_txEmitLengthLg_T_3, 7, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_4 = orr(txEmitLengthLg_hi_2) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_5 = or(txEmitLengthLg_hi_2, txEmitLengthLg_lo_2) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_3 = bits(_txEmitLengthLg_T_5, 7, 4) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_3 = bits(_txEmitLengthLg_T_5, 3, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_6 = orr(txEmitLengthLg_hi_3) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_7 = or(txEmitLengthLg_hi_3, txEmitLengthLg_lo_3) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_4 = bits(_txEmitLengthLg_T_7, 3, 2) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_4 = bits(_txEmitLengthLg_T_7, 1, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_8 = orr(txEmitLengthLg_hi_4) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_9 = or(txEmitLengthLg_hi_4, txEmitLengthLg_lo_4) @[OneHot.scala 32:28]
        node _txEmitLengthLg_T_10 = bits(_txEmitLengthLg_T_9, 1, 1) @[CircuitMath.scala 28:8]
        node _txEmitLengthLg_T_11 = cat(_txEmitLengthLg_T_8, _txEmitLengthLg_T_10) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_12 = cat(_txEmitLengthLg_T_6, _txEmitLengthLg_T_11) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_13 = cat(_txEmitLengthLg_T_4, _txEmitLengthLg_T_12) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_14 = cat(_txEmitLengthLg_T_2, _txEmitLengthLg_T_13) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_15 = cat(_txEmitLengthLg_T, _txEmitLengthLg_T_14) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_16 = mux(isBelowLimit, _txEmitLengthLg_T_15, UInt<3>("h6")) @[CScratchpad.scala 150:28]
        txEmitLengthLg <= _txEmitLengthLg_T_16 @[CScratchpad.scala 150:22]
        mem_out.a.valid <= reqAvailable @[CScratchpad.scala 151:23]
        node _T_13 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
        when _T_13 : @[CScratchpad.scala 152:28]
          reqIdleBits[reqChosen] <= UInt<1>("h0") @[CScratchpad.scala 153:32]
          req_cache[reqChosen].scratchpadAddress <= totalTx.scratchpadAddress @[CScratchpad.scala 154:48]
          node _req_cache_memoryLength_T = mux(isBelowLimit, totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 155:49]
          req_cache[reqChosen].memoryLength <= _req_cache_memoryLength_T @[CScratchpad.scala 155:43]
          node _totalTx_memoryLength_T = sub(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 156:54]
          node _totalTx_memoryLength_T_1 = tail(_totalTx_memoryLength_T, 1) @[CScratchpad.scala 156:54]
          totalTx.memoryLength <= _totalTx_memoryLength_T_1 @[CScratchpad.scala 156:30]
          node _totalTx_scratchpadAddress_T = add(totalTx.scratchpadAddress, UInt<3>("h4")) @[CScratchpad.scala 157:64]
          node _totalTx_scratchpadAddress_T_1 = tail(_totalTx_scratchpadAddress_T, 1) @[CScratchpad.scala 157:64]
          totalTx.scratchpadAddress <= _totalTx_scratchpadAddress_T_1 @[CScratchpad.scala 157:35]
          node _totalTx_memoryAddress_T = add(totalTx.memoryAddress, UInt<7>("h40")) @[CScratchpad.scala 158:56]
          node _totalTx_memoryAddress_T_1 = tail(_totalTx_memoryAddress_T, 1) @[CScratchpad.scala 158:56]
          totalTx.memoryAddress <= _totalTx_memoryAddress_T_1 @[CScratchpad.scala 158:31]
          when isBelowLimit : @[CScratchpad.scala 159:28]
            mem_tx_state <= UInt<2>("h2") @[CScratchpad.scala 160:24]
      else :
        node _T_14 = eq(UInt<2>("h2"), mem_tx_state) @[CScratchpad.scala 138:24]
        when _T_14 : @[CScratchpad.scala 138:24]
          node _T_15 = and(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 166:33]
          node _T_16 = and(_T_15, reqIdleBits[2]) @[CScratchpad.scala 166:33]
          node _T_17 = and(_T_16, reqIdleBits[3]) @[CScratchpad.scala 166:33]
          node _T_18 = and(_T_17, reqIdleBits[4]) @[CScratchpad.scala 166:33]
          node _T_19 = and(_T_18, reqIdleBits[5]) @[CScratchpad.scala 166:33]
          node _T_20 = and(_T_19, reqIdleBits[6]) @[CScratchpad.scala 166:33]
          node _T_21 = and(_T_20, reqIdleBits[7]) @[CScratchpad.scala 166:33]
          node _T_22 = and(_T_21, reqIdleBits[8]) @[CScratchpad.scala 166:33]
          node _T_23 = and(_T_22, reqIdleBits[9]) @[CScratchpad.scala 166:33]
          node _T_24 = and(_T_23, reqIdleBits[10]) @[CScratchpad.scala 166:33]
          node _T_25 = and(_T_24, reqIdleBits[11]) @[CScratchpad.scala 166:33]
          node _T_26 = and(_T_25, reqIdleBits[12]) @[CScratchpad.scala 166:33]
          node _T_27 = and(_T_26, reqIdleBits[13]) @[CScratchpad.scala 166:33]
          node _T_28 = and(_T_27, reqIdleBits[14]) @[CScratchpad.scala 166:33]
          node _T_29 = and(_T_28, reqIdleBits[15]) @[CScratchpad.scala 166:33]
          when _T_29 : @[CScratchpad.scala 166:40]
            mem_tx_state <= UInt<2>("h0") @[CScratchpad.scala 167:22]
    loader.io.cache_block_in.valid <= mem_out.d.valid @[CScratchpad.scala 171:34]
    loader.io.cache_block_in.bits.dat <= mem_out.d.bits.data @[CScratchpad.scala 172:37]
    node _T_30 = geq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 174:40]
    when _T_30 : @[CScratchpad.scala 174:55]
      loader.io.cache_block_in.bits.len <= UInt<7>("h40") @[CScratchpad.scala 175:39]
    else :
      loader.io.cache_block_in.bits.len <= req_cache[mem_out.d.bits.source].memoryLength @[CScratchpad.scala 177:39]
    loader.io.cache_block_in.bits.idxBase <= req_cache[mem_out.d.bits.source].scratchpadAddress @[CScratchpad.scala 179:41]
    mem_out.d.ready <= loader.io.cache_block_in.ready @[CScratchpad.scala 180:19]
    loader.io.sp_write_out.ready <= UInt<1>("h1") @[CScratchpad.scala 181:32]
    node _T_31 = and(loader.io.cache_block_in.ready, loader.io.cache_block_in.valid) @[Decoupled.scala 51:35]
    when _T_31 : @[CScratchpad.scala 182:39]
      node _req_cache_scratchpadAddress_T = add(req_cache[mem_out.d.bits.source].scratchpadAddress, UInt<3>("h4")) @[CScratchpad.scala 183:82]
      node _req_cache_scratchpadAddress_T_1 = tail(_req_cache_scratchpadAddress_T, 1) @[CScratchpad.scala 183:82]
      req_cache[mem_out.d.bits.source].scratchpadAddress <= _req_cache_scratchpadAddress_T_1 @[CScratchpad.scala 183:42]
    reg progressReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[CScratchpad.scala 187:28]
    reg perSourceProgress : UInt<7>[16], clock with :
      reset => (UInt<1>("h0"), perSourceProgress) @[CScratchpad.scala 188:30]
    reg loadersActive : UInt<1>[16], clock with :
      reset => (UInt<1>("h0"), loadersActive) @[CScratchpad.scala 189:26]
    node _T_32 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_32 : @[CScratchpad.scala 190:27]
      loadersActive[0] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[1] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[2] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[3] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[4] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[5] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[6] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[7] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[8] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[9] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[10] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[11] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[12] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[13] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[14] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[15] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
    node _T_33 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
    when _T_33 : @[CScratchpad.scala 193:25]
      loadersActive[reqChosen] <= UInt<1>("h1") @[CScratchpad.scala 194:30]
      perSourceProgress[reqChosen] <= totalTx.scratchpadAddress @[CScratchpad.scala 195:34]
    reg loaderSource : UInt<4>, clock with :
      reset => (UInt<1>("h0"), loaderSource) @[CScratchpad.scala 197:25]
    node _lowestActive_T = mux(loadersActive[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _lowestActive_T_1 = mux(loadersActive[13], UInt<4>("hd"), _lowestActive_T) @[Mux.scala 47:70]
    node _lowestActive_T_2 = mux(loadersActive[12], UInt<4>("hc"), _lowestActive_T_1) @[Mux.scala 47:70]
    node _lowestActive_T_3 = mux(loadersActive[11], UInt<4>("hb"), _lowestActive_T_2) @[Mux.scala 47:70]
    node _lowestActive_T_4 = mux(loadersActive[10], UInt<4>("ha"), _lowestActive_T_3) @[Mux.scala 47:70]
    node _lowestActive_T_5 = mux(loadersActive[9], UInt<4>("h9"), _lowestActive_T_4) @[Mux.scala 47:70]
    node _lowestActive_T_6 = mux(loadersActive[8], UInt<4>("h8"), _lowestActive_T_5) @[Mux.scala 47:70]
    node _lowestActive_T_7 = mux(loadersActive[7], UInt<3>("h7"), _lowestActive_T_6) @[Mux.scala 47:70]
    node _lowestActive_T_8 = mux(loadersActive[6], UInt<3>("h6"), _lowestActive_T_7) @[Mux.scala 47:70]
    node _lowestActive_T_9 = mux(loadersActive[5], UInt<3>("h5"), _lowestActive_T_8) @[Mux.scala 47:70]
    node _lowestActive_T_10 = mux(loadersActive[4], UInt<3>("h4"), _lowestActive_T_9) @[Mux.scala 47:70]
    node _lowestActive_T_11 = mux(loadersActive[3], UInt<2>("h3"), _lowestActive_T_10) @[Mux.scala 47:70]
    node _lowestActive_T_12 = mux(loadersActive[2], UInt<2>("h2"), _lowestActive_T_11) @[Mux.scala 47:70]
    node _lowestActive_T_13 = mux(loadersActive[1], UInt<1>("h1"), _lowestActive_T_12) @[Mux.scala 47:70]
    node lowestActive = mux(loadersActive[0], UInt<1>("h0"), _lowestActive_T_13) @[Mux.scala 47:70]
    node _haveActive_T = or(loadersActive[0], loadersActive[1]) @[CScratchpad.scala 199:43]
    node _haveActive_T_1 = or(_haveActive_T, loadersActive[2]) @[CScratchpad.scala 199:43]
    node _haveActive_T_2 = or(_haveActive_T_1, loadersActive[3]) @[CScratchpad.scala 199:43]
    node _haveActive_T_3 = or(_haveActive_T_2, loadersActive[4]) @[CScratchpad.scala 199:43]
    node _haveActive_T_4 = or(_haveActive_T_3, loadersActive[5]) @[CScratchpad.scala 199:43]
    node _haveActive_T_5 = or(_haveActive_T_4, loadersActive[6]) @[CScratchpad.scala 199:43]
    node _haveActive_T_6 = or(_haveActive_T_5, loadersActive[7]) @[CScratchpad.scala 199:43]
    node _haveActive_T_7 = or(_haveActive_T_6, loadersActive[8]) @[CScratchpad.scala 199:43]
    node _haveActive_T_8 = or(_haveActive_T_7, loadersActive[9]) @[CScratchpad.scala 199:43]
    node _haveActive_T_9 = or(_haveActive_T_8, loadersActive[10]) @[CScratchpad.scala 199:43]
    node _haveActive_T_10 = or(_haveActive_T_9, loadersActive[11]) @[CScratchpad.scala 199:43]
    node _haveActive_T_11 = or(_haveActive_T_10, loadersActive[12]) @[CScratchpad.scala 199:43]
    node _haveActive_T_12 = or(_haveActive_T_11, loadersActive[13]) @[CScratchpad.scala 199:43]
    node _haveActive_T_13 = or(_haveActive_T_12, loadersActive[14]) @[CScratchpad.scala 199:43]
    node _haveActive_T_14 = or(_haveActive_T_13, loadersActive[15]) @[CScratchpad.scala 199:43]
    node _haveActive_T_15 = eq(loader.io.cache_block_in.ready, UInt<1>("h0")) @[CScratchpad.scala 199:52]
    node haveActive = or(_haveActive_T_14, _haveActive_T_15) @[CScratchpad.scala 199:49]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[CScratchpad.scala 201:51]
    REG <= loader.io.cache_block_in.ready @[CScratchpad.scala 201:51]
    node _T_34 = eq(REG, UInt<1>("h0")) @[CScratchpad.scala 201:43]
    node _T_35 = and(loader.io.cache_block_in.ready, _T_34) @[CScratchpad.scala 201:40]
    when _T_35 : @[CScratchpad.scala 201:85]
      node _loadersActive_T = eq(reqIdleBits[loaderSource], UInt<1>("h0")) @[CScratchpad.scala 202:36]
      loadersActive[loaderSource] <= _loadersActive_T @[CScratchpad.scala 202:33]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[CScratchpad.scala 205:16]
    REG_1 <= haveActive @[CScratchpad.scala 205:16]
    when REG_1 : @[CScratchpad.scala 205:30]
      reg progressReg_REG : UInt, clock with :
        reset => (UInt<1>("h0"), progressReg_REG) @[CScratchpad.scala 206:45]
      progressReg_REG <= lowestActive @[CScratchpad.scala 206:45]
      node _progressReg_T = or(progressReg_REG, UInt<4>("h0"))
      node _progressReg_T_1 = bits(_progressReg_T, 3, 0)
      progressReg <= perSourceProgress[_progressReg_T_1] @[CScratchpad.scala 206:17]
    node _T_36 = and(mem_out.d.ready, mem_out.d.valid) @[Decoupled.scala 51:35]
    when _T_36 : @[CScratchpad.scala 209:24]
      node _req_cache_memoryLength_T_1 = sub(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 210:72]
      node _req_cache_memoryLength_T_2 = tail(_req_cache_memoryLength_T_1, 1) @[CScratchpad.scala 210:72]
      req_cache[mem_out.d.bits.source].memoryLength <= _req_cache_memoryLength_T_2 @[CScratchpad.scala 210:37]
      loaderSource <= mem_out.d.bits.source @[CScratchpad.scala 211:18]
      node _T_37 = leq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 212:42]
      when _T_37 : @[CScratchpad.scala 212:57]
        reqIdleBits[mem_out.d.bits.source] <= UInt<1>("h1") @[CScratchpad.scala 213:28]
    req.progress <= progressReg @[CScratchpad.scala 216:16]
    when loader.io.sp_write_out.valid : @[CScratchpad.scala 217:38]
      write mport MPORT = mem[loader.io.sp_write_out.bits.idx], clock
      MPORT <= loader.io.sp_write_out.bits.dat
      node _perSourceProgress_T = add(loader.io.sp_write_out.bits.idx, UInt<1>("h1")) @[CScratchpad.scala 219:72]
      perSourceProgress[loaderSource] <= _perSourceProgress_T @[CScratchpad.scala 219:37]
    node _T_38 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_38 : @[CScratchpad.scala 222:26]
      progressReg <= UInt<1>("h0") @[CScratchpad.scala 223:17]
      perSourceProgress[0] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[1] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[2] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[3] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[4] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[5] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[6] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[7] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[8] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[9] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[10] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[11] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[12] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[13] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[14] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[15] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
    when access.writeReq.valid : @[CScratchpad.scala 227:31]
      write mport MPORT_1 = mem[access.writeReq.bits.addr], clock
      MPORT_1 <= access.writeReq.bits.data
    req.writeback.ready <= UInt<1>("h0") @[CScratchpad.scala 288:25]

  module CScratchpadPackedSubwordLoader_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_block_in : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<512>, len : UInt<7>, idxBase : UInt<4>}}, sp_write_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<256>, idx : UInt<4>}}}

    reg subwordCounter_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire datCounter_value : UInt @[Counter.scala 61:73]
    datCounter_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg beat : UInt<512>, clock with :
      reset => (UInt<1>("h0"), beat) @[CScratchpadPackedSubwordLoader.scala 16:17]
    reg idxBase : UInt<4>, clock with :
      reset => (UInt<1>("h0"), idxBase) @[CScratchpadPackedSubwordLoader.scala 17:20]
    reg lenRemainingFromReq : UInt<7>, clock with :
      reset => (UInt<1>("h0"), lenRemainingFromReq) @[CScratchpadPackedSubwordLoader.scala 18:32]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 21:22]
    node _io_cache_block_in_ready_T = eq(state, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 22:36]
    io.cache_block_in.ready <= _io_cache_block_in_ready_T @[CScratchpadPackedSubwordLoader.scala 22:27]
    io.sp_write_out.bits.idx is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.bits.dat is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.valid <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 24:25]
    node _datSelection_T = bits(beat, 255, 0) @[CScratchpadPackedSubwordLoader.scala 29:9]
    wire datSelection : UInt<256>[1] @[CScratchpadPackedSubwordLoader.scala 26:29]
    datSelection[0] <= _datSelection_T @[CScratchpadPackedSubwordLoader.scala 26:29]
    node _T = eq(UInt<1>("h0"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
    when _T : @[CScratchpadPackedSubwordLoader.scala 32:17]
      node _T_1 = and(io.cache_block_in.ready, io.cache_block_in.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[CScratchpadPackedSubwordLoader.scala 34:36]
        state <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 35:15]
        beat <= io.cache_block_in.bits.dat @[CScratchpadPackedSubwordLoader.scala 36:14]
        idxBase <= io.cache_block_in.bits.idxBase @[CScratchpadPackedSubwordLoader.scala 37:17]
        lenRemainingFromReq <= io.cache_block_in.bits.len @[CScratchpadPackedSubwordLoader.scala 38:29]
        datCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
        subwordCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
      when _T_2 : @[CScratchpadPackedSubwordLoader.scala 32:17]
        io.sp_write_out.valid <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 45:29]
        io.sp_write_out.bits.dat <= datSelection[UInt<1>("h0")] @[CScratchpadPackedSubwordLoader.scala 46:32]
        io.sp_write_out.bits.idx <= idxBase @[CScratchpadPackedSubwordLoader.scala 47:32]
        node _T_3 = and(io.sp_write_out.ready, io.sp_write_out.valid) @[Decoupled.scala 51:35]
        when _T_3 : @[CScratchpadPackedSubwordLoader.scala 48:34]
          node _idxBase_T = add(idxBase, UInt<1>("h1")) @[CScratchpadPackedSubwordLoader.scala 50:28]
          node _idxBase_T_1 = tail(_idxBase_T, 1) @[CScratchpadPackedSubwordLoader.scala 50:28]
          idxBase <= _idxBase_T_1 @[CScratchpadPackedSubwordLoader.scala 50:17]
          node _T_4 = eq(datCounter_value, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 51:31]
          when _T_4 : @[CScratchpadPackedSubwordLoader.scala 51:59]
            node wrap = eq(subwordCounter_value, UInt<6>("h3f")) @[Counter.scala 73:24]
            node _value_T = add(subwordCounter_value, UInt<1>("h1")) @[Counter.scala 77:24]
            node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
            subwordCounter_value <= _value_T_1 @[Counter.scala 77:15]
            node _lenRemainingFromReq_T = sub(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 53:54]
            node _lenRemainingFromReq_T_1 = tail(_lenRemainingFromReq_T, 1) @[CScratchpadPackedSubwordLoader.scala 53:54]
            lenRemainingFromReq <= _lenRemainingFromReq_T_1 @[CScratchpadPackedSubwordLoader.scala 53:31]
            node _T_5 = eq(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 54:36]
            when _T_5 : @[CScratchpadPackedSubwordLoader.scala 54:60]
              state <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 55:19]
            node _beat_T = shr(beat, 256) @[CScratchpadPackedSubwordLoader.scala 57:24]
            beat <= _beat_T @[CScratchpadPackedSubwordLoader.scala 57:16]


  module CScratchpad_1 :
    input clock : Clock
    input reset : Reset
    output auto : { mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output access : { flip readReq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, readRes : { valid : UInt<1>, bits : UInt<256>}, flip writeReq : { valid : UInt<1>, bits : { addr : UInt<4>, data : UInt<256>}}}
    output req : { progress : UInt<5>, flip request : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<4>, len : UInt<34>}}, flip writeback : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<4>, len : UInt<34>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    access is invalid
    req is invalid
    wire mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    mem_out is invalid @[Nodes.scala 1212:84]
    auto.mem_out <- mem_out @[LazyModule.scala 368:12]
    req.request.ready <= UInt<1>("h1") @[CScratchpad.scala 90:21]
    smem mem : UInt<256> [16] @[CScratchpad.scala 92:24]
    inst loader of CScratchpadPackedSubwordLoader_1 @[CScratchpad.scala 94:30]
    loader.clock <= clock
    loader.reset <= reset
    reg mem_tx_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CScratchpad.scala 102:37]
    reg access_readRes_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), access_readRes_valid_REG) @[CScratchpad.scala 85:30]
    access_readRes_valid_REG <= access.readReq.valid @[CScratchpad.scala 85:30]
    access.readRes.valid <= access_readRes_valid_REG @[CScratchpad.scala 103:24]
    wire _rval_WIRE : UInt @[CScratchpad.scala 104:30]
    _rval_WIRE is invalid @[CScratchpad.scala 104:30]
    when access.readReq.valid : @[CScratchpad.scala 104:30]
      _rval_WIRE <= access.readReq.bits @[CScratchpad.scala 104:30]
      node _rval_T = or(_rval_WIRE, UInt<4>("h0")) @[CScratchpad.scala 104:30]
      node _rval_T_1 = bits(_rval_T, 3, 0) @[CScratchpad.scala 104:30]
      read mport rval = mem[_rval_T_1], clock @[CScratchpad.scala 104:30]
    access.readRes.bits <= rval @[CScratchpad.scala 105:23]
    node _req_request_ready_T = eq(mem_tx_state, UInt<2>("h0")) @[CScratchpad.scala 108:37]
    req.request.ready <= _req_request_ready_T @[CScratchpad.scala 108:21]
    wire _reqIdleBits_WIRE : UInt<1>[16] @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[0] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[1] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[2] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[3] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[4] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[5] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[6] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[7] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[8] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[9] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[10] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[11] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[12] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[13] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[14] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[15] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    reg reqIdleBits : UInt<1>[16], clock with :
      reset => (reset, _reqIdleBits_WIRE) @[CScratchpad.scala 110:36]
    node _reqAvailable_T = or(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_1 = or(_reqAvailable_T, reqIdleBits[2]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_2 = or(_reqAvailable_T_1, reqIdleBits[3]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_3 = or(_reqAvailable_T_2, reqIdleBits[4]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_4 = or(_reqAvailable_T_3, reqIdleBits[5]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_5 = or(_reqAvailable_T_4, reqIdleBits[6]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_6 = or(_reqAvailable_T_5, reqIdleBits[7]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_7 = or(_reqAvailable_T_6, reqIdleBits[8]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_8 = or(_reqAvailable_T_7, reqIdleBits[9]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_9 = or(_reqAvailable_T_8, reqIdleBits[10]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_10 = or(_reqAvailable_T_9, reqIdleBits[11]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_11 = or(_reqAvailable_T_10, reqIdleBits[12]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_12 = or(_reqAvailable_T_11, reqIdleBits[13]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_13 = or(_reqAvailable_T_12, reqIdleBits[14]) @[CScratchpad.scala 111:51]
    node reqAvailable = or(_reqAvailable_T_13, reqIdleBits[15]) @[CScratchpad.scala 111:51]
    node _reqChosen_T = mux(reqIdleBits[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _reqChosen_T_1 = mux(reqIdleBits[13], UInt<4>("hd"), _reqChosen_T) @[Mux.scala 47:70]
    node _reqChosen_T_2 = mux(reqIdleBits[12], UInt<4>("hc"), _reqChosen_T_1) @[Mux.scala 47:70]
    node _reqChosen_T_3 = mux(reqIdleBits[11], UInt<4>("hb"), _reqChosen_T_2) @[Mux.scala 47:70]
    node _reqChosen_T_4 = mux(reqIdleBits[10], UInt<4>("ha"), _reqChosen_T_3) @[Mux.scala 47:70]
    node _reqChosen_T_5 = mux(reqIdleBits[9], UInt<4>("h9"), _reqChosen_T_4) @[Mux.scala 47:70]
    node _reqChosen_T_6 = mux(reqIdleBits[8], UInt<4>("h8"), _reqChosen_T_5) @[Mux.scala 47:70]
    node _reqChosen_T_7 = mux(reqIdleBits[7], UInt<3>("h7"), _reqChosen_T_6) @[Mux.scala 47:70]
    node _reqChosen_T_8 = mux(reqIdleBits[6], UInt<3>("h6"), _reqChosen_T_7) @[Mux.scala 47:70]
    node _reqChosen_T_9 = mux(reqIdleBits[5], UInt<3>("h5"), _reqChosen_T_8) @[Mux.scala 47:70]
    node _reqChosen_T_10 = mux(reqIdleBits[4], UInt<3>("h4"), _reqChosen_T_9) @[Mux.scala 47:70]
    node _reqChosen_T_11 = mux(reqIdleBits[3], UInt<2>("h3"), _reqChosen_T_10) @[Mux.scala 47:70]
    node _reqChosen_T_12 = mux(reqIdleBits[2], UInt<2>("h2"), _reqChosen_T_11) @[Mux.scala 47:70]
    node _reqChosen_T_13 = mux(reqIdleBits[1], UInt<1>("h1"), _reqChosen_T_12) @[Mux.scala 47:70]
    node reqChosen = mux(reqIdleBits[0], UInt<1>("h0"), _reqChosen_T_13) @[Mux.scala 47:70]
    reg req_cache : { scratchpadAddress : UInt<4>, memoryLength : UInt<16>}[16], clock with :
      reset => (UInt<1>("h0"), req_cache) @[CScratchpad.scala 114:30]
    node _T = sub(req.request.bits.len, UInt<1>("h1")) @[CScratchpad.scala 119:76]
    node _T_1 = tail(_T, 1) @[CScratchpad.scala 119:76]
    node _T_2 = and(req.request.bits.len, _T_1) @[CScratchpad.scala 119:52]
    node _T_3 = neq(_T_2, UInt<1>("h0")) @[CScratchpad.scala 119:84]
    node _T_4 = and(req.request.valid, _T_3) @[CScratchpad.scala 119:26]
    when _T_4 : @[CScratchpad.scala 119:94]
      node _T_5 = asUInt(reset) @[CScratchpad.scala 120:11]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[CScratchpad.scala 120:11]
      when _T_6 : @[CScratchpad.scala 120:11]
        printf(clock, UInt<1>("h1"), "Len is not pow2: %d\n", req.request.bits.len) : printf @[CScratchpad.scala 120:11]
      node _T_7 = asUInt(reset) @[CScratchpad.scala 121:11]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[CScratchpad.scala 121:11]
      when _T_8 : @[CScratchpad.scala 121:11]
        node _T_9 = eq(UInt<1>("h0"), UInt<1>("h0")) @[CScratchpad.scala 121:11]
        when _T_9 : @[CScratchpad.scala 121:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at CScratchpad.scala:121 assert(false.B)\n") : printf_1 @[CScratchpad.scala 121:11]
        assert(clock, UInt<1>("h0"), UInt<1>("h1"), "") : assert @[CScratchpad.scala 121:11]
    reg totalTx : { memoryAddress : UInt<34>, scratchpadAddress : UInt<4>, memoryLength : UInt<34>}, clock with :
      reset => (UInt<1>("h0"), totalTx) @[CScratchpad.scala 124:28]
    wire txEmitLengthLg : UInt<4> @[CScratchpad.scala 130:36]
    txEmitLengthLg <= UInt<1>("h0") @[CScratchpad.scala 131:18]
    node _x1_a_bits_legal_T = leq(UInt<1>("h0"), txEmitLengthLg) @[Parameters.scala 92:32]
    node _x1_a_bits_legal_T_1 = leq(txEmitLengthLg, UInt<3>("h6")) @[Parameters.scala 92:42]
    node _x1_a_bits_legal_T_2 = and(_x1_a_bits_legal_T, _x1_a_bits_legal_T_1) @[Parameters.scala 92:37]
    node _x1_a_bits_legal_T_3 = or(UInt<1>("h0"), _x1_a_bits_legal_T_2) @[Parameters.scala 670:31]
    node _x1_a_bits_legal_T_4 = xor(totalTx.memoryAddress, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _x1_a_bits_legal_T_5 = cvt(_x1_a_bits_legal_T_4) @[Parameters.scala 137:45]
    node _x1_a_bits_legal_T_6 = and(_x1_a_bits_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_7 = asSInt(_x1_a_bits_legal_T_6) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_8 = eq(_x1_a_bits_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _x1_a_bits_legal_T_9 = and(_x1_a_bits_legal_T_3, _x1_a_bits_legal_T_8) @[Parameters.scala 670:56]
    node x1_a_bits_legal = or(UInt<1>("h0"), _x1_a_bits_legal_T_9) @[Parameters.scala 672:30]
    wire x1_a_bits_a : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 447:17]
    x1_a_bits_a is invalid @[Edges.scala 447:17]
    x1_a_bits_a.opcode <= UInt<3>("h4") @[Edges.scala 448:15]
    x1_a_bits_a.param <= UInt<1>("h0") @[Edges.scala 449:15]
    x1_a_bits_a.size <= txEmitLengthLg @[Edges.scala 450:15]
    x1_a_bits_a.source <= reqChosen @[Edges.scala 451:15]
    x1_a_bits_a.address <= totalTx.memoryAddress @[Edges.scala 452:15]
    node _x1_a_bits_a_mask_sizeOH_T = or(txEmitLengthLg, UInt<6>("h0")) @[Misc.scala 201:34]
    node x1_a_bits_a_mask_sizeOH_shiftAmount = bits(_x1_a_bits_a_mask_sizeOH_T, 2, 0) @[OneHot.scala 63:49]
    node _x1_a_bits_a_mask_sizeOH_T_1 = dshl(UInt<1>("h1"), x1_a_bits_a_mask_sizeOH_shiftAmount) @[OneHot.scala 64:12]
    node _x1_a_bits_a_mask_sizeOH_T_2 = bits(_x1_a_bits_a_mask_sizeOH_T_1, 5, 0) @[OneHot.scala 64:27]
    node x1_a_bits_a_mask_sizeOH = or(_x1_a_bits_a_mask_sizeOH_T_2, UInt<1>("h1")) @[Misc.scala 201:81]
    node _x1_a_bits_a_mask_T = geq(txEmitLengthLg, UInt<3>("h6")) @[Misc.scala 205:21]
    node x1_a_bits_a_mask_size = bits(x1_a_bits_a_mask_sizeOH, 5, 5) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit = bits(totalTx.memoryAddress, 5, 5) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit = eq(x1_a_bits_a_mask_bit, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq = and(UInt<1>("h1"), x1_a_bits_a_mask_nbit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_1 = and(UInt<1>("h1"), x1_a_bits_a_mask_bit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_1 = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq_1) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_1 = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T_1) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_1 = bits(x1_a_bits_a_mask_sizeOH, 4, 4) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_1 = bits(totalTx.memoryAddress, 4, 4) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_1 = eq(x1_a_bits_a_mask_bit_1, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_2 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_2 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_2) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_2 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_2) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_3 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_3 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_3) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_3 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_3) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_4 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_4 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_4) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_4 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_4) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_5 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_5 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_5) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_5 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_5) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_2 = bits(x1_a_bits_a_mask_sizeOH, 3, 3) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_2 = bits(totalTx.memoryAddress, 3, 3) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_2 = eq(x1_a_bits_a_mask_bit_2, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_6 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_6 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_6) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_6 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_6) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_7 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_7 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_7) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_7 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_7) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_8 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_8 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_8) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_8 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_8) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_9 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_9 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_9) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_9 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_9) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_10 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_10 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_10) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_10 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_10) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_11 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_11 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_11) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_11 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_11) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_12 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_12 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_12) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_12 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_12) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_13 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_13 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_13) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_13 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_13) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_3 = bits(x1_a_bits_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_3 = bits(totalTx.memoryAddress, 2, 2) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_3 = eq(x1_a_bits_a_mask_bit_3, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_14 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_14 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_14) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_14 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_14) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_15 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_15 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_15) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_15 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_15) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_16 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_16 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_16) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_16 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_16) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_17 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_17 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_17) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_17 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_17) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_18 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_18 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_18) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_18 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_18) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_19 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_19 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_19) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_19 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_19) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_20 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_20 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_20) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_20 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_20) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_21 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_21 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_21) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_21 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_21) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_22 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_22 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_22) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_22 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_22) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_23 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_23 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_23) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_23 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_23) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_24 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_24 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_24) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_24 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_24) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_25 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_25 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_25) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_25 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_25) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_26 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_26 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_26) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_26 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_26) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_27 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_27 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_27) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_27 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_27) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_28 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_28 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_28) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_28 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_28) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_29 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_29 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_29) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_29 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_29) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_4 = bits(x1_a_bits_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_4 = bits(totalTx.memoryAddress, 1, 1) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_4 = eq(x1_a_bits_a_mask_bit_4, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_30 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_30 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_30) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_30 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_30) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_31 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_31 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_31) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_31 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_31) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_32 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_32 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_32) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_32 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_32) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_33 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_33 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_33) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_33 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_33) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_34 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_34 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_34) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_34 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_34) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_35 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_35 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_35) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_35 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_35) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_36 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_36 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_36) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_36 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_36) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_37 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_37 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_37) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_37 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_37) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_38 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_38 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_38) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_38 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_38) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_39 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_39 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_39) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_39 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_39) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_40 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_40 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_40) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_40 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_40) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_41 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_41 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_41) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_41 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_41) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_42 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_42 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_42) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_42 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_42) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_43 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_43 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_43) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_43 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_43) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_44 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_44 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_44) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_44 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_44) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_45 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_45 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_45) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_45 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_45) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_46 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_46 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_46) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_46 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_46) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_47 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_47 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_47) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_47 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_47) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_48 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_48 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_48) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_48 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_48) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_49 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_49 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_49) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_49 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_49) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_50 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_50 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_50) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_50 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_50) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_51 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_51 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_51) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_51 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_51) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_52 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_52 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_52) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_52 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_52) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_53 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_53 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_53) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_53 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_53) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_54 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_54 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_54) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_54 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_54) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_55 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_55 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_55) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_55 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_55) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_56 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_56 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_56) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_56 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_56) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_57 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_57 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_57) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_57 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_57) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_58 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_58 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_58) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_58 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_58) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_59 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_59 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_59) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_59 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_59) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_60 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_60 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_60) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_60 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_60) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_61 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_61 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_61) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_61 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_61) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_5 = bits(x1_a_bits_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_5 = bits(totalTx.memoryAddress, 0, 0) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_5 = eq(x1_a_bits_a_mask_bit_5, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_62 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_62 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_62) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_62 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_62) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_63 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_63 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_63) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_63 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_63) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_64 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_64 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_64) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_64 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_64) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_65 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_65 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_65) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_65 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_65) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_66 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_66 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_66) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_66 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_66) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_67 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_67 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_67) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_67 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_67) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_68 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_68 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_68) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_68 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_68) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_69 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_69 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_69) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_69 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_69) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_70 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_70 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_70) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_70 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_70) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_71 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_71 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_71) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_71 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_71) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_72 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_72 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_72) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_72 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_72) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_73 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_73 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_73) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_73 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_73) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_74 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_74 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_74) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_74 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_74) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_75 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_75 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_75) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_75 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_75) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_76 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_76 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_76) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_76 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_76) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_77 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_77 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_77) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_77 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_77) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_78 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_78 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_78) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_78 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_78) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_79 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_79 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_79) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_79 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_79) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_80 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_80 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_80) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_80 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_80) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_81 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_81 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_81) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_81 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_81) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_82 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_82 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_82) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_82 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_82) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_83 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_83 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_83) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_83 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_83) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_84 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_84 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_84) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_84 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_84) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_85 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_85 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_85) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_85 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_85) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_86 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_86 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_86) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_86 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_86) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_87 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_87 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_87) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_87 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_87) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_88 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_88 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_88) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_88 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_88) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_89 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_89 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_89) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_89 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_89) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_90 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_90 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_90) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_90 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_90) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_91 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_91 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_91) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_91 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_91) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_92 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_92 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_92) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_92 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_92) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_93 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_93 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_93) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_93 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_93) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_94 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_94 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_94) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_94 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_94) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_95 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_95 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_95) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_95 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_95) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_96 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_96 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_96) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_96 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_96) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_97 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_97 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_97) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_97 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_97) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_98 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_98 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_98) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_98 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_98) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_99 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_99 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_99) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_99 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_99) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_100 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_100 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_100) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_100 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_100) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_101 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_101 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_101) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_101 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_101) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_102 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_102 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_102) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_102 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_102) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_103 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_103 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_103) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_103 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_103) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_104 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_104 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_104) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_104 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_104) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_105 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_105 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_105) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_105 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_105) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_106 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_106 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_106) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_106 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_106) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_107 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_107 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_107) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_107 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_107) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_108 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_108 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_108) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_108 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_108) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_109 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_109 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_109) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_109 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_109) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_110 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_110 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_110) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_110 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_110) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_111 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_111 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_111) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_111 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_111) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_112 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_112 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_112) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_112 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_112) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_113 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_113 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_113) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_113 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_113) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_114 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_114 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_114) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_114 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_114) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_115 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_115 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_115) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_115 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_115) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_116 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_116 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_116) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_116 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_116) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_117 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_117 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_117) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_117 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_117) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_118 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_118 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_118) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_118 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_118) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_119 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_119 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_119) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_119 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_119) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_120 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_120 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_120) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_120 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_120) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_121 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_121 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_121) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_121 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_121) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_122 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_122 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_122) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_122 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_122) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_123 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_123 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_123) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_123 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_123) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_124 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_124 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_124) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_124 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_124) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_125 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_125 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_125) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_125 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_125) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_lo_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_63, x1_a_bits_a_mask_acc_62) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_65, x1_a_bits_a_mask_acc_64) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_67, x1_a_bits_a_mask_acc_66) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_69, x1_a_bits_a_mask_acc_68) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_71, x1_a_bits_a_mask_acc_70) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_73, x1_a_bits_a_mask_acc_72) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo = cat(x1_a_bits_a_mask_lo_lo_hi_lo_hi, x1_a_bits_a_mask_lo_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_75, x1_a_bits_a_mask_acc_74) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_77, x1_a_bits_a_mask_acc_76) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi_hi, x1_a_bits_a_mask_lo_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo = cat(x1_a_bits_a_mask_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_79, x1_a_bits_a_mask_acc_78) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_81, x1_a_bits_a_mask_acc_80) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo = cat(x1_a_bits_a_mask_lo_hi_lo_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_83, x1_a_bits_a_mask_acc_82) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_85, x1_a_bits_a_mask_acc_84) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi = cat(x1_a_bits_a_mask_lo_hi_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo = cat(x1_a_bits_a_mask_lo_hi_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_87, x1_a_bits_a_mask_acc_86) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_89, x1_a_bits_a_mask_acc_88) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo = cat(x1_a_bits_a_mask_lo_hi_hi_lo_hi, x1_a_bits_a_mask_lo_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_91, x1_a_bits_a_mask_acc_90) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_93, x1_a_bits_a_mask_acc_92) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi = cat(x1_a_bits_a_mask_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo = cat(x1_a_bits_a_mask_lo_hi, x1_a_bits_a_mask_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_95, x1_a_bits_a_mask_acc_94) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_97, x1_a_bits_a_mask_acc_96) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_99, x1_a_bits_a_mask_acc_98) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_101, x1_a_bits_a_mask_acc_100) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi = cat(x1_a_bits_a_mask_hi_lo_lo_hi_hi, x1_a_bits_a_mask_hi_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_103, x1_a_bits_a_mask_acc_102) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_105, x1_a_bits_a_mask_acc_104) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi_lo_hi, x1_a_bits_a_mask_hi_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_107, x1_a_bits_a_mask_acc_106) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_109, x1_a_bits_a_mask_acc_108) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi_hi, x1_a_bits_a_mask_hi_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi, x1_a_bits_a_mask_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi, x1_a_bits_a_mask_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_111, x1_a_bits_a_mask_acc_110) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_113, x1_a_bits_a_mask_acc_112) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo = cat(x1_a_bits_a_mask_hi_hi_lo_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_115, x1_a_bits_a_mask_acc_114) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_117, x1_a_bits_a_mask_acc_116) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi = cat(x1_a_bits_a_mask_hi_hi_lo_hi_hi, x1_a_bits_a_mask_hi_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_119, x1_a_bits_a_mask_acc_118) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_121, x1_a_bits_a_mask_acc_120) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_123, x1_a_bits_a_mask_acc_122) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_125, x1_a_bits_a_mask_acc_124) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi, x1_a_bits_a_mask_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi = cat(x1_a_bits_a_mask_hi_hi, x1_a_bits_a_mask_hi_lo) @[Cat.scala 33:92]
    node _x1_a_bits_a_mask_T_1 = cat(x1_a_bits_a_mask_hi, x1_a_bits_a_mask_lo) @[Cat.scala 33:92]
    x1_a_bits_a.mask <= _x1_a_bits_a_mask_T_1 @[Edges.scala 453:15]
    x1_a_bits_a.data <= UInt<1>("h0") @[Edges.scala 454:15]
    x1_a_bits_a.corrupt <= UInt<1>("h0") @[Edges.scala 455:15]
    mem_out.a.bits <= x1_a_bits_a @[CScratchpad.scala 132:18]
    node _x1_a_valid_T = eq(mem_tx_state, UInt<2>("h1")) @[CScratchpad.scala 136:35]
    mem_out.a.valid <= _x1_a_valid_T @[CScratchpad.scala 136:19]
    node _T_10 = eq(UInt<2>("h0"), mem_tx_state) @[CScratchpad.scala 138:24]
    when _T_10 : @[CScratchpad.scala 138:24]
      node _T_11 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
      when _T_11 : @[CScratchpad.scala 140:30]
        totalTx.memoryLength <= req.request.bits.len @[CScratchpad.scala 141:30]
        totalTx.scratchpadAddress <= req.request.bits.scAddr @[CScratchpad.scala 142:35]
        totalTx.memoryAddress <= req.request.bits.memAddr @[CScratchpad.scala 143:31]
        mem_tx_state <= UInt<2>("h1") @[CScratchpad.scala 144:22]
    else :
      node _T_12 = eq(UInt<2>("h1"), mem_tx_state) @[CScratchpad.scala 138:24]
      when _T_12 : @[CScratchpad.scala 138:24]
        node isBelowLimit = leq(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 149:47]
        node txEmitLengthLg_hi = bits(totalTx.memoryLength, 33, 32) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo = bits(totalTx.memoryLength, 31, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T = orr(txEmitLengthLg_hi) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_1 = or(txEmitLengthLg_hi, txEmitLengthLg_lo) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_1 = bits(_txEmitLengthLg_T_1, 31, 16) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_1 = bits(_txEmitLengthLg_T_1, 15, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_2 = orr(txEmitLengthLg_hi_1) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_3 = or(txEmitLengthLg_hi_1, txEmitLengthLg_lo_1) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_2 = bits(_txEmitLengthLg_T_3, 15, 8) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_2 = bits(_txEmitLengthLg_T_3, 7, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_4 = orr(txEmitLengthLg_hi_2) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_5 = or(txEmitLengthLg_hi_2, txEmitLengthLg_lo_2) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_3 = bits(_txEmitLengthLg_T_5, 7, 4) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_3 = bits(_txEmitLengthLg_T_5, 3, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_6 = orr(txEmitLengthLg_hi_3) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_7 = or(txEmitLengthLg_hi_3, txEmitLengthLg_lo_3) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_4 = bits(_txEmitLengthLg_T_7, 3, 2) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_4 = bits(_txEmitLengthLg_T_7, 1, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_8 = orr(txEmitLengthLg_hi_4) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_9 = or(txEmitLengthLg_hi_4, txEmitLengthLg_lo_4) @[OneHot.scala 32:28]
        node _txEmitLengthLg_T_10 = bits(_txEmitLengthLg_T_9, 1, 1) @[CircuitMath.scala 28:8]
        node _txEmitLengthLg_T_11 = cat(_txEmitLengthLg_T_8, _txEmitLengthLg_T_10) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_12 = cat(_txEmitLengthLg_T_6, _txEmitLengthLg_T_11) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_13 = cat(_txEmitLengthLg_T_4, _txEmitLengthLg_T_12) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_14 = cat(_txEmitLengthLg_T_2, _txEmitLengthLg_T_13) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_15 = cat(_txEmitLengthLg_T, _txEmitLengthLg_T_14) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_16 = mux(isBelowLimit, _txEmitLengthLg_T_15, UInt<3>("h6")) @[CScratchpad.scala 150:28]
        txEmitLengthLg <= _txEmitLengthLg_T_16 @[CScratchpad.scala 150:22]
        mem_out.a.valid <= reqAvailable @[CScratchpad.scala 151:23]
        node _T_13 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
        when _T_13 : @[CScratchpad.scala 152:28]
          reqIdleBits[reqChosen] <= UInt<1>("h0") @[CScratchpad.scala 153:32]
          req_cache[reqChosen].scratchpadAddress <= totalTx.scratchpadAddress @[CScratchpad.scala 154:48]
          node _req_cache_memoryLength_T = mux(isBelowLimit, totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 155:49]
          req_cache[reqChosen].memoryLength <= _req_cache_memoryLength_T @[CScratchpad.scala 155:43]
          node _totalTx_memoryLength_T = sub(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 156:54]
          node _totalTx_memoryLength_T_1 = tail(_totalTx_memoryLength_T, 1) @[CScratchpad.scala 156:54]
          totalTx.memoryLength <= _totalTx_memoryLength_T_1 @[CScratchpad.scala 156:30]
          node _totalTx_scratchpadAddress_T = add(totalTx.scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 157:64]
          node _totalTx_scratchpadAddress_T_1 = tail(_totalTx_scratchpadAddress_T, 1) @[CScratchpad.scala 157:64]
          totalTx.scratchpadAddress <= _totalTx_scratchpadAddress_T_1 @[CScratchpad.scala 157:35]
          node _totalTx_memoryAddress_T = add(totalTx.memoryAddress, UInt<7>("h40")) @[CScratchpad.scala 158:56]
          node _totalTx_memoryAddress_T_1 = tail(_totalTx_memoryAddress_T, 1) @[CScratchpad.scala 158:56]
          totalTx.memoryAddress <= _totalTx_memoryAddress_T_1 @[CScratchpad.scala 158:31]
          when isBelowLimit : @[CScratchpad.scala 159:28]
            mem_tx_state <= UInt<2>("h2") @[CScratchpad.scala 160:24]
      else :
        node _T_14 = eq(UInt<2>("h2"), mem_tx_state) @[CScratchpad.scala 138:24]
        when _T_14 : @[CScratchpad.scala 138:24]
          node _T_15 = and(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 166:33]
          node _T_16 = and(_T_15, reqIdleBits[2]) @[CScratchpad.scala 166:33]
          node _T_17 = and(_T_16, reqIdleBits[3]) @[CScratchpad.scala 166:33]
          node _T_18 = and(_T_17, reqIdleBits[4]) @[CScratchpad.scala 166:33]
          node _T_19 = and(_T_18, reqIdleBits[5]) @[CScratchpad.scala 166:33]
          node _T_20 = and(_T_19, reqIdleBits[6]) @[CScratchpad.scala 166:33]
          node _T_21 = and(_T_20, reqIdleBits[7]) @[CScratchpad.scala 166:33]
          node _T_22 = and(_T_21, reqIdleBits[8]) @[CScratchpad.scala 166:33]
          node _T_23 = and(_T_22, reqIdleBits[9]) @[CScratchpad.scala 166:33]
          node _T_24 = and(_T_23, reqIdleBits[10]) @[CScratchpad.scala 166:33]
          node _T_25 = and(_T_24, reqIdleBits[11]) @[CScratchpad.scala 166:33]
          node _T_26 = and(_T_25, reqIdleBits[12]) @[CScratchpad.scala 166:33]
          node _T_27 = and(_T_26, reqIdleBits[13]) @[CScratchpad.scala 166:33]
          node _T_28 = and(_T_27, reqIdleBits[14]) @[CScratchpad.scala 166:33]
          node _T_29 = and(_T_28, reqIdleBits[15]) @[CScratchpad.scala 166:33]
          when _T_29 : @[CScratchpad.scala 166:40]
            mem_tx_state <= UInt<2>("h0") @[CScratchpad.scala 167:22]
    loader.io.cache_block_in.valid <= mem_out.d.valid @[CScratchpad.scala 171:34]
    loader.io.cache_block_in.bits.dat <= mem_out.d.bits.data @[CScratchpad.scala 172:37]
    node _T_30 = geq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 174:40]
    when _T_30 : @[CScratchpad.scala 174:55]
      loader.io.cache_block_in.bits.len <= UInt<7>("h40") @[CScratchpad.scala 175:39]
    else :
      loader.io.cache_block_in.bits.len <= req_cache[mem_out.d.bits.source].memoryLength @[CScratchpad.scala 177:39]
    loader.io.cache_block_in.bits.idxBase <= req_cache[mem_out.d.bits.source].scratchpadAddress @[CScratchpad.scala 179:41]
    mem_out.d.ready <= loader.io.cache_block_in.ready @[CScratchpad.scala 180:19]
    loader.io.sp_write_out.ready <= UInt<1>("h1") @[CScratchpad.scala 181:32]
    node _T_31 = and(loader.io.cache_block_in.ready, loader.io.cache_block_in.valid) @[Decoupled.scala 51:35]
    when _T_31 : @[CScratchpad.scala 182:39]
      node _req_cache_scratchpadAddress_T = add(req_cache[mem_out.d.bits.source].scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 183:82]
      node _req_cache_scratchpadAddress_T_1 = tail(_req_cache_scratchpadAddress_T, 1) @[CScratchpad.scala 183:82]
      req_cache[mem_out.d.bits.source].scratchpadAddress <= _req_cache_scratchpadAddress_T_1 @[CScratchpad.scala 183:42]
    reg progressReg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[CScratchpad.scala 187:28]
    reg perSourceProgress : UInt<5>[16], clock with :
      reset => (UInt<1>("h0"), perSourceProgress) @[CScratchpad.scala 188:30]
    reg loadersActive : UInt<1>[16], clock with :
      reset => (UInt<1>("h0"), loadersActive) @[CScratchpad.scala 189:26]
    node _T_32 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_32 : @[CScratchpad.scala 190:27]
      loadersActive[0] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[1] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[2] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[3] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[4] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[5] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[6] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[7] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[8] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[9] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[10] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[11] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[12] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[13] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[14] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[15] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
    node _T_33 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
    when _T_33 : @[CScratchpad.scala 193:25]
      loadersActive[reqChosen] <= UInt<1>("h1") @[CScratchpad.scala 194:30]
      perSourceProgress[reqChosen] <= totalTx.scratchpadAddress @[CScratchpad.scala 195:34]
    reg loaderSource : UInt<4>, clock with :
      reset => (UInt<1>("h0"), loaderSource) @[CScratchpad.scala 197:25]
    node _lowestActive_T = mux(loadersActive[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _lowestActive_T_1 = mux(loadersActive[13], UInt<4>("hd"), _lowestActive_T) @[Mux.scala 47:70]
    node _lowestActive_T_2 = mux(loadersActive[12], UInt<4>("hc"), _lowestActive_T_1) @[Mux.scala 47:70]
    node _lowestActive_T_3 = mux(loadersActive[11], UInt<4>("hb"), _lowestActive_T_2) @[Mux.scala 47:70]
    node _lowestActive_T_4 = mux(loadersActive[10], UInt<4>("ha"), _lowestActive_T_3) @[Mux.scala 47:70]
    node _lowestActive_T_5 = mux(loadersActive[9], UInt<4>("h9"), _lowestActive_T_4) @[Mux.scala 47:70]
    node _lowestActive_T_6 = mux(loadersActive[8], UInt<4>("h8"), _lowestActive_T_5) @[Mux.scala 47:70]
    node _lowestActive_T_7 = mux(loadersActive[7], UInt<3>("h7"), _lowestActive_T_6) @[Mux.scala 47:70]
    node _lowestActive_T_8 = mux(loadersActive[6], UInt<3>("h6"), _lowestActive_T_7) @[Mux.scala 47:70]
    node _lowestActive_T_9 = mux(loadersActive[5], UInt<3>("h5"), _lowestActive_T_8) @[Mux.scala 47:70]
    node _lowestActive_T_10 = mux(loadersActive[4], UInt<3>("h4"), _lowestActive_T_9) @[Mux.scala 47:70]
    node _lowestActive_T_11 = mux(loadersActive[3], UInt<2>("h3"), _lowestActive_T_10) @[Mux.scala 47:70]
    node _lowestActive_T_12 = mux(loadersActive[2], UInt<2>("h2"), _lowestActive_T_11) @[Mux.scala 47:70]
    node _lowestActive_T_13 = mux(loadersActive[1], UInt<1>("h1"), _lowestActive_T_12) @[Mux.scala 47:70]
    node lowestActive = mux(loadersActive[0], UInt<1>("h0"), _lowestActive_T_13) @[Mux.scala 47:70]
    node _haveActive_T = or(loadersActive[0], loadersActive[1]) @[CScratchpad.scala 199:43]
    node _haveActive_T_1 = or(_haveActive_T, loadersActive[2]) @[CScratchpad.scala 199:43]
    node _haveActive_T_2 = or(_haveActive_T_1, loadersActive[3]) @[CScratchpad.scala 199:43]
    node _haveActive_T_3 = or(_haveActive_T_2, loadersActive[4]) @[CScratchpad.scala 199:43]
    node _haveActive_T_4 = or(_haveActive_T_3, loadersActive[5]) @[CScratchpad.scala 199:43]
    node _haveActive_T_5 = or(_haveActive_T_4, loadersActive[6]) @[CScratchpad.scala 199:43]
    node _haveActive_T_6 = or(_haveActive_T_5, loadersActive[7]) @[CScratchpad.scala 199:43]
    node _haveActive_T_7 = or(_haveActive_T_6, loadersActive[8]) @[CScratchpad.scala 199:43]
    node _haveActive_T_8 = or(_haveActive_T_7, loadersActive[9]) @[CScratchpad.scala 199:43]
    node _haveActive_T_9 = or(_haveActive_T_8, loadersActive[10]) @[CScratchpad.scala 199:43]
    node _haveActive_T_10 = or(_haveActive_T_9, loadersActive[11]) @[CScratchpad.scala 199:43]
    node _haveActive_T_11 = or(_haveActive_T_10, loadersActive[12]) @[CScratchpad.scala 199:43]
    node _haveActive_T_12 = or(_haveActive_T_11, loadersActive[13]) @[CScratchpad.scala 199:43]
    node _haveActive_T_13 = or(_haveActive_T_12, loadersActive[14]) @[CScratchpad.scala 199:43]
    node _haveActive_T_14 = or(_haveActive_T_13, loadersActive[15]) @[CScratchpad.scala 199:43]
    node _haveActive_T_15 = eq(loader.io.cache_block_in.ready, UInt<1>("h0")) @[CScratchpad.scala 199:52]
    node haveActive = or(_haveActive_T_14, _haveActive_T_15) @[CScratchpad.scala 199:49]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[CScratchpad.scala 201:51]
    REG <= loader.io.cache_block_in.ready @[CScratchpad.scala 201:51]
    node _T_34 = eq(REG, UInt<1>("h0")) @[CScratchpad.scala 201:43]
    node _T_35 = and(loader.io.cache_block_in.ready, _T_34) @[CScratchpad.scala 201:40]
    when _T_35 : @[CScratchpad.scala 201:85]
      node _loadersActive_T = eq(reqIdleBits[loaderSource], UInt<1>("h0")) @[CScratchpad.scala 202:36]
      loadersActive[loaderSource] <= _loadersActive_T @[CScratchpad.scala 202:33]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[CScratchpad.scala 205:16]
    REG_1 <= haveActive @[CScratchpad.scala 205:16]
    when REG_1 : @[CScratchpad.scala 205:30]
      reg progressReg_REG : UInt, clock with :
        reset => (UInt<1>("h0"), progressReg_REG) @[CScratchpad.scala 206:45]
      progressReg_REG <= lowestActive @[CScratchpad.scala 206:45]
      node _progressReg_T = or(progressReg_REG, UInt<4>("h0"))
      node _progressReg_T_1 = bits(_progressReg_T, 3, 0)
      progressReg <= perSourceProgress[_progressReg_T_1] @[CScratchpad.scala 206:17]
    node _T_36 = and(mem_out.d.ready, mem_out.d.valid) @[Decoupled.scala 51:35]
    when _T_36 : @[CScratchpad.scala 209:24]
      node _req_cache_memoryLength_T_1 = sub(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 210:72]
      node _req_cache_memoryLength_T_2 = tail(_req_cache_memoryLength_T_1, 1) @[CScratchpad.scala 210:72]
      req_cache[mem_out.d.bits.source].memoryLength <= _req_cache_memoryLength_T_2 @[CScratchpad.scala 210:37]
      loaderSource <= mem_out.d.bits.source @[CScratchpad.scala 211:18]
      node _T_37 = leq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 212:42]
      when _T_37 : @[CScratchpad.scala 212:57]
        reqIdleBits[mem_out.d.bits.source] <= UInt<1>("h1") @[CScratchpad.scala 213:28]
    req.progress <= progressReg @[CScratchpad.scala 216:16]
    when loader.io.sp_write_out.valid : @[CScratchpad.scala 217:38]
      write mport MPORT = mem[loader.io.sp_write_out.bits.idx], clock
      MPORT <= loader.io.sp_write_out.bits.dat
      node _perSourceProgress_T = add(loader.io.sp_write_out.bits.idx, UInt<1>("h1")) @[CScratchpad.scala 219:72]
      perSourceProgress[loaderSource] <= _perSourceProgress_T @[CScratchpad.scala 219:37]
    node _T_38 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_38 : @[CScratchpad.scala 222:26]
      progressReg <= UInt<1>("h0") @[CScratchpad.scala 223:17]
      perSourceProgress[0] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[1] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[2] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[3] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[4] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[5] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[6] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[7] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[8] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[9] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[10] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[11] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[12] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[13] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[14] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[15] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
    when access.writeReq.valid : @[CScratchpad.scala 227:31]
      write mport MPORT_1 = mem[access.writeReq.bits.addr], clock
      MPORT_1 <= access.writeReq.bits.data
    req.writeback.ready <= UInt<1>("h0") @[CScratchpad.scala 288:25]

  module CScratchpadPackedSubwordLoader_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_block_in : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<512>, len : UInt<7>, idxBase : UInt<9>}}, sp_write_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<256>, idx : UInt<9>}}}

    reg subwordCounter_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire datCounter_value : UInt @[Counter.scala 61:73]
    datCounter_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg beat : UInt<512>, clock with :
      reset => (UInt<1>("h0"), beat) @[CScratchpadPackedSubwordLoader.scala 16:17]
    reg idxBase : UInt<9>, clock with :
      reset => (UInt<1>("h0"), idxBase) @[CScratchpadPackedSubwordLoader.scala 17:20]
    reg lenRemainingFromReq : UInt<7>, clock with :
      reset => (UInt<1>("h0"), lenRemainingFromReq) @[CScratchpadPackedSubwordLoader.scala 18:32]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 21:22]
    node _io_cache_block_in_ready_T = eq(state, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 22:36]
    io.cache_block_in.ready <= _io_cache_block_in_ready_T @[CScratchpadPackedSubwordLoader.scala 22:27]
    io.sp_write_out.bits.idx is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.bits.dat is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.valid <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 24:25]
    node _datSelection_T = bits(beat, 255, 0) @[CScratchpadPackedSubwordLoader.scala 29:9]
    wire datSelection : UInt<256>[1] @[CScratchpadPackedSubwordLoader.scala 26:29]
    datSelection[0] <= _datSelection_T @[CScratchpadPackedSubwordLoader.scala 26:29]
    node _T = eq(UInt<1>("h0"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
    when _T : @[CScratchpadPackedSubwordLoader.scala 32:17]
      node _T_1 = and(io.cache_block_in.ready, io.cache_block_in.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[CScratchpadPackedSubwordLoader.scala 34:36]
        state <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 35:15]
        beat <= io.cache_block_in.bits.dat @[CScratchpadPackedSubwordLoader.scala 36:14]
        idxBase <= io.cache_block_in.bits.idxBase @[CScratchpadPackedSubwordLoader.scala 37:17]
        lenRemainingFromReq <= io.cache_block_in.bits.len @[CScratchpadPackedSubwordLoader.scala 38:29]
        datCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
        subwordCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
      when _T_2 : @[CScratchpadPackedSubwordLoader.scala 32:17]
        io.sp_write_out.valid <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 45:29]
        io.sp_write_out.bits.dat <= datSelection[UInt<1>("h0")] @[CScratchpadPackedSubwordLoader.scala 46:32]
        io.sp_write_out.bits.idx <= idxBase @[CScratchpadPackedSubwordLoader.scala 47:32]
        node _T_3 = and(io.sp_write_out.ready, io.sp_write_out.valid) @[Decoupled.scala 51:35]
        when _T_3 : @[CScratchpadPackedSubwordLoader.scala 48:34]
          node _idxBase_T = add(idxBase, UInt<1>("h1")) @[CScratchpadPackedSubwordLoader.scala 50:28]
          node _idxBase_T_1 = tail(_idxBase_T, 1) @[CScratchpadPackedSubwordLoader.scala 50:28]
          idxBase <= _idxBase_T_1 @[CScratchpadPackedSubwordLoader.scala 50:17]
          node _T_4 = eq(datCounter_value, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 51:31]
          when _T_4 : @[CScratchpadPackedSubwordLoader.scala 51:59]
            node wrap = eq(subwordCounter_value, UInt<6>("h3f")) @[Counter.scala 73:24]
            node _value_T = add(subwordCounter_value, UInt<1>("h1")) @[Counter.scala 77:24]
            node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
            subwordCounter_value <= _value_T_1 @[Counter.scala 77:15]
            node _lenRemainingFromReq_T = sub(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 53:54]
            node _lenRemainingFromReq_T_1 = tail(_lenRemainingFromReq_T, 1) @[CScratchpadPackedSubwordLoader.scala 53:54]
            lenRemainingFromReq <= _lenRemainingFromReq_T_1 @[CScratchpadPackedSubwordLoader.scala 53:31]
            node _T_5 = eq(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 54:36]
            when _T_5 : @[CScratchpadPackedSubwordLoader.scala 54:60]
              state <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 55:19]
            node _beat_T = shr(beat, 256) @[CScratchpadPackedSubwordLoader.scala 57:24]
            beat <= _beat_T @[CScratchpadPackedSubwordLoader.scala 57:16]


  module CScratchpad_2 :
    input clock : Clock
    input reset : Reset
    output auto : { mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output access : { flip readReq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<9>}, readRes : { valid : UInt<1>, bits : UInt<256>}, flip writeReq : { valid : UInt<1>, bits : { addr : UInt<9>, data : UInt<256>}}}
    output req : { progress : UInt<10>, flip request : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<9>, len : UInt<34>}}, flip writeback : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<9>, len : UInt<34>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    access is invalid
    req is invalid
    wire mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    mem_out is invalid @[Nodes.scala 1212:84]
    auto.mem_out <- mem_out @[LazyModule.scala 368:12]
    req.request.ready <= UInt<1>("h1") @[CScratchpad.scala 90:21]
    smem mem : UInt<256> [512] @[CScratchpad.scala 92:24]
    inst loader of CScratchpadPackedSubwordLoader_2 @[CScratchpad.scala 94:30]
    loader.clock <= clock
    loader.reset <= reset
    reg mem_tx_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CScratchpad.scala 102:37]
    reg access_readRes_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), access_readRes_valid_REG) @[CScratchpad.scala 85:30]
    access_readRes_valid_REG <= access.readReq.valid @[CScratchpad.scala 85:30]
    access.readRes.valid <= access_readRes_valid_REG @[CScratchpad.scala 103:24]
    wire _rval_WIRE : UInt @[CScratchpad.scala 104:30]
    _rval_WIRE is invalid @[CScratchpad.scala 104:30]
    when access.readReq.valid : @[CScratchpad.scala 104:30]
      _rval_WIRE <= access.readReq.bits @[CScratchpad.scala 104:30]
      node _rval_T = or(_rval_WIRE, UInt<9>("h0")) @[CScratchpad.scala 104:30]
      node _rval_T_1 = bits(_rval_T, 8, 0) @[CScratchpad.scala 104:30]
      read mport rval = mem[_rval_T_1], clock @[CScratchpad.scala 104:30]
    access.readRes.bits <= rval @[CScratchpad.scala 105:23]
    node _req_request_ready_T = eq(mem_tx_state, UInt<2>("h0")) @[CScratchpad.scala 108:37]
    req.request.ready <= _req_request_ready_T @[CScratchpad.scala 108:21]
    wire _reqIdleBits_WIRE : UInt<1>[16] @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[0] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[1] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[2] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[3] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[4] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[5] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[6] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[7] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[8] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[9] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[10] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[11] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[12] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[13] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[14] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[15] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    reg reqIdleBits : UInt<1>[16], clock with :
      reset => (reset, _reqIdleBits_WIRE) @[CScratchpad.scala 110:36]
    node _reqAvailable_T = or(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_1 = or(_reqAvailable_T, reqIdleBits[2]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_2 = or(_reqAvailable_T_1, reqIdleBits[3]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_3 = or(_reqAvailable_T_2, reqIdleBits[4]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_4 = or(_reqAvailable_T_3, reqIdleBits[5]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_5 = or(_reqAvailable_T_4, reqIdleBits[6]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_6 = or(_reqAvailable_T_5, reqIdleBits[7]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_7 = or(_reqAvailable_T_6, reqIdleBits[8]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_8 = or(_reqAvailable_T_7, reqIdleBits[9]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_9 = or(_reqAvailable_T_8, reqIdleBits[10]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_10 = or(_reqAvailable_T_9, reqIdleBits[11]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_11 = or(_reqAvailable_T_10, reqIdleBits[12]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_12 = or(_reqAvailable_T_11, reqIdleBits[13]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_13 = or(_reqAvailable_T_12, reqIdleBits[14]) @[CScratchpad.scala 111:51]
    node reqAvailable = or(_reqAvailable_T_13, reqIdleBits[15]) @[CScratchpad.scala 111:51]
    node _reqChosen_T = mux(reqIdleBits[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _reqChosen_T_1 = mux(reqIdleBits[13], UInt<4>("hd"), _reqChosen_T) @[Mux.scala 47:70]
    node _reqChosen_T_2 = mux(reqIdleBits[12], UInt<4>("hc"), _reqChosen_T_1) @[Mux.scala 47:70]
    node _reqChosen_T_3 = mux(reqIdleBits[11], UInt<4>("hb"), _reqChosen_T_2) @[Mux.scala 47:70]
    node _reqChosen_T_4 = mux(reqIdleBits[10], UInt<4>("ha"), _reqChosen_T_3) @[Mux.scala 47:70]
    node _reqChosen_T_5 = mux(reqIdleBits[9], UInt<4>("h9"), _reqChosen_T_4) @[Mux.scala 47:70]
    node _reqChosen_T_6 = mux(reqIdleBits[8], UInt<4>("h8"), _reqChosen_T_5) @[Mux.scala 47:70]
    node _reqChosen_T_7 = mux(reqIdleBits[7], UInt<3>("h7"), _reqChosen_T_6) @[Mux.scala 47:70]
    node _reqChosen_T_8 = mux(reqIdleBits[6], UInt<3>("h6"), _reqChosen_T_7) @[Mux.scala 47:70]
    node _reqChosen_T_9 = mux(reqIdleBits[5], UInt<3>("h5"), _reqChosen_T_8) @[Mux.scala 47:70]
    node _reqChosen_T_10 = mux(reqIdleBits[4], UInt<3>("h4"), _reqChosen_T_9) @[Mux.scala 47:70]
    node _reqChosen_T_11 = mux(reqIdleBits[3], UInt<2>("h3"), _reqChosen_T_10) @[Mux.scala 47:70]
    node _reqChosen_T_12 = mux(reqIdleBits[2], UInt<2>("h2"), _reqChosen_T_11) @[Mux.scala 47:70]
    node _reqChosen_T_13 = mux(reqIdleBits[1], UInt<1>("h1"), _reqChosen_T_12) @[Mux.scala 47:70]
    node reqChosen = mux(reqIdleBits[0], UInt<1>("h0"), _reqChosen_T_13) @[Mux.scala 47:70]
    reg req_cache : { scratchpadAddress : UInt<9>, memoryLength : UInt<16>}[16], clock with :
      reset => (UInt<1>("h0"), req_cache) @[CScratchpad.scala 114:30]
    node _T = sub(req.request.bits.len, UInt<1>("h1")) @[CScratchpad.scala 119:76]
    node _T_1 = tail(_T, 1) @[CScratchpad.scala 119:76]
    node _T_2 = and(req.request.bits.len, _T_1) @[CScratchpad.scala 119:52]
    node _T_3 = neq(_T_2, UInt<1>("h0")) @[CScratchpad.scala 119:84]
    node _T_4 = and(req.request.valid, _T_3) @[CScratchpad.scala 119:26]
    when _T_4 : @[CScratchpad.scala 119:94]
      node _T_5 = asUInt(reset) @[CScratchpad.scala 120:11]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[CScratchpad.scala 120:11]
      when _T_6 : @[CScratchpad.scala 120:11]
        printf(clock, UInt<1>("h1"), "Len is not pow2: %d\n", req.request.bits.len) : printf @[CScratchpad.scala 120:11]
      node _T_7 = asUInt(reset) @[CScratchpad.scala 121:11]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[CScratchpad.scala 121:11]
      when _T_8 : @[CScratchpad.scala 121:11]
        node _T_9 = eq(UInt<1>("h0"), UInt<1>("h0")) @[CScratchpad.scala 121:11]
        when _T_9 : @[CScratchpad.scala 121:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at CScratchpad.scala:121 assert(false.B)\n") : printf_1 @[CScratchpad.scala 121:11]
        assert(clock, UInt<1>("h0"), UInt<1>("h1"), "") : assert @[CScratchpad.scala 121:11]
    reg totalTx : { memoryAddress : UInt<34>, scratchpadAddress : UInt<9>, memoryLength : UInt<34>}, clock with :
      reset => (UInt<1>("h0"), totalTx) @[CScratchpad.scala 124:28]
    wire txEmitLengthLg : UInt<4> @[CScratchpad.scala 130:36]
    txEmitLengthLg <= UInt<1>("h0") @[CScratchpad.scala 131:18]
    node _x1_a_bits_legal_T = leq(UInt<1>("h0"), txEmitLengthLg) @[Parameters.scala 92:32]
    node _x1_a_bits_legal_T_1 = leq(txEmitLengthLg, UInt<3>("h6")) @[Parameters.scala 92:42]
    node _x1_a_bits_legal_T_2 = and(_x1_a_bits_legal_T, _x1_a_bits_legal_T_1) @[Parameters.scala 92:37]
    node _x1_a_bits_legal_T_3 = or(UInt<1>("h0"), _x1_a_bits_legal_T_2) @[Parameters.scala 670:31]
    node _x1_a_bits_legal_T_4 = xor(totalTx.memoryAddress, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _x1_a_bits_legal_T_5 = cvt(_x1_a_bits_legal_T_4) @[Parameters.scala 137:45]
    node _x1_a_bits_legal_T_6 = and(_x1_a_bits_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_7 = asSInt(_x1_a_bits_legal_T_6) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_8 = eq(_x1_a_bits_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _x1_a_bits_legal_T_9 = and(_x1_a_bits_legal_T_3, _x1_a_bits_legal_T_8) @[Parameters.scala 670:56]
    node x1_a_bits_legal = or(UInt<1>("h0"), _x1_a_bits_legal_T_9) @[Parameters.scala 672:30]
    wire x1_a_bits_a : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 447:17]
    x1_a_bits_a is invalid @[Edges.scala 447:17]
    x1_a_bits_a.opcode <= UInt<3>("h4") @[Edges.scala 448:15]
    x1_a_bits_a.param <= UInt<1>("h0") @[Edges.scala 449:15]
    x1_a_bits_a.size <= txEmitLengthLg @[Edges.scala 450:15]
    x1_a_bits_a.source <= reqChosen @[Edges.scala 451:15]
    x1_a_bits_a.address <= totalTx.memoryAddress @[Edges.scala 452:15]
    node _x1_a_bits_a_mask_sizeOH_T = or(txEmitLengthLg, UInt<6>("h0")) @[Misc.scala 201:34]
    node x1_a_bits_a_mask_sizeOH_shiftAmount = bits(_x1_a_bits_a_mask_sizeOH_T, 2, 0) @[OneHot.scala 63:49]
    node _x1_a_bits_a_mask_sizeOH_T_1 = dshl(UInt<1>("h1"), x1_a_bits_a_mask_sizeOH_shiftAmount) @[OneHot.scala 64:12]
    node _x1_a_bits_a_mask_sizeOH_T_2 = bits(_x1_a_bits_a_mask_sizeOH_T_1, 5, 0) @[OneHot.scala 64:27]
    node x1_a_bits_a_mask_sizeOH = or(_x1_a_bits_a_mask_sizeOH_T_2, UInt<1>("h1")) @[Misc.scala 201:81]
    node _x1_a_bits_a_mask_T = geq(txEmitLengthLg, UInt<3>("h6")) @[Misc.scala 205:21]
    node x1_a_bits_a_mask_size = bits(x1_a_bits_a_mask_sizeOH, 5, 5) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit = bits(totalTx.memoryAddress, 5, 5) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit = eq(x1_a_bits_a_mask_bit, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq = and(UInt<1>("h1"), x1_a_bits_a_mask_nbit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_1 = and(UInt<1>("h1"), x1_a_bits_a_mask_bit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_1 = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq_1) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_1 = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T_1) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_1 = bits(x1_a_bits_a_mask_sizeOH, 4, 4) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_1 = bits(totalTx.memoryAddress, 4, 4) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_1 = eq(x1_a_bits_a_mask_bit_1, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_2 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_2 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_2) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_2 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_2) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_3 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_3 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_3) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_3 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_3) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_4 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_4 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_4) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_4 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_4) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_5 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_5 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_5) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_5 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_5) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_2 = bits(x1_a_bits_a_mask_sizeOH, 3, 3) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_2 = bits(totalTx.memoryAddress, 3, 3) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_2 = eq(x1_a_bits_a_mask_bit_2, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_6 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_6 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_6) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_6 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_6) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_7 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_7 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_7) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_7 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_7) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_8 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_8 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_8) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_8 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_8) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_9 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_9 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_9) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_9 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_9) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_10 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_10 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_10) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_10 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_10) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_11 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_11 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_11) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_11 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_11) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_12 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_12 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_12) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_12 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_12) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_13 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_13 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_13) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_13 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_13) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_3 = bits(x1_a_bits_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_3 = bits(totalTx.memoryAddress, 2, 2) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_3 = eq(x1_a_bits_a_mask_bit_3, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_14 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_14 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_14) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_14 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_14) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_15 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_15 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_15) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_15 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_15) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_16 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_16 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_16) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_16 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_16) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_17 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_17 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_17) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_17 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_17) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_18 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_18 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_18) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_18 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_18) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_19 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_19 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_19) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_19 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_19) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_20 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_20 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_20) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_20 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_20) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_21 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_21 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_21) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_21 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_21) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_22 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_22 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_22) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_22 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_22) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_23 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_23 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_23) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_23 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_23) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_24 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_24 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_24) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_24 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_24) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_25 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_25 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_25) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_25 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_25) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_26 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_26 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_26) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_26 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_26) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_27 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_27 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_27) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_27 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_27) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_28 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_28 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_28) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_28 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_28) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_29 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_29 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_29) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_29 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_29) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_4 = bits(x1_a_bits_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_4 = bits(totalTx.memoryAddress, 1, 1) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_4 = eq(x1_a_bits_a_mask_bit_4, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_30 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_30 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_30) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_30 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_30) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_31 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_31 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_31) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_31 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_31) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_32 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_32 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_32) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_32 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_32) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_33 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_33 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_33) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_33 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_33) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_34 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_34 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_34) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_34 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_34) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_35 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_35 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_35) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_35 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_35) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_36 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_36 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_36) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_36 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_36) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_37 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_37 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_37) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_37 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_37) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_38 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_38 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_38) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_38 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_38) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_39 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_39 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_39) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_39 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_39) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_40 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_40 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_40) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_40 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_40) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_41 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_41 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_41) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_41 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_41) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_42 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_42 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_42) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_42 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_42) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_43 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_43 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_43) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_43 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_43) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_44 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_44 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_44) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_44 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_44) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_45 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_45 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_45) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_45 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_45) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_46 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_46 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_46) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_46 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_46) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_47 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_47 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_47) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_47 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_47) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_48 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_48 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_48) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_48 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_48) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_49 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_49 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_49) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_49 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_49) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_50 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_50 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_50) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_50 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_50) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_51 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_51 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_51) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_51 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_51) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_52 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_52 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_52) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_52 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_52) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_53 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_53 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_53) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_53 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_53) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_54 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_54 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_54) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_54 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_54) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_55 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_55 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_55) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_55 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_55) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_56 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_56 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_56) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_56 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_56) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_57 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_57 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_57) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_57 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_57) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_58 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_58 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_58) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_58 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_58) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_59 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_59 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_59) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_59 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_59) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_60 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_60 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_60) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_60 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_60) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_61 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_61 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_61) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_61 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_61) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_5 = bits(x1_a_bits_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_5 = bits(totalTx.memoryAddress, 0, 0) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_5 = eq(x1_a_bits_a_mask_bit_5, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_62 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_62 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_62) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_62 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_62) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_63 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_63 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_63) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_63 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_63) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_64 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_64 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_64) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_64 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_64) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_65 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_65 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_65) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_65 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_65) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_66 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_66 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_66) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_66 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_66) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_67 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_67 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_67) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_67 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_67) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_68 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_68 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_68) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_68 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_68) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_69 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_69 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_69) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_69 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_69) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_70 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_70 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_70) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_70 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_70) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_71 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_71 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_71) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_71 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_71) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_72 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_72 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_72) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_72 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_72) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_73 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_73 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_73) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_73 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_73) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_74 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_74 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_74) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_74 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_74) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_75 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_75 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_75) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_75 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_75) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_76 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_76 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_76) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_76 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_76) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_77 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_77 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_77) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_77 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_77) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_78 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_78 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_78) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_78 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_78) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_79 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_79 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_79) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_79 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_79) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_80 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_80 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_80) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_80 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_80) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_81 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_81 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_81) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_81 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_81) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_82 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_82 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_82) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_82 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_82) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_83 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_83 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_83) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_83 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_83) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_84 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_84 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_84) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_84 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_84) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_85 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_85 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_85) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_85 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_85) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_86 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_86 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_86) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_86 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_86) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_87 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_87 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_87) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_87 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_87) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_88 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_88 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_88) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_88 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_88) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_89 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_89 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_89) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_89 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_89) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_90 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_90 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_90) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_90 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_90) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_91 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_91 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_91) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_91 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_91) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_92 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_92 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_92) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_92 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_92) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_93 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_93 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_93) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_93 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_93) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_94 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_94 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_94) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_94 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_94) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_95 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_95 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_95) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_95 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_95) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_96 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_96 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_96) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_96 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_96) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_97 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_97 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_97) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_97 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_97) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_98 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_98 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_98) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_98 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_98) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_99 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_99 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_99) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_99 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_99) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_100 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_100 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_100) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_100 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_100) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_101 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_101 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_101) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_101 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_101) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_102 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_102 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_102) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_102 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_102) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_103 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_103 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_103) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_103 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_103) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_104 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_104 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_104) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_104 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_104) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_105 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_105 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_105) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_105 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_105) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_106 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_106 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_106) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_106 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_106) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_107 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_107 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_107) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_107 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_107) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_108 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_108 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_108) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_108 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_108) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_109 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_109 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_109) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_109 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_109) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_110 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_110 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_110) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_110 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_110) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_111 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_111 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_111) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_111 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_111) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_112 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_112 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_112) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_112 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_112) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_113 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_113 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_113) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_113 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_113) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_114 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_114 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_114) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_114 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_114) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_115 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_115 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_115) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_115 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_115) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_116 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_116 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_116) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_116 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_116) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_117 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_117 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_117) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_117 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_117) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_118 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_118 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_118) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_118 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_118) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_119 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_119 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_119) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_119 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_119) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_120 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_120 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_120) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_120 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_120) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_121 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_121 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_121) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_121 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_121) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_122 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_122 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_122) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_122 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_122) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_123 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_123 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_123) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_123 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_123) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_124 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_124 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_124) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_124 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_124) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_125 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_125 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_125) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_125 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_125) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_lo_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_63, x1_a_bits_a_mask_acc_62) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_65, x1_a_bits_a_mask_acc_64) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_67, x1_a_bits_a_mask_acc_66) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_69, x1_a_bits_a_mask_acc_68) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_71, x1_a_bits_a_mask_acc_70) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_73, x1_a_bits_a_mask_acc_72) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo = cat(x1_a_bits_a_mask_lo_lo_hi_lo_hi, x1_a_bits_a_mask_lo_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_75, x1_a_bits_a_mask_acc_74) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_77, x1_a_bits_a_mask_acc_76) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi_hi, x1_a_bits_a_mask_lo_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo = cat(x1_a_bits_a_mask_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_79, x1_a_bits_a_mask_acc_78) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_81, x1_a_bits_a_mask_acc_80) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo = cat(x1_a_bits_a_mask_lo_hi_lo_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_83, x1_a_bits_a_mask_acc_82) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_85, x1_a_bits_a_mask_acc_84) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi = cat(x1_a_bits_a_mask_lo_hi_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo = cat(x1_a_bits_a_mask_lo_hi_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_87, x1_a_bits_a_mask_acc_86) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_89, x1_a_bits_a_mask_acc_88) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo = cat(x1_a_bits_a_mask_lo_hi_hi_lo_hi, x1_a_bits_a_mask_lo_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_91, x1_a_bits_a_mask_acc_90) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_93, x1_a_bits_a_mask_acc_92) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi = cat(x1_a_bits_a_mask_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo = cat(x1_a_bits_a_mask_lo_hi, x1_a_bits_a_mask_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_95, x1_a_bits_a_mask_acc_94) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_97, x1_a_bits_a_mask_acc_96) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_99, x1_a_bits_a_mask_acc_98) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_101, x1_a_bits_a_mask_acc_100) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi = cat(x1_a_bits_a_mask_hi_lo_lo_hi_hi, x1_a_bits_a_mask_hi_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_103, x1_a_bits_a_mask_acc_102) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_105, x1_a_bits_a_mask_acc_104) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi_lo_hi, x1_a_bits_a_mask_hi_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_107, x1_a_bits_a_mask_acc_106) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_109, x1_a_bits_a_mask_acc_108) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi_hi, x1_a_bits_a_mask_hi_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi, x1_a_bits_a_mask_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi, x1_a_bits_a_mask_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_111, x1_a_bits_a_mask_acc_110) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_113, x1_a_bits_a_mask_acc_112) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo = cat(x1_a_bits_a_mask_hi_hi_lo_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_115, x1_a_bits_a_mask_acc_114) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_117, x1_a_bits_a_mask_acc_116) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi = cat(x1_a_bits_a_mask_hi_hi_lo_hi_hi, x1_a_bits_a_mask_hi_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_119, x1_a_bits_a_mask_acc_118) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_121, x1_a_bits_a_mask_acc_120) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_123, x1_a_bits_a_mask_acc_122) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_125, x1_a_bits_a_mask_acc_124) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi, x1_a_bits_a_mask_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi = cat(x1_a_bits_a_mask_hi_hi, x1_a_bits_a_mask_hi_lo) @[Cat.scala 33:92]
    node _x1_a_bits_a_mask_T_1 = cat(x1_a_bits_a_mask_hi, x1_a_bits_a_mask_lo) @[Cat.scala 33:92]
    x1_a_bits_a.mask <= _x1_a_bits_a_mask_T_1 @[Edges.scala 453:15]
    x1_a_bits_a.data <= UInt<1>("h0") @[Edges.scala 454:15]
    x1_a_bits_a.corrupt <= UInt<1>("h0") @[Edges.scala 455:15]
    mem_out.a.bits <= x1_a_bits_a @[CScratchpad.scala 132:18]
    node _x1_a_valid_T = eq(mem_tx_state, UInt<2>("h1")) @[CScratchpad.scala 136:35]
    mem_out.a.valid <= _x1_a_valid_T @[CScratchpad.scala 136:19]
    node _T_10 = eq(UInt<2>("h0"), mem_tx_state) @[CScratchpad.scala 138:24]
    when _T_10 : @[CScratchpad.scala 138:24]
      node _T_11 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
      when _T_11 : @[CScratchpad.scala 140:30]
        totalTx.memoryLength <= req.request.bits.len @[CScratchpad.scala 141:30]
        totalTx.scratchpadAddress <= req.request.bits.scAddr @[CScratchpad.scala 142:35]
        totalTx.memoryAddress <= req.request.bits.memAddr @[CScratchpad.scala 143:31]
        mem_tx_state <= UInt<2>("h1") @[CScratchpad.scala 144:22]
    else :
      node _T_12 = eq(UInt<2>("h1"), mem_tx_state) @[CScratchpad.scala 138:24]
      when _T_12 : @[CScratchpad.scala 138:24]
        node isBelowLimit = leq(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 149:47]
        node txEmitLengthLg_hi = bits(totalTx.memoryLength, 33, 32) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo = bits(totalTx.memoryLength, 31, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T = orr(txEmitLengthLg_hi) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_1 = or(txEmitLengthLg_hi, txEmitLengthLg_lo) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_1 = bits(_txEmitLengthLg_T_1, 31, 16) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_1 = bits(_txEmitLengthLg_T_1, 15, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_2 = orr(txEmitLengthLg_hi_1) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_3 = or(txEmitLengthLg_hi_1, txEmitLengthLg_lo_1) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_2 = bits(_txEmitLengthLg_T_3, 15, 8) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_2 = bits(_txEmitLengthLg_T_3, 7, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_4 = orr(txEmitLengthLg_hi_2) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_5 = or(txEmitLengthLg_hi_2, txEmitLengthLg_lo_2) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_3 = bits(_txEmitLengthLg_T_5, 7, 4) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_3 = bits(_txEmitLengthLg_T_5, 3, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_6 = orr(txEmitLengthLg_hi_3) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_7 = or(txEmitLengthLg_hi_3, txEmitLengthLg_lo_3) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_4 = bits(_txEmitLengthLg_T_7, 3, 2) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_4 = bits(_txEmitLengthLg_T_7, 1, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_8 = orr(txEmitLengthLg_hi_4) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_9 = or(txEmitLengthLg_hi_4, txEmitLengthLg_lo_4) @[OneHot.scala 32:28]
        node _txEmitLengthLg_T_10 = bits(_txEmitLengthLg_T_9, 1, 1) @[CircuitMath.scala 28:8]
        node _txEmitLengthLg_T_11 = cat(_txEmitLengthLg_T_8, _txEmitLengthLg_T_10) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_12 = cat(_txEmitLengthLg_T_6, _txEmitLengthLg_T_11) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_13 = cat(_txEmitLengthLg_T_4, _txEmitLengthLg_T_12) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_14 = cat(_txEmitLengthLg_T_2, _txEmitLengthLg_T_13) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_15 = cat(_txEmitLengthLg_T, _txEmitLengthLg_T_14) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_16 = mux(isBelowLimit, _txEmitLengthLg_T_15, UInt<3>("h6")) @[CScratchpad.scala 150:28]
        txEmitLengthLg <= _txEmitLengthLg_T_16 @[CScratchpad.scala 150:22]
        mem_out.a.valid <= reqAvailable @[CScratchpad.scala 151:23]
        node _T_13 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
        when _T_13 : @[CScratchpad.scala 152:28]
          reqIdleBits[reqChosen] <= UInt<1>("h0") @[CScratchpad.scala 153:32]
          req_cache[reqChosen].scratchpadAddress <= totalTx.scratchpadAddress @[CScratchpad.scala 154:48]
          node _req_cache_memoryLength_T = mux(isBelowLimit, totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 155:49]
          req_cache[reqChosen].memoryLength <= _req_cache_memoryLength_T @[CScratchpad.scala 155:43]
          node _totalTx_memoryLength_T = sub(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 156:54]
          node _totalTx_memoryLength_T_1 = tail(_totalTx_memoryLength_T, 1) @[CScratchpad.scala 156:54]
          totalTx.memoryLength <= _totalTx_memoryLength_T_1 @[CScratchpad.scala 156:30]
          node _totalTx_scratchpadAddress_T = add(totalTx.scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 157:64]
          node _totalTx_scratchpadAddress_T_1 = tail(_totalTx_scratchpadAddress_T, 1) @[CScratchpad.scala 157:64]
          totalTx.scratchpadAddress <= _totalTx_scratchpadAddress_T_1 @[CScratchpad.scala 157:35]
          node _totalTx_memoryAddress_T = add(totalTx.memoryAddress, UInt<7>("h40")) @[CScratchpad.scala 158:56]
          node _totalTx_memoryAddress_T_1 = tail(_totalTx_memoryAddress_T, 1) @[CScratchpad.scala 158:56]
          totalTx.memoryAddress <= _totalTx_memoryAddress_T_1 @[CScratchpad.scala 158:31]
          when isBelowLimit : @[CScratchpad.scala 159:28]
            mem_tx_state <= UInt<2>("h2") @[CScratchpad.scala 160:24]
      else :
        node _T_14 = eq(UInt<2>("h2"), mem_tx_state) @[CScratchpad.scala 138:24]
        when _T_14 : @[CScratchpad.scala 138:24]
          node _T_15 = and(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 166:33]
          node _T_16 = and(_T_15, reqIdleBits[2]) @[CScratchpad.scala 166:33]
          node _T_17 = and(_T_16, reqIdleBits[3]) @[CScratchpad.scala 166:33]
          node _T_18 = and(_T_17, reqIdleBits[4]) @[CScratchpad.scala 166:33]
          node _T_19 = and(_T_18, reqIdleBits[5]) @[CScratchpad.scala 166:33]
          node _T_20 = and(_T_19, reqIdleBits[6]) @[CScratchpad.scala 166:33]
          node _T_21 = and(_T_20, reqIdleBits[7]) @[CScratchpad.scala 166:33]
          node _T_22 = and(_T_21, reqIdleBits[8]) @[CScratchpad.scala 166:33]
          node _T_23 = and(_T_22, reqIdleBits[9]) @[CScratchpad.scala 166:33]
          node _T_24 = and(_T_23, reqIdleBits[10]) @[CScratchpad.scala 166:33]
          node _T_25 = and(_T_24, reqIdleBits[11]) @[CScratchpad.scala 166:33]
          node _T_26 = and(_T_25, reqIdleBits[12]) @[CScratchpad.scala 166:33]
          node _T_27 = and(_T_26, reqIdleBits[13]) @[CScratchpad.scala 166:33]
          node _T_28 = and(_T_27, reqIdleBits[14]) @[CScratchpad.scala 166:33]
          node _T_29 = and(_T_28, reqIdleBits[15]) @[CScratchpad.scala 166:33]
          when _T_29 : @[CScratchpad.scala 166:40]
            mem_tx_state <= UInt<2>("h0") @[CScratchpad.scala 167:22]
    loader.io.cache_block_in.valid <= mem_out.d.valid @[CScratchpad.scala 171:34]
    loader.io.cache_block_in.bits.dat <= mem_out.d.bits.data @[CScratchpad.scala 172:37]
    node _T_30 = geq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 174:40]
    when _T_30 : @[CScratchpad.scala 174:55]
      loader.io.cache_block_in.bits.len <= UInt<7>("h40") @[CScratchpad.scala 175:39]
    else :
      loader.io.cache_block_in.bits.len <= req_cache[mem_out.d.bits.source].memoryLength @[CScratchpad.scala 177:39]
    loader.io.cache_block_in.bits.idxBase <= req_cache[mem_out.d.bits.source].scratchpadAddress @[CScratchpad.scala 179:41]
    mem_out.d.ready <= loader.io.cache_block_in.ready @[CScratchpad.scala 180:19]
    loader.io.sp_write_out.ready <= UInt<1>("h1") @[CScratchpad.scala 181:32]
    node _T_31 = and(loader.io.cache_block_in.ready, loader.io.cache_block_in.valid) @[Decoupled.scala 51:35]
    when _T_31 : @[CScratchpad.scala 182:39]
      node _req_cache_scratchpadAddress_T = add(req_cache[mem_out.d.bits.source].scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 183:82]
      node _req_cache_scratchpadAddress_T_1 = tail(_req_cache_scratchpadAddress_T, 1) @[CScratchpad.scala 183:82]
      req_cache[mem_out.d.bits.source].scratchpadAddress <= _req_cache_scratchpadAddress_T_1 @[CScratchpad.scala 183:42]
    reg progressReg : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[CScratchpad.scala 187:28]
    reg perSourceProgress : UInt<10>[16], clock with :
      reset => (UInt<1>("h0"), perSourceProgress) @[CScratchpad.scala 188:30]
    reg loadersActive : UInt<1>[16], clock with :
      reset => (UInt<1>("h0"), loadersActive) @[CScratchpad.scala 189:26]
    node _T_32 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_32 : @[CScratchpad.scala 190:27]
      loadersActive[0] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[1] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[2] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[3] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[4] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[5] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[6] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[7] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[8] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[9] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[10] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[11] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[12] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[13] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[14] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[15] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
    node _T_33 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
    when _T_33 : @[CScratchpad.scala 193:25]
      loadersActive[reqChosen] <= UInt<1>("h1") @[CScratchpad.scala 194:30]
      perSourceProgress[reqChosen] <= totalTx.scratchpadAddress @[CScratchpad.scala 195:34]
    reg loaderSource : UInt<4>, clock with :
      reset => (UInt<1>("h0"), loaderSource) @[CScratchpad.scala 197:25]
    node _lowestActive_T = mux(loadersActive[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _lowestActive_T_1 = mux(loadersActive[13], UInt<4>("hd"), _lowestActive_T) @[Mux.scala 47:70]
    node _lowestActive_T_2 = mux(loadersActive[12], UInt<4>("hc"), _lowestActive_T_1) @[Mux.scala 47:70]
    node _lowestActive_T_3 = mux(loadersActive[11], UInt<4>("hb"), _lowestActive_T_2) @[Mux.scala 47:70]
    node _lowestActive_T_4 = mux(loadersActive[10], UInt<4>("ha"), _lowestActive_T_3) @[Mux.scala 47:70]
    node _lowestActive_T_5 = mux(loadersActive[9], UInt<4>("h9"), _lowestActive_T_4) @[Mux.scala 47:70]
    node _lowestActive_T_6 = mux(loadersActive[8], UInt<4>("h8"), _lowestActive_T_5) @[Mux.scala 47:70]
    node _lowestActive_T_7 = mux(loadersActive[7], UInt<3>("h7"), _lowestActive_T_6) @[Mux.scala 47:70]
    node _lowestActive_T_8 = mux(loadersActive[6], UInt<3>("h6"), _lowestActive_T_7) @[Mux.scala 47:70]
    node _lowestActive_T_9 = mux(loadersActive[5], UInt<3>("h5"), _lowestActive_T_8) @[Mux.scala 47:70]
    node _lowestActive_T_10 = mux(loadersActive[4], UInt<3>("h4"), _lowestActive_T_9) @[Mux.scala 47:70]
    node _lowestActive_T_11 = mux(loadersActive[3], UInt<2>("h3"), _lowestActive_T_10) @[Mux.scala 47:70]
    node _lowestActive_T_12 = mux(loadersActive[2], UInt<2>("h2"), _lowestActive_T_11) @[Mux.scala 47:70]
    node _lowestActive_T_13 = mux(loadersActive[1], UInt<1>("h1"), _lowestActive_T_12) @[Mux.scala 47:70]
    node lowestActive = mux(loadersActive[0], UInt<1>("h0"), _lowestActive_T_13) @[Mux.scala 47:70]
    node _haveActive_T = or(loadersActive[0], loadersActive[1]) @[CScratchpad.scala 199:43]
    node _haveActive_T_1 = or(_haveActive_T, loadersActive[2]) @[CScratchpad.scala 199:43]
    node _haveActive_T_2 = or(_haveActive_T_1, loadersActive[3]) @[CScratchpad.scala 199:43]
    node _haveActive_T_3 = or(_haveActive_T_2, loadersActive[4]) @[CScratchpad.scala 199:43]
    node _haveActive_T_4 = or(_haveActive_T_3, loadersActive[5]) @[CScratchpad.scala 199:43]
    node _haveActive_T_5 = or(_haveActive_T_4, loadersActive[6]) @[CScratchpad.scala 199:43]
    node _haveActive_T_6 = or(_haveActive_T_5, loadersActive[7]) @[CScratchpad.scala 199:43]
    node _haveActive_T_7 = or(_haveActive_T_6, loadersActive[8]) @[CScratchpad.scala 199:43]
    node _haveActive_T_8 = or(_haveActive_T_7, loadersActive[9]) @[CScratchpad.scala 199:43]
    node _haveActive_T_9 = or(_haveActive_T_8, loadersActive[10]) @[CScratchpad.scala 199:43]
    node _haveActive_T_10 = or(_haveActive_T_9, loadersActive[11]) @[CScratchpad.scala 199:43]
    node _haveActive_T_11 = or(_haveActive_T_10, loadersActive[12]) @[CScratchpad.scala 199:43]
    node _haveActive_T_12 = or(_haveActive_T_11, loadersActive[13]) @[CScratchpad.scala 199:43]
    node _haveActive_T_13 = or(_haveActive_T_12, loadersActive[14]) @[CScratchpad.scala 199:43]
    node _haveActive_T_14 = or(_haveActive_T_13, loadersActive[15]) @[CScratchpad.scala 199:43]
    node _haveActive_T_15 = eq(loader.io.cache_block_in.ready, UInt<1>("h0")) @[CScratchpad.scala 199:52]
    node haveActive = or(_haveActive_T_14, _haveActive_T_15) @[CScratchpad.scala 199:49]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[CScratchpad.scala 201:51]
    REG <= loader.io.cache_block_in.ready @[CScratchpad.scala 201:51]
    node _T_34 = eq(REG, UInt<1>("h0")) @[CScratchpad.scala 201:43]
    node _T_35 = and(loader.io.cache_block_in.ready, _T_34) @[CScratchpad.scala 201:40]
    when _T_35 : @[CScratchpad.scala 201:85]
      node _loadersActive_T = eq(reqIdleBits[loaderSource], UInt<1>("h0")) @[CScratchpad.scala 202:36]
      loadersActive[loaderSource] <= _loadersActive_T @[CScratchpad.scala 202:33]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[CScratchpad.scala 205:16]
    REG_1 <= haveActive @[CScratchpad.scala 205:16]
    when REG_1 : @[CScratchpad.scala 205:30]
      reg progressReg_REG : UInt, clock with :
        reset => (UInt<1>("h0"), progressReg_REG) @[CScratchpad.scala 206:45]
      progressReg_REG <= lowestActive @[CScratchpad.scala 206:45]
      node _progressReg_T = or(progressReg_REG, UInt<4>("h0"))
      node _progressReg_T_1 = bits(_progressReg_T, 3, 0)
      progressReg <= perSourceProgress[_progressReg_T_1] @[CScratchpad.scala 206:17]
    node _T_36 = and(mem_out.d.ready, mem_out.d.valid) @[Decoupled.scala 51:35]
    when _T_36 : @[CScratchpad.scala 209:24]
      node _req_cache_memoryLength_T_1 = sub(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 210:72]
      node _req_cache_memoryLength_T_2 = tail(_req_cache_memoryLength_T_1, 1) @[CScratchpad.scala 210:72]
      req_cache[mem_out.d.bits.source].memoryLength <= _req_cache_memoryLength_T_2 @[CScratchpad.scala 210:37]
      loaderSource <= mem_out.d.bits.source @[CScratchpad.scala 211:18]
      node _T_37 = leq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 212:42]
      when _T_37 : @[CScratchpad.scala 212:57]
        reqIdleBits[mem_out.d.bits.source] <= UInt<1>("h1") @[CScratchpad.scala 213:28]
    req.progress <= progressReg @[CScratchpad.scala 216:16]
    when loader.io.sp_write_out.valid : @[CScratchpad.scala 217:38]
      write mport MPORT = mem[loader.io.sp_write_out.bits.idx], clock
      MPORT <= loader.io.sp_write_out.bits.dat
      node _perSourceProgress_T = add(loader.io.sp_write_out.bits.idx, UInt<1>("h1")) @[CScratchpad.scala 219:72]
      perSourceProgress[loaderSource] <= _perSourceProgress_T @[CScratchpad.scala 219:37]
    node _T_38 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_38 : @[CScratchpad.scala 222:26]
      progressReg <= UInt<1>("h0") @[CScratchpad.scala 223:17]
      perSourceProgress[0] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[1] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[2] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[3] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[4] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[5] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[6] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[7] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[8] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[9] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[10] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[11] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[12] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[13] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[14] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[15] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
    when access.writeReq.valid : @[CScratchpad.scala 227:31]
      write mport MPORT_1 = mem[access.writeReq.bits.addr], clock
      MPORT_1 <= access.writeReq.bits.data
    req.writeback.ready <= UInt<1>("h0") @[CScratchpad.scala 288:25]

  module CScratchpadPackedSubwordLoader_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip cache_block_in : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<512>, len : UInt<7>, idxBase : UInt<6>}}, sp_write_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { dat : UInt<256>, idx : UInt<6>}}}

    reg subwordCounter_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    wire datCounter_value : UInt @[Counter.scala 61:73]
    datCounter_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg beat : UInt<512>, clock with :
      reset => (UInt<1>("h0"), beat) @[CScratchpadPackedSubwordLoader.scala 16:17]
    reg idxBase : UInt<6>, clock with :
      reset => (UInt<1>("h0"), idxBase) @[CScratchpadPackedSubwordLoader.scala 17:20]
    reg lenRemainingFromReq : UInt<7>, clock with :
      reset => (UInt<1>("h0"), lenRemainingFromReq) @[CScratchpadPackedSubwordLoader.scala 18:32]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 21:22]
    node _io_cache_block_in_ready_T = eq(state, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 22:36]
    io.cache_block_in.ready <= _io_cache_block_in_ready_T @[CScratchpadPackedSubwordLoader.scala 22:27]
    io.sp_write_out.bits.idx is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.bits.dat is invalid @[CScratchpadPackedSubwordLoader.scala 23:24]
    io.sp_write_out.valid <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 24:25]
    node _datSelection_T = bits(beat, 255, 0) @[CScratchpadPackedSubwordLoader.scala 29:9]
    wire datSelection : UInt<256>[1] @[CScratchpadPackedSubwordLoader.scala 26:29]
    datSelection[0] <= _datSelection_T @[CScratchpadPackedSubwordLoader.scala 26:29]
    node _T = eq(UInt<1>("h0"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
    when _T : @[CScratchpadPackedSubwordLoader.scala 32:17]
      node _T_1 = and(io.cache_block_in.ready, io.cache_block_in.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[CScratchpadPackedSubwordLoader.scala 34:36]
        state <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 35:15]
        beat <= io.cache_block_in.bits.dat @[CScratchpadPackedSubwordLoader.scala 36:14]
        idxBase <= io.cache_block_in.bits.idxBase @[CScratchpadPackedSubwordLoader.scala 37:17]
        lenRemainingFromReq <= io.cache_block_in.bits.len @[CScratchpadPackedSubwordLoader.scala 38:29]
        datCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
        subwordCounter_value <= UInt<1>("h0") @[Counter.scala 98:11]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[CScratchpadPackedSubwordLoader.scala 32:17]
      when _T_2 : @[CScratchpadPackedSubwordLoader.scala 32:17]
        io.sp_write_out.valid <= UInt<1>("h1") @[CScratchpadPackedSubwordLoader.scala 45:29]
        io.sp_write_out.bits.dat <= datSelection[UInt<1>("h0")] @[CScratchpadPackedSubwordLoader.scala 46:32]
        io.sp_write_out.bits.idx <= idxBase @[CScratchpadPackedSubwordLoader.scala 47:32]
        node _T_3 = and(io.sp_write_out.ready, io.sp_write_out.valid) @[Decoupled.scala 51:35]
        when _T_3 : @[CScratchpadPackedSubwordLoader.scala 48:34]
          node _idxBase_T = add(idxBase, UInt<1>("h1")) @[CScratchpadPackedSubwordLoader.scala 50:28]
          node _idxBase_T_1 = tail(_idxBase_T, 1) @[CScratchpadPackedSubwordLoader.scala 50:28]
          idxBase <= _idxBase_T_1 @[CScratchpadPackedSubwordLoader.scala 50:17]
          node _T_4 = eq(datCounter_value, UInt<1>("h0")) @[CScratchpadPackedSubwordLoader.scala 51:31]
          when _T_4 : @[CScratchpadPackedSubwordLoader.scala 51:59]
            node wrap = eq(subwordCounter_value, UInt<6>("h3f")) @[Counter.scala 73:24]
            node _value_T = add(subwordCounter_value, UInt<1>("h1")) @[Counter.scala 77:24]
            node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
            subwordCounter_value <= _value_T_1 @[Counter.scala 77:15]
            node _lenRemainingFromReq_T = sub(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 53:54]
            node _lenRemainingFromReq_T_1 = tail(_lenRemainingFromReq_T, 1) @[CScratchpadPackedSubwordLoader.scala 53:54]
            lenRemainingFromReq <= _lenRemainingFromReq_T_1 @[CScratchpadPackedSubwordLoader.scala 53:31]
            node _T_5 = eq(lenRemainingFromReq, UInt<6>("h20")) @[CScratchpadPackedSubwordLoader.scala 54:36]
            when _T_5 : @[CScratchpadPackedSubwordLoader.scala 54:60]
              state <= UInt<1>("h0") @[CScratchpadPackedSubwordLoader.scala 55:19]
            node _beat_T = shr(beat, 256) @[CScratchpadPackedSubwordLoader.scala 57:24]
            beat <= _beat_T @[CScratchpadPackedSubwordLoader.scala 57:16]


  module CScratchpad_3 :
    input clock : Clock
    input reset : Reset
    output auto : { mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output access : { flip readReq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<6>}, readRes : { valid : UInt<1>, bits : UInt<256>}, flip writeReq : { valid : UInt<1>, bits : { addr : UInt<6>, data : UInt<256>}}}
    output req : { progress : UInt<7>, flip request : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<6>, len : UInt<34>}}, flip writeback : { flip ready : UInt<1>, valid : UInt<1>, bits : { memAddr : UInt<34>, scAddr : UInt<6>, len : UInt<34>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    access is invalid
    req is invalid
    wire mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    mem_out is invalid @[Nodes.scala 1212:84]
    auto.mem_out <- mem_out @[LazyModule.scala 368:12]
    req.request.ready <= UInt<1>("h1") @[CScratchpad.scala 90:21]
    smem mem : UInt<256> [64] @[CScratchpad.scala 92:24]
    inst loader of CScratchpadPackedSubwordLoader_3 @[CScratchpad.scala 94:30]
    loader.clock <= clock
    loader.reset <= reset
    reg mem_tx_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CScratchpad.scala 102:37]
    reg access_readRes_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), access_readRes_valid_REG) @[CScratchpad.scala 85:30]
    access_readRes_valid_REG <= access.readReq.valid @[CScratchpad.scala 85:30]
    access.readRes.valid <= access_readRes_valid_REG @[CScratchpad.scala 103:24]
    wire _rval_WIRE : UInt @[CScratchpad.scala 104:30]
    _rval_WIRE is invalid @[CScratchpad.scala 104:30]
    when access.readReq.valid : @[CScratchpad.scala 104:30]
      _rval_WIRE <= access.readReq.bits @[CScratchpad.scala 104:30]
      node _rval_T = or(_rval_WIRE, UInt<6>("h0")) @[CScratchpad.scala 104:30]
      node _rval_T_1 = bits(_rval_T, 5, 0) @[CScratchpad.scala 104:30]
      read mport rval = mem[_rval_T_1], clock @[CScratchpad.scala 104:30]
    access.readRes.bits <= rval @[CScratchpad.scala 105:23]
    node _req_request_ready_T = eq(mem_tx_state, UInt<2>("h0")) @[CScratchpad.scala 108:37]
    req.request.ready <= _req_request_ready_T @[CScratchpad.scala 108:21]
    wire _reqIdleBits_WIRE : UInt<1>[16] @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[0] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[1] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[2] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[3] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[4] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[5] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[6] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[7] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[8] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[9] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[10] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[11] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[12] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[13] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[14] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    _reqIdleBits_WIRE[15] <= UInt<1>("h1") @[CScratchpad.scala 110:44]
    reg reqIdleBits : UInt<1>[16], clock with :
      reset => (reset, _reqIdleBits_WIRE) @[CScratchpad.scala 110:36]
    node _reqAvailable_T = or(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_1 = or(_reqAvailable_T, reqIdleBits[2]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_2 = or(_reqAvailable_T_1, reqIdleBits[3]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_3 = or(_reqAvailable_T_2, reqIdleBits[4]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_4 = or(_reqAvailable_T_3, reqIdleBits[5]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_5 = or(_reqAvailable_T_4, reqIdleBits[6]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_6 = or(_reqAvailable_T_5, reqIdleBits[7]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_7 = or(_reqAvailable_T_6, reqIdleBits[8]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_8 = or(_reqAvailable_T_7, reqIdleBits[9]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_9 = or(_reqAvailable_T_8, reqIdleBits[10]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_10 = or(_reqAvailable_T_9, reqIdleBits[11]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_11 = or(_reqAvailable_T_10, reqIdleBits[12]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_12 = or(_reqAvailable_T_11, reqIdleBits[13]) @[CScratchpad.scala 111:51]
    node _reqAvailable_T_13 = or(_reqAvailable_T_12, reqIdleBits[14]) @[CScratchpad.scala 111:51]
    node reqAvailable = or(_reqAvailable_T_13, reqIdleBits[15]) @[CScratchpad.scala 111:51]
    node _reqChosen_T = mux(reqIdleBits[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _reqChosen_T_1 = mux(reqIdleBits[13], UInt<4>("hd"), _reqChosen_T) @[Mux.scala 47:70]
    node _reqChosen_T_2 = mux(reqIdleBits[12], UInt<4>("hc"), _reqChosen_T_1) @[Mux.scala 47:70]
    node _reqChosen_T_3 = mux(reqIdleBits[11], UInt<4>("hb"), _reqChosen_T_2) @[Mux.scala 47:70]
    node _reqChosen_T_4 = mux(reqIdleBits[10], UInt<4>("ha"), _reqChosen_T_3) @[Mux.scala 47:70]
    node _reqChosen_T_5 = mux(reqIdleBits[9], UInt<4>("h9"), _reqChosen_T_4) @[Mux.scala 47:70]
    node _reqChosen_T_6 = mux(reqIdleBits[8], UInt<4>("h8"), _reqChosen_T_5) @[Mux.scala 47:70]
    node _reqChosen_T_7 = mux(reqIdleBits[7], UInt<3>("h7"), _reqChosen_T_6) @[Mux.scala 47:70]
    node _reqChosen_T_8 = mux(reqIdleBits[6], UInt<3>("h6"), _reqChosen_T_7) @[Mux.scala 47:70]
    node _reqChosen_T_9 = mux(reqIdleBits[5], UInt<3>("h5"), _reqChosen_T_8) @[Mux.scala 47:70]
    node _reqChosen_T_10 = mux(reqIdleBits[4], UInt<3>("h4"), _reqChosen_T_9) @[Mux.scala 47:70]
    node _reqChosen_T_11 = mux(reqIdleBits[3], UInt<2>("h3"), _reqChosen_T_10) @[Mux.scala 47:70]
    node _reqChosen_T_12 = mux(reqIdleBits[2], UInt<2>("h2"), _reqChosen_T_11) @[Mux.scala 47:70]
    node _reqChosen_T_13 = mux(reqIdleBits[1], UInt<1>("h1"), _reqChosen_T_12) @[Mux.scala 47:70]
    node reqChosen = mux(reqIdleBits[0], UInt<1>("h0"), _reqChosen_T_13) @[Mux.scala 47:70]
    reg req_cache : { scratchpadAddress : UInt<6>, memoryLength : UInt<16>}[16], clock with :
      reset => (UInt<1>("h0"), req_cache) @[CScratchpad.scala 114:30]
    node _T = sub(req.request.bits.len, UInt<1>("h1")) @[CScratchpad.scala 119:76]
    node _T_1 = tail(_T, 1) @[CScratchpad.scala 119:76]
    node _T_2 = and(req.request.bits.len, _T_1) @[CScratchpad.scala 119:52]
    node _T_3 = neq(_T_2, UInt<1>("h0")) @[CScratchpad.scala 119:84]
    node _T_4 = and(req.request.valid, _T_3) @[CScratchpad.scala 119:26]
    when _T_4 : @[CScratchpad.scala 119:94]
      node _T_5 = asUInt(reset) @[CScratchpad.scala 120:11]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[CScratchpad.scala 120:11]
      when _T_6 : @[CScratchpad.scala 120:11]
        printf(clock, UInt<1>("h1"), "Len is not pow2: %d\n", req.request.bits.len) : printf @[CScratchpad.scala 120:11]
      node _T_7 = asUInt(reset) @[CScratchpad.scala 121:11]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[CScratchpad.scala 121:11]
      when _T_8 : @[CScratchpad.scala 121:11]
        node _T_9 = eq(UInt<1>("h0"), UInt<1>("h0")) @[CScratchpad.scala 121:11]
        when _T_9 : @[CScratchpad.scala 121:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at CScratchpad.scala:121 assert(false.B)\n") : printf_1 @[CScratchpad.scala 121:11]
        assert(clock, UInt<1>("h0"), UInt<1>("h1"), "") : assert @[CScratchpad.scala 121:11]
    reg totalTx : { memoryAddress : UInt<34>, scratchpadAddress : UInt<6>, memoryLength : UInt<34>}, clock with :
      reset => (UInt<1>("h0"), totalTx) @[CScratchpad.scala 124:28]
    wire txEmitLengthLg : UInt<4> @[CScratchpad.scala 130:36]
    txEmitLengthLg <= UInt<1>("h0") @[CScratchpad.scala 131:18]
    node _x1_a_bits_legal_T = leq(UInt<1>("h0"), txEmitLengthLg) @[Parameters.scala 92:32]
    node _x1_a_bits_legal_T_1 = leq(txEmitLengthLg, UInt<3>("h6")) @[Parameters.scala 92:42]
    node _x1_a_bits_legal_T_2 = and(_x1_a_bits_legal_T, _x1_a_bits_legal_T_1) @[Parameters.scala 92:37]
    node _x1_a_bits_legal_T_3 = or(UInt<1>("h0"), _x1_a_bits_legal_T_2) @[Parameters.scala 670:31]
    node _x1_a_bits_legal_T_4 = xor(totalTx.memoryAddress, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _x1_a_bits_legal_T_5 = cvt(_x1_a_bits_legal_T_4) @[Parameters.scala 137:45]
    node _x1_a_bits_legal_T_6 = and(_x1_a_bits_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_7 = asSInt(_x1_a_bits_legal_T_6) @[Parameters.scala 137:50]
    node _x1_a_bits_legal_T_8 = eq(_x1_a_bits_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _x1_a_bits_legal_T_9 = and(_x1_a_bits_legal_T_3, _x1_a_bits_legal_T_8) @[Parameters.scala 670:56]
    node x1_a_bits_legal = or(UInt<1>("h0"), _x1_a_bits_legal_T_9) @[Parameters.scala 672:30]
    wire x1_a_bits_a : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 447:17]
    x1_a_bits_a is invalid @[Edges.scala 447:17]
    x1_a_bits_a.opcode <= UInt<3>("h4") @[Edges.scala 448:15]
    x1_a_bits_a.param <= UInt<1>("h0") @[Edges.scala 449:15]
    x1_a_bits_a.size <= txEmitLengthLg @[Edges.scala 450:15]
    x1_a_bits_a.source <= reqChosen @[Edges.scala 451:15]
    x1_a_bits_a.address <= totalTx.memoryAddress @[Edges.scala 452:15]
    node _x1_a_bits_a_mask_sizeOH_T = or(txEmitLengthLg, UInt<6>("h0")) @[Misc.scala 201:34]
    node x1_a_bits_a_mask_sizeOH_shiftAmount = bits(_x1_a_bits_a_mask_sizeOH_T, 2, 0) @[OneHot.scala 63:49]
    node _x1_a_bits_a_mask_sizeOH_T_1 = dshl(UInt<1>("h1"), x1_a_bits_a_mask_sizeOH_shiftAmount) @[OneHot.scala 64:12]
    node _x1_a_bits_a_mask_sizeOH_T_2 = bits(_x1_a_bits_a_mask_sizeOH_T_1, 5, 0) @[OneHot.scala 64:27]
    node x1_a_bits_a_mask_sizeOH = or(_x1_a_bits_a_mask_sizeOH_T_2, UInt<1>("h1")) @[Misc.scala 201:81]
    node _x1_a_bits_a_mask_T = geq(txEmitLengthLg, UInt<3>("h6")) @[Misc.scala 205:21]
    node x1_a_bits_a_mask_size = bits(x1_a_bits_a_mask_sizeOH, 5, 5) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit = bits(totalTx.memoryAddress, 5, 5) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit = eq(x1_a_bits_a_mask_bit, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq = and(UInt<1>("h1"), x1_a_bits_a_mask_nbit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_1 = and(UInt<1>("h1"), x1_a_bits_a_mask_bit) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_1 = and(x1_a_bits_a_mask_size, x1_a_bits_a_mask_eq_1) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_1 = or(_x1_a_bits_a_mask_T, _x1_a_bits_a_mask_acc_T_1) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_1 = bits(x1_a_bits_a_mask_sizeOH, 4, 4) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_1 = bits(totalTx.memoryAddress, 4, 4) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_1 = eq(x1_a_bits_a_mask_bit_1, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_2 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_2 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_2) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_2 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_2) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_3 = and(x1_a_bits_a_mask_eq, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_3 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_3) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_3 = or(x1_a_bits_a_mask_acc, _x1_a_bits_a_mask_acc_T_3) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_4 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_nbit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_4 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_4) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_4 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_4) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_5 = and(x1_a_bits_a_mask_eq_1, x1_a_bits_a_mask_bit_1) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_5 = and(x1_a_bits_a_mask_size_1, x1_a_bits_a_mask_eq_5) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_5 = or(x1_a_bits_a_mask_acc_1, _x1_a_bits_a_mask_acc_T_5) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_2 = bits(x1_a_bits_a_mask_sizeOH, 3, 3) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_2 = bits(totalTx.memoryAddress, 3, 3) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_2 = eq(x1_a_bits_a_mask_bit_2, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_6 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_6 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_6) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_6 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_6) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_7 = and(x1_a_bits_a_mask_eq_2, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_7 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_7) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_7 = or(x1_a_bits_a_mask_acc_2, _x1_a_bits_a_mask_acc_T_7) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_8 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_8 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_8) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_8 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_8) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_9 = and(x1_a_bits_a_mask_eq_3, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_9 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_9) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_9 = or(x1_a_bits_a_mask_acc_3, _x1_a_bits_a_mask_acc_T_9) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_10 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_10 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_10) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_10 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_10) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_11 = and(x1_a_bits_a_mask_eq_4, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_11 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_11) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_11 = or(x1_a_bits_a_mask_acc_4, _x1_a_bits_a_mask_acc_T_11) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_12 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_nbit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_12 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_12) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_12 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_12) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_13 = and(x1_a_bits_a_mask_eq_5, x1_a_bits_a_mask_bit_2) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_13 = and(x1_a_bits_a_mask_size_2, x1_a_bits_a_mask_eq_13) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_13 = or(x1_a_bits_a_mask_acc_5, _x1_a_bits_a_mask_acc_T_13) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_3 = bits(x1_a_bits_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_3 = bits(totalTx.memoryAddress, 2, 2) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_3 = eq(x1_a_bits_a_mask_bit_3, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_14 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_14 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_14) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_14 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_14) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_15 = and(x1_a_bits_a_mask_eq_6, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_15 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_15) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_15 = or(x1_a_bits_a_mask_acc_6, _x1_a_bits_a_mask_acc_T_15) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_16 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_16 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_16) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_16 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_16) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_17 = and(x1_a_bits_a_mask_eq_7, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_17 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_17) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_17 = or(x1_a_bits_a_mask_acc_7, _x1_a_bits_a_mask_acc_T_17) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_18 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_18 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_18) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_18 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_18) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_19 = and(x1_a_bits_a_mask_eq_8, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_19 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_19) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_19 = or(x1_a_bits_a_mask_acc_8, _x1_a_bits_a_mask_acc_T_19) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_20 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_20 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_20) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_20 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_20) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_21 = and(x1_a_bits_a_mask_eq_9, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_21 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_21) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_21 = or(x1_a_bits_a_mask_acc_9, _x1_a_bits_a_mask_acc_T_21) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_22 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_22 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_22) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_22 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_22) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_23 = and(x1_a_bits_a_mask_eq_10, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_23 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_23) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_23 = or(x1_a_bits_a_mask_acc_10, _x1_a_bits_a_mask_acc_T_23) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_24 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_24 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_24) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_24 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_24) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_25 = and(x1_a_bits_a_mask_eq_11, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_25 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_25) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_25 = or(x1_a_bits_a_mask_acc_11, _x1_a_bits_a_mask_acc_T_25) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_26 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_26 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_26) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_26 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_26) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_27 = and(x1_a_bits_a_mask_eq_12, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_27 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_27) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_27 = or(x1_a_bits_a_mask_acc_12, _x1_a_bits_a_mask_acc_T_27) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_28 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_nbit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_28 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_28) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_28 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_28) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_29 = and(x1_a_bits_a_mask_eq_13, x1_a_bits_a_mask_bit_3) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_29 = and(x1_a_bits_a_mask_size_3, x1_a_bits_a_mask_eq_29) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_29 = or(x1_a_bits_a_mask_acc_13, _x1_a_bits_a_mask_acc_T_29) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_4 = bits(x1_a_bits_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_4 = bits(totalTx.memoryAddress, 1, 1) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_4 = eq(x1_a_bits_a_mask_bit_4, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_30 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_30 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_30) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_30 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_30) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_31 = and(x1_a_bits_a_mask_eq_14, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_31 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_31) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_31 = or(x1_a_bits_a_mask_acc_14, _x1_a_bits_a_mask_acc_T_31) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_32 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_32 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_32) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_32 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_32) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_33 = and(x1_a_bits_a_mask_eq_15, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_33 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_33) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_33 = or(x1_a_bits_a_mask_acc_15, _x1_a_bits_a_mask_acc_T_33) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_34 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_34 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_34) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_34 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_34) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_35 = and(x1_a_bits_a_mask_eq_16, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_35 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_35) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_35 = or(x1_a_bits_a_mask_acc_16, _x1_a_bits_a_mask_acc_T_35) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_36 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_36 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_36) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_36 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_36) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_37 = and(x1_a_bits_a_mask_eq_17, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_37 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_37) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_37 = or(x1_a_bits_a_mask_acc_17, _x1_a_bits_a_mask_acc_T_37) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_38 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_38 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_38) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_38 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_38) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_39 = and(x1_a_bits_a_mask_eq_18, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_39 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_39) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_39 = or(x1_a_bits_a_mask_acc_18, _x1_a_bits_a_mask_acc_T_39) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_40 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_40 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_40) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_40 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_40) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_41 = and(x1_a_bits_a_mask_eq_19, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_41 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_41) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_41 = or(x1_a_bits_a_mask_acc_19, _x1_a_bits_a_mask_acc_T_41) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_42 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_42 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_42) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_42 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_42) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_43 = and(x1_a_bits_a_mask_eq_20, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_43 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_43) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_43 = or(x1_a_bits_a_mask_acc_20, _x1_a_bits_a_mask_acc_T_43) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_44 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_44 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_44) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_44 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_44) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_45 = and(x1_a_bits_a_mask_eq_21, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_45 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_45) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_45 = or(x1_a_bits_a_mask_acc_21, _x1_a_bits_a_mask_acc_T_45) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_46 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_46 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_46) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_46 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_46) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_47 = and(x1_a_bits_a_mask_eq_22, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_47 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_47) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_47 = or(x1_a_bits_a_mask_acc_22, _x1_a_bits_a_mask_acc_T_47) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_48 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_48 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_48) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_48 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_48) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_49 = and(x1_a_bits_a_mask_eq_23, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_49 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_49) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_49 = or(x1_a_bits_a_mask_acc_23, _x1_a_bits_a_mask_acc_T_49) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_50 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_50 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_50) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_50 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_50) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_51 = and(x1_a_bits_a_mask_eq_24, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_51 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_51) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_51 = or(x1_a_bits_a_mask_acc_24, _x1_a_bits_a_mask_acc_T_51) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_52 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_52 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_52) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_52 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_52) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_53 = and(x1_a_bits_a_mask_eq_25, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_53 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_53) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_53 = or(x1_a_bits_a_mask_acc_25, _x1_a_bits_a_mask_acc_T_53) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_54 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_54 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_54) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_54 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_54) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_55 = and(x1_a_bits_a_mask_eq_26, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_55 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_55) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_55 = or(x1_a_bits_a_mask_acc_26, _x1_a_bits_a_mask_acc_T_55) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_56 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_56 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_56) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_56 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_56) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_57 = and(x1_a_bits_a_mask_eq_27, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_57 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_57) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_57 = or(x1_a_bits_a_mask_acc_27, _x1_a_bits_a_mask_acc_T_57) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_58 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_58 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_58) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_58 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_58) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_59 = and(x1_a_bits_a_mask_eq_28, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_59 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_59) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_59 = or(x1_a_bits_a_mask_acc_28, _x1_a_bits_a_mask_acc_T_59) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_60 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_nbit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_60 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_60) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_60 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_60) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_61 = and(x1_a_bits_a_mask_eq_29, x1_a_bits_a_mask_bit_4) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_61 = and(x1_a_bits_a_mask_size_4, x1_a_bits_a_mask_eq_61) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_61 = or(x1_a_bits_a_mask_acc_29, _x1_a_bits_a_mask_acc_T_61) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_size_5 = bits(x1_a_bits_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node x1_a_bits_a_mask_bit_5 = bits(totalTx.memoryAddress, 0, 0) @[Misc.scala 209:26]
    node x1_a_bits_a_mask_nbit_5 = eq(x1_a_bits_a_mask_bit_5, UInt<1>("h0")) @[Misc.scala 210:20]
    node x1_a_bits_a_mask_eq_62 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_62 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_62) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_62 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_62) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_63 = and(x1_a_bits_a_mask_eq_30, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_63 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_63) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_63 = or(x1_a_bits_a_mask_acc_30, _x1_a_bits_a_mask_acc_T_63) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_64 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_64 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_64) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_64 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_64) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_65 = and(x1_a_bits_a_mask_eq_31, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_65 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_65) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_65 = or(x1_a_bits_a_mask_acc_31, _x1_a_bits_a_mask_acc_T_65) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_66 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_66 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_66) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_66 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_66) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_67 = and(x1_a_bits_a_mask_eq_32, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_67 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_67) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_67 = or(x1_a_bits_a_mask_acc_32, _x1_a_bits_a_mask_acc_T_67) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_68 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_68 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_68) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_68 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_68) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_69 = and(x1_a_bits_a_mask_eq_33, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_69 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_69) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_69 = or(x1_a_bits_a_mask_acc_33, _x1_a_bits_a_mask_acc_T_69) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_70 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_70 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_70) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_70 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_70) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_71 = and(x1_a_bits_a_mask_eq_34, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_71 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_71) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_71 = or(x1_a_bits_a_mask_acc_34, _x1_a_bits_a_mask_acc_T_71) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_72 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_72 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_72) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_72 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_72) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_73 = and(x1_a_bits_a_mask_eq_35, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_73 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_73) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_73 = or(x1_a_bits_a_mask_acc_35, _x1_a_bits_a_mask_acc_T_73) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_74 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_74 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_74) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_74 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_74) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_75 = and(x1_a_bits_a_mask_eq_36, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_75 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_75) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_75 = or(x1_a_bits_a_mask_acc_36, _x1_a_bits_a_mask_acc_T_75) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_76 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_76 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_76) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_76 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_76) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_77 = and(x1_a_bits_a_mask_eq_37, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_77 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_77) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_77 = or(x1_a_bits_a_mask_acc_37, _x1_a_bits_a_mask_acc_T_77) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_78 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_78 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_78) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_78 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_78) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_79 = and(x1_a_bits_a_mask_eq_38, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_79 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_79) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_79 = or(x1_a_bits_a_mask_acc_38, _x1_a_bits_a_mask_acc_T_79) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_80 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_80 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_80) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_80 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_80) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_81 = and(x1_a_bits_a_mask_eq_39, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_81 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_81) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_81 = or(x1_a_bits_a_mask_acc_39, _x1_a_bits_a_mask_acc_T_81) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_82 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_82 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_82) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_82 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_82) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_83 = and(x1_a_bits_a_mask_eq_40, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_83 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_83) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_83 = or(x1_a_bits_a_mask_acc_40, _x1_a_bits_a_mask_acc_T_83) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_84 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_84 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_84) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_84 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_84) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_85 = and(x1_a_bits_a_mask_eq_41, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_85 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_85) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_85 = or(x1_a_bits_a_mask_acc_41, _x1_a_bits_a_mask_acc_T_85) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_86 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_86 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_86) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_86 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_86) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_87 = and(x1_a_bits_a_mask_eq_42, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_87 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_87) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_87 = or(x1_a_bits_a_mask_acc_42, _x1_a_bits_a_mask_acc_T_87) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_88 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_88 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_88) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_88 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_88) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_89 = and(x1_a_bits_a_mask_eq_43, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_89 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_89) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_89 = or(x1_a_bits_a_mask_acc_43, _x1_a_bits_a_mask_acc_T_89) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_90 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_90 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_90) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_90 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_90) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_91 = and(x1_a_bits_a_mask_eq_44, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_91 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_91) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_91 = or(x1_a_bits_a_mask_acc_44, _x1_a_bits_a_mask_acc_T_91) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_92 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_92 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_92) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_92 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_92) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_93 = and(x1_a_bits_a_mask_eq_45, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_93 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_93) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_93 = or(x1_a_bits_a_mask_acc_45, _x1_a_bits_a_mask_acc_T_93) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_94 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_94 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_94) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_94 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_94) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_95 = and(x1_a_bits_a_mask_eq_46, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_95 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_95) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_95 = or(x1_a_bits_a_mask_acc_46, _x1_a_bits_a_mask_acc_T_95) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_96 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_96 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_96) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_96 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_96) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_97 = and(x1_a_bits_a_mask_eq_47, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_97 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_97) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_97 = or(x1_a_bits_a_mask_acc_47, _x1_a_bits_a_mask_acc_T_97) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_98 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_98 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_98) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_98 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_98) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_99 = and(x1_a_bits_a_mask_eq_48, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_99 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_99) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_99 = or(x1_a_bits_a_mask_acc_48, _x1_a_bits_a_mask_acc_T_99) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_100 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_100 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_100) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_100 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_100) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_101 = and(x1_a_bits_a_mask_eq_49, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_101 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_101) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_101 = or(x1_a_bits_a_mask_acc_49, _x1_a_bits_a_mask_acc_T_101) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_102 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_102 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_102) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_102 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_102) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_103 = and(x1_a_bits_a_mask_eq_50, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_103 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_103) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_103 = or(x1_a_bits_a_mask_acc_50, _x1_a_bits_a_mask_acc_T_103) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_104 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_104 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_104) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_104 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_104) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_105 = and(x1_a_bits_a_mask_eq_51, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_105 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_105) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_105 = or(x1_a_bits_a_mask_acc_51, _x1_a_bits_a_mask_acc_T_105) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_106 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_106 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_106) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_106 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_106) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_107 = and(x1_a_bits_a_mask_eq_52, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_107 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_107) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_107 = or(x1_a_bits_a_mask_acc_52, _x1_a_bits_a_mask_acc_T_107) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_108 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_108 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_108) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_108 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_108) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_109 = and(x1_a_bits_a_mask_eq_53, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_109 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_109) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_109 = or(x1_a_bits_a_mask_acc_53, _x1_a_bits_a_mask_acc_T_109) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_110 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_110 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_110) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_110 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_110) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_111 = and(x1_a_bits_a_mask_eq_54, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_111 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_111) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_111 = or(x1_a_bits_a_mask_acc_54, _x1_a_bits_a_mask_acc_T_111) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_112 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_112 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_112) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_112 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_112) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_113 = and(x1_a_bits_a_mask_eq_55, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_113 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_113) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_113 = or(x1_a_bits_a_mask_acc_55, _x1_a_bits_a_mask_acc_T_113) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_114 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_114 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_114) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_114 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_114) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_115 = and(x1_a_bits_a_mask_eq_56, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_115 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_115) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_115 = or(x1_a_bits_a_mask_acc_56, _x1_a_bits_a_mask_acc_T_115) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_116 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_116 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_116) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_116 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_116) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_117 = and(x1_a_bits_a_mask_eq_57, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_117 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_117) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_117 = or(x1_a_bits_a_mask_acc_57, _x1_a_bits_a_mask_acc_T_117) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_118 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_118 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_118) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_118 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_118) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_119 = and(x1_a_bits_a_mask_eq_58, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_119 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_119) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_119 = or(x1_a_bits_a_mask_acc_58, _x1_a_bits_a_mask_acc_T_119) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_120 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_120 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_120) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_120 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_120) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_121 = and(x1_a_bits_a_mask_eq_59, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_121 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_121) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_121 = or(x1_a_bits_a_mask_acc_59, _x1_a_bits_a_mask_acc_T_121) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_122 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_122 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_122) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_122 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_122) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_123 = and(x1_a_bits_a_mask_eq_60, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_123 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_123) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_123 = or(x1_a_bits_a_mask_acc_60, _x1_a_bits_a_mask_acc_T_123) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_124 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_nbit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_124 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_124) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_124 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_124) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_eq_125 = and(x1_a_bits_a_mask_eq_61, x1_a_bits_a_mask_bit_5) @[Misc.scala 213:27]
    node _x1_a_bits_a_mask_acc_T_125 = and(x1_a_bits_a_mask_size_5, x1_a_bits_a_mask_eq_125) @[Misc.scala 214:38]
    node x1_a_bits_a_mask_acc_125 = or(x1_a_bits_a_mask_acc_61, _x1_a_bits_a_mask_acc_T_125) @[Misc.scala 214:29]
    node x1_a_bits_a_mask_lo_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_63, x1_a_bits_a_mask_acc_62) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_65, x1_a_bits_a_mask_acc_64) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_67, x1_a_bits_a_mask_acc_66) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_69, x1_a_bits_a_mask_acc_68) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_lo = cat(x1_a_bits_a_mask_lo_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_71, x1_a_bits_a_mask_acc_70) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_73, x1_a_bits_a_mask_acc_72) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_lo = cat(x1_a_bits_a_mask_lo_lo_hi_lo_hi, x1_a_bits_a_mask_lo_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_75, x1_a_bits_a_mask_acc_74) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_77, x1_a_bits_a_mask_acc_76) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi_hi, x1_a_bits_a_mask_lo_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo_hi = cat(x1_a_bits_a_mask_lo_lo_hi_hi, x1_a_bits_a_mask_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_lo = cat(x1_a_bits_a_mask_lo_lo_hi, x1_a_bits_a_mask_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_79, x1_a_bits_a_mask_acc_78) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_81, x1_a_bits_a_mask_acc_80) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_lo = cat(x1_a_bits_a_mask_lo_hi_lo_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_83, x1_a_bits_a_mask_acc_82) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_85, x1_a_bits_a_mask_acc_84) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo_hi = cat(x1_a_bits_a_mask_lo_hi_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_lo = cat(x1_a_bits_a_mask_lo_hi_lo_hi, x1_a_bits_a_mask_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_87, x1_a_bits_a_mask_acc_86) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_89, x1_a_bits_a_mask_acc_88) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_lo = cat(x1_a_bits_a_mask_lo_hi_hi_lo_hi, x1_a_bits_a_mask_lo_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_91, x1_a_bits_a_mask_acc_90) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_93, x1_a_bits_a_mask_acc_92) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi_hi = cat(x1_a_bits_a_mask_lo_hi_hi_hi, x1_a_bits_a_mask_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo_hi = cat(x1_a_bits_a_mask_lo_hi_hi, x1_a_bits_a_mask_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_lo = cat(x1_a_bits_a_mask_lo_hi, x1_a_bits_a_mask_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_lo = cat(x1_a_bits_a_mask_acc_95, x1_a_bits_a_mask_acc_94) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo_hi = cat(x1_a_bits_a_mask_acc_97, x1_a_bits_a_mask_acc_96) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_lo = cat(x1_a_bits_a_mask_acc_99, x1_a_bits_a_mask_acc_98) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi_hi = cat(x1_a_bits_a_mask_acc_101, x1_a_bits_a_mask_acc_100) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo_hi = cat(x1_a_bits_a_mask_hi_lo_lo_hi_hi, x1_a_bits_a_mask_hi_lo_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_lo = cat(x1_a_bits_a_mask_hi_lo_lo_hi, x1_a_bits_a_mask_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_lo = cat(x1_a_bits_a_mask_acc_103, x1_a_bits_a_mask_acc_102) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo_hi = cat(x1_a_bits_a_mask_acc_105, x1_a_bits_a_mask_acc_104) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi_lo_hi, x1_a_bits_a_mask_hi_lo_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_lo = cat(x1_a_bits_a_mask_acc_107, x1_a_bits_a_mask_acc_106) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi_hi = cat(x1_a_bits_a_mask_acc_109, x1_a_bits_a_mask_acc_108) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi_hi, x1_a_bits_a_mask_hi_lo_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo_hi = cat(x1_a_bits_a_mask_hi_lo_hi_hi, x1_a_bits_a_mask_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_lo = cat(x1_a_bits_a_mask_hi_lo_hi, x1_a_bits_a_mask_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_lo = cat(x1_a_bits_a_mask_acc_111, x1_a_bits_a_mask_acc_110) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo_hi = cat(x1_a_bits_a_mask_acc_113, x1_a_bits_a_mask_acc_112) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_lo = cat(x1_a_bits_a_mask_hi_hi_lo_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_lo = cat(x1_a_bits_a_mask_acc_115, x1_a_bits_a_mask_acc_114) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi_hi = cat(x1_a_bits_a_mask_acc_117, x1_a_bits_a_mask_acc_116) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo_hi = cat(x1_a_bits_a_mask_hi_hi_lo_hi_hi, x1_a_bits_a_mask_hi_hi_lo_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_lo = cat(x1_a_bits_a_mask_acc_119, x1_a_bits_a_mask_acc_118) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo_hi = cat(x1_a_bits_a_mask_acc_121, x1_a_bits_a_mask_acc_120) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_lo = cat(x1_a_bits_a_mask_hi_hi_hi_lo_hi, x1_a_bits_a_mask_hi_hi_hi_lo_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_lo = cat(x1_a_bits_a_mask_acc_123, x1_a_bits_a_mask_acc_122) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi_hi = cat(x1_a_bits_a_mask_acc_125, x1_a_bits_a_mask_acc_124) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi_hi, x1_a_bits_a_mask_hi_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi_hi = cat(x1_a_bits_a_mask_hi_hi_hi, x1_a_bits_a_mask_hi_hi_lo) @[Cat.scala 33:92]
    node x1_a_bits_a_mask_hi = cat(x1_a_bits_a_mask_hi_hi, x1_a_bits_a_mask_hi_lo) @[Cat.scala 33:92]
    node _x1_a_bits_a_mask_T_1 = cat(x1_a_bits_a_mask_hi, x1_a_bits_a_mask_lo) @[Cat.scala 33:92]
    x1_a_bits_a.mask <= _x1_a_bits_a_mask_T_1 @[Edges.scala 453:15]
    x1_a_bits_a.data <= UInt<1>("h0") @[Edges.scala 454:15]
    x1_a_bits_a.corrupt <= UInt<1>("h0") @[Edges.scala 455:15]
    mem_out.a.bits <= x1_a_bits_a @[CScratchpad.scala 132:18]
    node _x1_a_valid_T = eq(mem_tx_state, UInt<2>("h1")) @[CScratchpad.scala 136:35]
    mem_out.a.valid <= _x1_a_valid_T @[CScratchpad.scala 136:19]
    node _T_10 = eq(UInt<2>("h0"), mem_tx_state) @[CScratchpad.scala 138:24]
    when _T_10 : @[CScratchpad.scala 138:24]
      node _T_11 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
      when _T_11 : @[CScratchpad.scala 140:30]
        totalTx.memoryLength <= req.request.bits.len @[CScratchpad.scala 141:30]
        totalTx.scratchpadAddress <= req.request.bits.scAddr @[CScratchpad.scala 142:35]
        totalTx.memoryAddress <= req.request.bits.memAddr @[CScratchpad.scala 143:31]
        mem_tx_state <= UInt<2>("h1") @[CScratchpad.scala 144:22]
    else :
      node _T_12 = eq(UInt<2>("h1"), mem_tx_state) @[CScratchpad.scala 138:24]
      when _T_12 : @[CScratchpad.scala 138:24]
        node isBelowLimit = leq(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 149:47]
        node txEmitLengthLg_hi = bits(totalTx.memoryLength, 33, 32) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo = bits(totalTx.memoryLength, 31, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T = orr(txEmitLengthLg_hi) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_1 = or(txEmitLengthLg_hi, txEmitLengthLg_lo) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_1 = bits(_txEmitLengthLg_T_1, 31, 16) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_1 = bits(_txEmitLengthLg_T_1, 15, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_2 = orr(txEmitLengthLg_hi_1) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_3 = or(txEmitLengthLg_hi_1, txEmitLengthLg_lo_1) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_2 = bits(_txEmitLengthLg_T_3, 15, 8) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_2 = bits(_txEmitLengthLg_T_3, 7, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_4 = orr(txEmitLengthLg_hi_2) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_5 = or(txEmitLengthLg_hi_2, txEmitLengthLg_lo_2) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_3 = bits(_txEmitLengthLg_T_5, 7, 4) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_3 = bits(_txEmitLengthLg_T_5, 3, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_6 = orr(txEmitLengthLg_hi_3) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_7 = or(txEmitLengthLg_hi_3, txEmitLengthLg_lo_3) @[OneHot.scala 32:28]
        node txEmitLengthLg_hi_4 = bits(_txEmitLengthLg_T_7, 3, 2) @[OneHot.scala 30:18]
        node txEmitLengthLg_lo_4 = bits(_txEmitLengthLg_T_7, 1, 0) @[OneHot.scala 31:18]
        node _txEmitLengthLg_T_8 = orr(txEmitLengthLg_hi_4) @[OneHot.scala 32:14]
        node _txEmitLengthLg_T_9 = or(txEmitLengthLg_hi_4, txEmitLengthLg_lo_4) @[OneHot.scala 32:28]
        node _txEmitLengthLg_T_10 = bits(_txEmitLengthLg_T_9, 1, 1) @[CircuitMath.scala 28:8]
        node _txEmitLengthLg_T_11 = cat(_txEmitLengthLg_T_8, _txEmitLengthLg_T_10) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_12 = cat(_txEmitLengthLg_T_6, _txEmitLengthLg_T_11) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_13 = cat(_txEmitLengthLg_T_4, _txEmitLengthLg_T_12) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_14 = cat(_txEmitLengthLg_T_2, _txEmitLengthLg_T_13) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_15 = cat(_txEmitLengthLg_T, _txEmitLengthLg_T_14) @[Cat.scala 33:92]
        node _txEmitLengthLg_T_16 = mux(isBelowLimit, _txEmitLengthLg_T_15, UInt<3>("h6")) @[CScratchpad.scala 150:28]
        txEmitLengthLg <= _txEmitLengthLg_T_16 @[CScratchpad.scala 150:22]
        mem_out.a.valid <= reqAvailable @[CScratchpad.scala 151:23]
        node _T_13 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
        when _T_13 : @[CScratchpad.scala 152:28]
          reqIdleBits[reqChosen] <= UInt<1>("h0") @[CScratchpad.scala 153:32]
          req_cache[reqChosen].scratchpadAddress <= totalTx.scratchpadAddress @[CScratchpad.scala 154:48]
          node _req_cache_memoryLength_T = mux(isBelowLimit, totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 155:49]
          req_cache[reqChosen].memoryLength <= _req_cache_memoryLength_T @[CScratchpad.scala 155:43]
          node _totalTx_memoryLength_T = sub(totalTx.memoryLength, UInt<7>("h40")) @[CScratchpad.scala 156:54]
          node _totalTx_memoryLength_T_1 = tail(_totalTx_memoryLength_T, 1) @[CScratchpad.scala 156:54]
          totalTx.memoryLength <= _totalTx_memoryLength_T_1 @[CScratchpad.scala 156:30]
          node _totalTx_scratchpadAddress_T = add(totalTx.scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 157:64]
          node _totalTx_scratchpadAddress_T_1 = tail(_totalTx_scratchpadAddress_T, 1) @[CScratchpad.scala 157:64]
          totalTx.scratchpadAddress <= _totalTx_scratchpadAddress_T_1 @[CScratchpad.scala 157:35]
          node _totalTx_memoryAddress_T = add(totalTx.memoryAddress, UInt<7>("h40")) @[CScratchpad.scala 158:56]
          node _totalTx_memoryAddress_T_1 = tail(_totalTx_memoryAddress_T, 1) @[CScratchpad.scala 158:56]
          totalTx.memoryAddress <= _totalTx_memoryAddress_T_1 @[CScratchpad.scala 158:31]
          when isBelowLimit : @[CScratchpad.scala 159:28]
            mem_tx_state <= UInt<2>("h2") @[CScratchpad.scala 160:24]
      else :
        node _T_14 = eq(UInt<2>("h2"), mem_tx_state) @[CScratchpad.scala 138:24]
        when _T_14 : @[CScratchpad.scala 138:24]
          node _T_15 = and(reqIdleBits[0], reqIdleBits[1]) @[CScratchpad.scala 166:33]
          node _T_16 = and(_T_15, reqIdleBits[2]) @[CScratchpad.scala 166:33]
          node _T_17 = and(_T_16, reqIdleBits[3]) @[CScratchpad.scala 166:33]
          node _T_18 = and(_T_17, reqIdleBits[4]) @[CScratchpad.scala 166:33]
          node _T_19 = and(_T_18, reqIdleBits[5]) @[CScratchpad.scala 166:33]
          node _T_20 = and(_T_19, reqIdleBits[6]) @[CScratchpad.scala 166:33]
          node _T_21 = and(_T_20, reqIdleBits[7]) @[CScratchpad.scala 166:33]
          node _T_22 = and(_T_21, reqIdleBits[8]) @[CScratchpad.scala 166:33]
          node _T_23 = and(_T_22, reqIdleBits[9]) @[CScratchpad.scala 166:33]
          node _T_24 = and(_T_23, reqIdleBits[10]) @[CScratchpad.scala 166:33]
          node _T_25 = and(_T_24, reqIdleBits[11]) @[CScratchpad.scala 166:33]
          node _T_26 = and(_T_25, reqIdleBits[12]) @[CScratchpad.scala 166:33]
          node _T_27 = and(_T_26, reqIdleBits[13]) @[CScratchpad.scala 166:33]
          node _T_28 = and(_T_27, reqIdleBits[14]) @[CScratchpad.scala 166:33]
          node _T_29 = and(_T_28, reqIdleBits[15]) @[CScratchpad.scala 166:33]
          when _T_29 : @[CScratchpad.scala 166:40]
            mem_tx_state <= UInt<2>("h0") @[CScratchpad.scala 167:22]
    loader.io.cache_block_in.valid <= mem_out.d.valid @[CScratchpad.scala 171:34]
    loader.io.cache_block_in.bits.dat <= mem_out.d.bits.data @[CScratchpad.scala 172:37]
    node _T_30 = geq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 174:40]
    when _T_30 : @[CScratchpad.scala 174:55]
      loader.io.cache_block_in.bits.len <= UInt<7>("h40") @[CScratchpad.scala 175:39]
    else :
      loader.io.cache_block_in.bits.len <= req_cache[mem_out.d.bits.source].memoryLength @[CScratchpad.scala 177:39]
    loader.io.cache_block_in.bits.idxBase <= req_cache[mem_out.d.bits.source].scratchpadAddress @[CScratchpad.scala 179:41]
    mem_out.d.ready <= loader.io.cache_block_in.ready @[CScratchpad.scala 180:19]
    loader.io.sp_write_out.ready <= UInt<1>("h1") @[CScratchpad.scala 181:32]
    node _T_31 = and(loader.io.cache_block_in.ready, loader.io.cache_block_in.valid) @[Decoupled.scala 51:35]
    when _T_31 : @[CScratchpad.scala 182:39]
      node _req_cache_scratchpadAddress_T = add(req_cache[mem_out.d.bits.source].scratchpadAddress, UInt<2>("h2")) @[CScratchpad.scala 183:82]
      node _req_cache_scratchpadAddress_T_1 = tail(_req_cache_scratchpadAddress_T, 1) @[CScratchpad.scala 183:82]
      req_cache[mem_out.d.bits.source].scratchpadAddress <= _req_cache_scratchpadAddress_T_1 @[CScratchpad.scala 183:42]
    reg progressReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[CScratchpad.scala 187:28]
    reg perSourceProgress : UInt<7>[16], clock with :
      reset => (UInt<1>("h0"), perSourceProgress) @[CScratchpad.scala 188:30]
    reg loadersActive : UInt<1>[16], clock with :
      reset => (UInt<1>("h0"), loadersActive) @[CScratchpad.scala 189:26]
    node _T_32 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_32 : @[CScratchpad.scala 190:27]
      loadersActive[0] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[1] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[2] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[3] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[4] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[5] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[6] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[7] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[8] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[9] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[10] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[11] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[12] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[13] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[14] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
      loadersActive[15] <= UInt<1>("h0") @[CScratchpad.scala 191:29]
    node _T_33 = and(mem_out.a.ready, mem_out.a.valid) @[Decoupled.scala 51:35]
    when _T_33 : @[CScratchpad.scala 193:25]
      loadersActive[reqChosen] <= UInt<1>("h1") @[CScratchpad.scala 194:30]
      perSourceProgress[reqChosen] <= totalTx.scratchpadAddress @[CScratchpad.scala 195:34]
    reg loaderSource : UInt<4>, clock with :
      reset => (UInt<1>("h0"), loaderSource) @[CScratchpad.scala 197:25]
    node _lowestActive_T = mux(loadersActive[14], UInt<4>("he"), UInt<4>("hf")) @[Mux.scala 47:70]
    node _lowestActive_T_1 = mux(loadersActive[13], UInt<4>("hd"), _lowestActive_T) @[Mux.scala 47:70]
    node _lowestActive_T_2 = mux(loadersActive[12], UInt<4>("hc"), _lowestActive_T_1) @[Mux.scala 47:70]
    node _lowestActive_T_3 = mux(loadersActive[11], UInt<4>("hb"), _lowestActive_T_2) @[Mux.scala 47:70]
    node _lowestActive_T_4 = mux(loadersActive[10], UInt<4>("ha"), _lowestActive_T_3) @[Mux.scala 47:70]
    node _lowestActive_T_5 = mux(loadersActive[9], UInt<4>("h9"), _lowestActive_T_4) @[Mux.scala 47:70]
    node _lowestActive_T_6 = mux(loadersActive[8], UInt<4>("h8"), _lowestActive_T_5) @[Mux.scala 47:70]
    node _lowestActive_T_7 = mux(loadersActive[7], UInt<3>("h7"), _lowestActive_T_6) @[Mux.scala 47:70]
    node _lowestActive_T_8 = mux(loadersActive[6], UInt<3>("h6"), _lowestActive_T_7) @[Mux.scala 47:70]
    node _lowestActive_T_9 = mux(loadersActive[5], UInt<3>("h5"), _lowestActive_T_8) @[Mux.scala 47:70]
    node _lowestActive_T_10 = mux(loadersActive[4], UInt<3>("h4"), _lowestActive_T_9) @[Mux.scala 47:70]
    node _lowestActive_T_11 = mux(loadersActive[3], UInt<2>("h3"), _lowestActive_T_10) @[Mux.scala 47:70]
    node _lowestActive_T_12 = mux(loadersActive[2], UInt<2>("h2"), _lowestActive_T_11) @[Mux.scala 47:70]
    node _lowestActive_T_13 = mux(loadersActive[1], UInt<1>("h1"), _lowestActive_T_12) @[Mux.scala 47:70]
    node lowestActive = mux(loadersActive[0], UInt<1>("h0"), _lowestActive_T_13) @[Mux.scala 47:70]
    node _haveActive_T = or(loadersActive[0], loadersActive[1]) @[CScratchpad.scala 199:43]
    node _haveActive_T_1 = or(_haveActive_T, loadersActive[2]) @[CScratchpad.scala 199:43]
    node _haveActive_T_2 = or(_haveActive_T_1, loadersActive[3]) @[CScratchpad.scala 199:43]
    node _haveActive_T_3 = or(_haveActive_T_2, loadersActive[4]) @[CScratchpad.scala 199:43]
    node _haveActive_T_4 = or(_haveActive_T_3, loadersActive[5]) @[CScratchpad.scala 199:43]
    node _haveActive_T_5 = or(_haveActive_T_4, loadersActive[6]) @[CScratchpad.scala 199:43]
    node _haveActive_T_6 = or(_haveActive_T_5, loadersActive[7]) @[CScratchpad.scala 199:43]
    node _haveActive_T_7 = or(_haveActive_T_6, loadersActive[8]) @[CScratchpad.scala 199:43]
    node _haveActive_T_8 = or(_haveActive_T_7, loadersActive[9]) @[CScratchpad.scala 199:43]
    node _haveActive_T_9 = or(_haveActive_T_8, loadersActive[10]) @[CScratchpad.scala 199:43]
    node _haveActive_T_10 = or(_haveActive_T_9, loadersActive[11]) @[CScratchpad.scala 199:43]
    node _haveActive_T_11 = or(_haveActive_T_10, loadersActive[12]) @[CScratchpad.scala 199:43]
    node _haveActive_T_12 = or(_haveActive_T_11, loadersActive[13]) @[CScratchpad.scala 199:43]
    node _haveActive_T_13 = or(_haveActive_T_12, loadersActive[14]) @[CScratchpad.scala 199:43]
    node _haveActive_T_14 = or(_haveActive_T_13, loadersActive[15]) @[CScratchpad.scala 199:43]
    node _haveActive_T_15 = eq(loader.io.cache_block_in.ready, UInt<1>("h0")) @[CScratchpad.scala 199:52]
    node haveActive = or(_haveActive_T_14, _haveActive_T_15) @[CScratchpad.scala 199:49]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[CScratchpad.scala 201:51]
    REG <= loader.io.cache_block_in.ready @[CScratchpad.scala 201:51]
    node _T_34 = eq(REG, UInt<1>("h0")) @[CScratchpad.scala 201:43]
    node _T_35 = and(loader.io.cache_block_in.ready, _T_34) @[CScratchpad.scala 201:40]
    when _T_35 : @[CScratchpad.scala 201:85]
      node _loadersActive_T = eq(reqIdleBits[loaderSource], UInt<1>("h0")) @[CScratchpad.scala 202:36]
      loadersActive[loaderSource] <= _loadersActive_T @[CScratchpad.scala 202:33]
    reg REG_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_1) @[CScratchpad.scala 205:16]
    REG_1 <= haveActive @[CScratchpad.scala 205:16]
    when REG_1 : @[CScratchpad.scala 205:30]
      reg progressReg_REG : UInt, clock with :
        reset => (UInt<1>("h0"), progressReg_REG) @[CScratchpad.scala 206:45]
      progressReg_REG <= lowestActive @[CScratchpad.scala 206:45]
      node _progressReg_T = or(progressReg_REG, UInt<4>("h0"))
      node _progressReg_T_1 = bits(_progressReg_T, 3, 0)
      progressReg <= perSourceProgress[_progressReg_T_1] @[CScratchpad.scala 206:17]
    node _T_36 = and(mem_out.d.ready, mem_out.d.valid) @[Decoupled.scala 51:35]
    when _T_36 : @[CScratchpad.scala 209:24]
      node _req_cache_memoryLength_T_1 = sub(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 210:72]
      node _req_cache_memoryLength_T_2 = tail(_req_cache_memoryLength_T_1, 1) @[CScratchpad.scala 210:72]
      req_cache[mem_out.d.bits.source].memoryLength <= _req_cache_memoryLength_T_2 @[CScratchpad.scala 210:37]
      loaderSource <= mem_out.d.bits.source @[CScratchpad.scala 211:18]
      node _T_37 = leq(req_cache[mem_out.d.bits.source].memoryLength, UInt<7>("h40")) @[CScratchpad.scala 212:42]
      when _T_37 : @[CScratchpad.scala 212:57]
        reqIdleBits[mem_out.d.bits.source] <= UInt<1>("h1") @[CScratchpad.scala 213:28]
    req.progress <= progressReg @[CScratchpad.scala 216:16]
    when loader.io.sp_write_out.valid : @[CScratchpad.scala 217:38]
      write mport MPORT = mem[loader.io.sp_write_out.bits.idx], clock
      MPORT <= loader.io.sp_write_out.bits.dat
      node _perSourceProgress_T = add(loader.io.sp_write_out.bits.idx, UInt<1>("h1")) @[CScratchpad.scala 219:72]
      perSourceProgress[loaderSource] <= _perSourceProgress_T @[CScratchpad.scala 219:37]
    node _T_38 = and(req.request.ready, req.request.valid) @[Decoupled.scala 51:35]
    when _T_38 : @[CScratchpad.scala 222:26]
      progressReg <= UInt<1>("h0") @[CScratchpad.scala 223:17]
      perSourceProgress[0] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[1] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[2] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[3] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[4] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[5] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[6] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[7] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[8] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[9] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[10] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[11] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[12] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[13] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[14] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
      perSourceProgress[15] <= UInt<1>("h0") @[CScratchpad.scala 224:33]
    when access.writeReq.valid : @[CScratchpad.scala 227:31]
      write mport MPORT_1 = mem[access.writeReq.bits.addr], clock
      MPORT_1 <= access.writeReq.bits.data
    req.writeback.ready <= UInt<1>("h0") @[CScratchpad.scala 288:25]

  module SequentialWriter :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<34>, len : UInt<34>}}, channel : { flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, channelIdle : UInt<1>}, busy : UInt<1>}
    output tl_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Writers.scala 36:30]
    wire _txStates_WIRE : UInt<1>[2] @[Writers.scala 42:41]
    _txStates_WIRE[0] <= UInt<1>("h0") @[Writers.scala 42:41]
    _txStates_WIRE[1] <= UInt<1>("h0") @[Writers.scala 42:41]
    reg txStates : UInt<1>[2], clock with :
      reset => (reset, _txStates_WIRE) @[Writers.scala 42:33]
    node _txPriority_T = eq(txStates[0], UInt<1>("h0")) @[Writers.scala 43:62]
    node _txPriority_T_1 = eq(txStates[1], UInt<1>("h0")) @[Writers.scala 43:62]
    node _txPriority_enc_T = mux(_txPriority_T_1, UInt<2>("h2"), UInt<2>("h0")) @[Mux.scala 47:70]
    node txPriority_enc = mux(_txPriority_T, UInt<2>("h1"), _txPriority_enc_T) @[Mux.scala 47:70]
    node txPriority_0 = bits(txPriority_enc, 0, 0) @[OneHot.scala 82:30]
    node txPriority_1 = bits(txPriority_enc, 1, 1) @[OneHot.scala 82:30]
    node _haveTransactionToDo_T = eq(txStates[0], UInt<1>("h1")) @[Writers.scala 45:52]
    node _haveTransactionToDo_T_1 = eq(txStates[1], UInt<1>("h1")) @[Writers.scala 45:52]
    node haveTransactionToDo = or(_haveTransactionToDo_T, _haveTransactionToDo_T_1) @[Writers.scala 45:80]
    node _haveAvailableTxSlot_T = eq(txStates[0], UInt<1>("h0")) @[Writers.scala 46:52]
    node _haveAvailableTxSlot_T_1 = eq(txStates[1], UInt<1>("h0")) @[Writers.scala 46:52]
    node haveAvailableTxSlot = or(_haveAvailableTxSlot_T, _haveAvailableTxSlot_T_1) @[Writers.scala 46:78]
    node _io_channel_channelIdle_T = eq(haveTransactionToDo, UInt<1>("h0")) @[Writers.scala 49:29]
    io.channel.channelIdle <= _io_channel_channelIdle_T @[Writers.scala 49:26]
    reg addr : UInt<28>, clock with :
      reset => (UInt<1>("h0"), addr) @[Writers.scala 57:25]
    reg req_len : UInt<32>, clock with :
      reset => (UInt<1>("h0"), req_len) @[Writers.scala 60:28]
    node _nextAddr_T = add(addr, UInt<1>("h1")) @[Writers.scala 64:31]
    node nextAddr = tail(_nextAddr_T, 1) @[Writers.scala 64:31]
    reg idx : UInt<4>, clock with :
      reset => (UInt<1>("h0"), idx) @[Writers.scala 66:24]
    reg dataBuf : UInt<32>[16], clock with :
      reset => (UInt<1>("h0"), dataBuf) @[Writers.scala 68:28]
    reg dataValid : UInt<16>, clock with :
      reset => (UInt<1>("h0"), dataValid) @[Writers.scala 69:30]
    node wdata_lo_lo_lo = cat(dataBuf[1], dataBuf[0]) @[Writers.scala 71:31]
    node wdata_lo_lo_hi = cat(dataBuf[3], dataBuf[2]) @[Writers.scala 71:31]
    node wdata_lo_lo = cat(wdata_lo_lo_hi, wdata_lo_lo_lo) @[Writers.scala 71:31]
    node wdata_lo_hi_lo = cat(dataBuf[5], dataBuf[4]) @[Writers.scala 71:31]
    node wdata_lo_hi_hi = cat(dataBuf[7], dataBuf[6]) @[Writers.scala 71:31]
    node wdata_lo_hi = cat(wdata_lo_hi_hi, wdata_lo_hi_lo) @[Writers.scala 71:31]
    node wdata_lo = cat(wdata_lo_hi, wdata_lo_lo) @[Writers.scala 71:31]
    node wdata_hi_lo_lo = cat(dataBuf[9], dataBuf[8]) @[Writers.scala 71:31]
    node wdata_hi_lo_hi = cat(dataBuf[11], dataBuf[10]) @[Writers.scala 71:31]
    node wdata_hi_lo = cat(wdata_hi_lo_hi, wdata_hi_lo_lo) @[Writers.scala 71:31]
    node wdata_hi_hi_lo = cat(dataBuf[13], dataBuf[12]) @[Writers.scala 71:31]
    node wdata_hi_hi_hi = cat(dataBuf[15], dataBuf[14]) @[Writers.scala 71:31]
    node wdata_hi_hi = cat(wdata_hi_hi_hi, wdata_hi_hi_lo) @[Writers.scala 71:31]
    node wdata_hi = cat(wdata_hi_hi, wdata_hi_lo) @[Writers.scala 71:31]
    node wdata = cat(wdata_hi, wdata_lo) @[Writers.scala 71:31]
    node _wmask_T = bits(dataValid, 0, 0) @[Bitwise.scala 28:17]
    node _wmask_T_1 = bits(dataValid, 1, 1) @[Bitwise.scala 28:17]
    node _wmask_T_2 = bits(dataValid, 2, 2) @[Bitwise.scala 28:17]
    node _wmask_T_3 = bits(dataValid, 3, 3) @[Bitwise.scala 28:17]
    node _wmask_T_4 = bits(dataValid, 4, 4) @[Bitwise.scala 28:17]
    node _wmask_T_5 = bits(dataValid, 5, 5) @[Bitwise.scala 28:17]
    node _wmask_T_6 = bits(dataValid, 6, 6) @[Bitwise.scala 28:17]
    node _wmask_T_7 = bits(dataValid, 7, 7) @[Bitwise.scala 28:17]
    node _wmask_T_8 = bits(dataValid, 8, 8) @[Bitwise.scala 28:17]
    node _wmask_T_9 = bits(dataValid, 9, 9) @[Bitwise.scala 28:17]
    node _wmask_T_10 = bits(dataValid, 10, 10) @[Bitwise.scala 28:17]
    node _wmask_T_11 = bits(dataValid, 11, 11) @[Bitwise.scala 28:17]
    node _wmask_T_12 = bits(dataValid, 12, 12) @[Bitwise.scala 28:17]
    node _wmask_T_13 = bits(dataValid, 13, 13) @[Bitwise.scala 28:17]
    node _wmask_T_14 = bits(dataValid, 14, 14) @[Bitwise.scala 28:17]
    node _wmask_T_15 = bits(dataValid, 15, 15) @[Bitwise.scala 28:17]
    node _wmask_T_16 = bits(_wmask_T, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_17 = mux(_wmask_T_16, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_18 = bits(_wmask_T_1, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_19 = mux(_wmask_T_18, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_20 = bits(_wmask_T_2, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_21 = mux(_wmask_T_20, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_22 = bits(_wmask_T_3, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_23 = mux(_wmask_T_22, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_24 = bits(_wmask_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_25 = mux(_wmask_T_24, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_26 = bits(_wmask_T_5, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_27 = mux(_wmask_T_26, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_28 = bits(_wmask_T_6, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_29 = mux(_wmask_T_28, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_30 = bits(_wmask_T_7, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_31 = mux(_wmask_T_30, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_32 = bits(_wmask_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_33 = mux(_wmask_T_32, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_34 = bits(_wmask_T_9, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_35 = mux(_wmask_T_34, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_36 = bits(_wmask_T_10, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_37 = mux(_wmask_T_36, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_38 = bits(_wmask_T_11, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_39 = mux(_wmask_T_38, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_40 = bits(_wmask_T_12, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_41 = mux(_wmask_T_40, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_42 = bits(_wmask_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_43 = mux(_wmask_T_42, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_44 = bits(_wmask_T_14, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_45 = mux(_wmask_T_44, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _wmask_T_46 = bits(_wmask_T_15, 0, 0) @[Bitwise.scala 77:15]
    node _wmask_T_47 = mux(_wmask_T_46, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node wmask_lo_lo_lo = cat(_wmask_T_19, _wmask_T_17) @[Cat.scala 33:92]
    node wmask_lo_lo_hi = cat(_wmask_T_23, _wmask_T_21) @[Cat.scala 33:92]
    node wmask_lo_lo = cat(wmask_lo_lo_hi, wmask_lo_lo_lo) @[Cat.scala 33:92]
    node wmask_lo_hi_lo = cat(_wmask_T_27, _wmask_T_25) @[Cat.scala 33:92]
    node wmask_lo_hi_hi = cat(_wmask_T_31, _wmask_T_29) @[Cat.scala 33:92]
    node wmask_lo_hi = cat(wmask_lo_hi_hi, wmask_lo_hi_lo) @[Cat.scala 33:92]
    node wmask_lo = cat(wmask_lo_hi, wmask_lo_lo) @[Cat.scala 33:92]
    node wmask_hi_lo_lo = cat(_wmask_T_35, _wmask_T_33) @[Cat.scala 33:92]
    node wmask_hi_lo_hi = cat(_wmask_T_39, _wmask_T_37) @[Cat.scala 33:92]
    node wmask_hi_lo = cat(wmask_hi_lo_hi, wmask_hi_lo_lo) @[Cat.scala 33:92]
    node wmask_hi_hi_lo = cat(_wmask_T_43, _wmask_T_41) @[Cat.scala 33:92]
    node wmask_hi_hi_hi = cat(_wmask_T_47, _wmask_T_45) @[Cat.scala 33:92]
    node wmask_hi_hi = cat(wmask_hi_hi_hi, wmask_hi_hi_lo) @[Cat.scala 33:92]
    node wmask_hi = cat(wmask_hi_hi, wmask_hi_lo) @[Cat.scala 33:92]
    node wmask = cat(wmask_hi, wmask_lo) @[Cat.scala 33:92]
    reg allocatedTransaction : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Writers.scala 74:45]
    reg earlyFinish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Writers.scala 75:36]
    tl_out.a.bits.corrupt is invalid @[Writers.scala 77:17]
    tl_out.a.bits.data is invalid @[Writers.scala 77:17]
    tl_out.a.bits.mask is invalid @[Writers.scala 77:17]
    tl_out.a.bits.address is invalid @[Writers.scala 77:17]
    tl_out.a.bits.source is invalid @[Writers.scala 77:17]
    tl_out.a.bits.size is invalid @[Writers.scala 77:17]
    tl_out.a.bits.param is invalid @[Writers.scala 77:17]
    tl_out.a.bits.opcode is invalid @[Writers.scala 77:17]
    tl_out.a.valid <= UInt<1>("h0") @[Writers.scala 78:18]
    tl_out.d.ready <= haveTransactionToDo @[Writers.scala 80:18]
    node _T = and(tl_out.d.ready, tl_out.d.valid) @[Decoupled.scala 51:35]
    when _T : @[Writers.scala 81:23]
      txStates[tl_out.d.bits.source] <= UInt<1>("h0") @[Writers.scala 82:36]
    node _T_1 = eq(UInt<2>("h0"), state) @[Writers.scala 85:17]
    when _T_1 : @[Writers.scala 85:17]
      node _T_2 = and(io.req.ready, io.req.valid) @[Decoupled.scala 51:35]
      when _T_2 : @[Writers.scala 87:25]
        node _idx_T = bits(io.req.bits.addr, 6, 2) @[Writers.scala 91:34]
        idx <= _idx_T @[Writers.scala 91:15]
        node _req_len_T = shr(io.req.bits.len, 2) @[Writers.scala 93:36]
        req_len <= _req_len_T @[Writers.scala 93:17]
        node _addr_T = shr(io.req.bits.addr, 6) @[Writers.scala 94:34]
        addr <= _addr_T @[Writers.scala 94:14]
        dataValid <= UInt<1>("h0") @[Writers.scala 95:19]
        node _T_3 = bits(io.req.bits.addr, 1, 0) @[Writers.scala 98:34]
        node _T_4 = eq(_T_3, UInt<1>("h0")) @[Writers.scala 98:60]
        node _T_5 = asUInt(reset) @[Writers.scala 98:17]
        node _T_6 = eq(_T_5, UInt<1>("h0")) @[Writers.scala 98:17]
        when _T_6 : @[Writers.scala 98:17]
          node _T_7 = eq(_T_4, UInt<1>("h0")) @[Writers.scala 98:17]
          when _T_7 : @[Writers.scala 98:17]
            printf(clock, UInt<1>("h1"), "Assertion failed: FixedSequentialWriteChannel: Unaligned request\n    at Writers.scala:98 assert(io.req.bits.addr(log2Ceil(nBytes) - 1, 0) === 0.U,\n") : printf @[Writers.scala 98:17]
          assert(clock, _T_4, UInt<1>("h1"), "") : assert @[Writers.scala 98:17]
        state <= UInt<2>("h1") @[Writers.scala 102:15]
    else :
      node _T_8 = eq(UInt<2>("h1"), state) @[Writers.scala 85:17]
      when _T_8 : @[Writers.scala 85:17]
        node _T_9 = and(io.channel.data.ready, io.channel.data.valid) @[Decoupled.scala 51:35]
        when _T_9 : @[Writers.scala 108:34]
          dataBuf[idx] <= io.channel.data.bits @[Writers.scala 109:22]
          node _dataValid_T = dshl(UInt<1>("h1"), idx) @[OneHot.scala 57:35]
          node _dataValid_T_1 = or(dataValid, _dataValid_T) @[Writers.scala 110:32]
          dataValid <= _dataValid_T_1 @[Writers.scala 110:19]
          node _idx_T_1 = add(idx, UInt<1>("h1")) @[Writers.scala 111:20]
          node _idx_T_2 = tail(_idx_T_1, 1) @[Writers.scala 111:20]
          idx <= _idx_T_2 @[Writers.scala 111:13]
          node _req_len_T_1 = sub(req_len, UInt<1>("h1")) @[Writers.scala 112:28]
          node _req_len_T_2 = tail(_req_len_T_1, 1) @[Writers.scala 112:28]
          req_len <= _req_len_T_2 @[Writers.scala 112:17]
          node _T_10 = eq(idx, UInt<4>("hf")) @[Writers.scala 113:18]
          node _T_11 = eq(req_len, UInt<1>("h1")) @[Writers.scala 113:54]
          node _T_12 = or(_T_10, _T_11) @[Writers.scala 113:43]
          when _T_12 : @[Writers.scala 113:63]
            state <= UInt<2>("h2") @[Writers.scala 114:17]
      else :
        node _T_13 = eq(UInt<2>("h2"), state) @[Writers.scala 85:17]
        when _T_13 : @[Writers.scala 85:17]
          when haveAvailableTxSlot : @[Writers.scala 119:33]
            node _allocatedTransaction_T = cat(txPriority_1, txPriority_0) @[Cat.scala 33:92]
            node _allocatedTransaction_T_1 = bits(_allocatedTransaction_T, 1, 1) @[CircuitMath.scala 28:8]
            allocatedTransaction <= _allocatedTransaction_T_1 @[Writers.scala 120:30]
            state <= UInt<2>("h3") @[Writers.scala 121:15]
        else :
          node _T_14 = eq(UInt<2>("h3"), state) @[Writers.scala 85:17]
          when _T_14 : @[Writers.scala 85:17]
            tl_out.a.valid <= UInt<1>("h1") @[Writers.scala 125:22]
            node _tl_out_a_bits_T = cat(addr, UInt<6>("h0")) @[Cat.scala 33:92]
            node _tl_out_a_bits_legal_T = leq(UInt<1>("h0"), UInt<3>("h6")) @[Parameters.scala 92:32]
            node _tl_out_a_bits_legal_T_1 = leq(UInt<3>("h6"), UInt<3>("h6")) @[Parameters.scala 92:42]
            node _tl_out_a_bits_legal_T_2 = and(_tl_out_a_bits_legal_T, _tl_out_a_bits_legal_T_1) @[Parameters.scala 92:37]
            node _tl_out_a_bits_legal_T_3 = or(UInt<1>("h0"), _tl_out_a_bits_legal_T_2) @[Parameters.scala 670:31]
            node _tl_out_a_bits_legal_T_4 = xor(_tl_out_a_bits_T, UInt<1>("h0")) @[Parameters.scala 137:31]
            node _tl_out_a_bits_legal_T_5 = cvt(_tl_out_a_bits_legal_T_4) @[Parameters.scala 137:45]
            node _tl_out_a_bits_legal_T_6 = and(_tl_out_a_bits_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
            node _tl_out_a_bits_legal_T_7 = asSInt(_tl_out_a_bits_legal_T_6) @[Parameters.scala 137:50]
            node _tl_out_a_bits_legal_T_8 = eq(_tl_out_a_bits_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
            node _tl_out_a_bits_legal_T_9 = and(_tl_out_a_bits_legal_T_3, _tl_out_a_bits_legal_T_8) @[Parameters.scala 670:56]
            node tl_out_a_bits_legal = or(UInt<1>("h0"), _tl_out_a_bits_legal_T_9) @[Parameters.scala 672:30]
            wire tl_out_a_bits_a : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 483:17]
            tl_out_a_bits_a is invalid @[Edges.scala 483:17]
            tl_out_a_bits_a.opcode <= UInt<1>("h1") @[Edges.scala 484:15]
            tl_out_a_bits_a.param <= UInt<1>("h0") @[Edges.scala 485:15]
            tl_out_a_bits_a.size <= UInt<3>("h6") @[Edges.scala 486:15]
            tl_out_a_bits_a.source <= allocatedTransaction @[Edges.scala 487:15]
            tl_out_a_bits_a.address <= _tl_out_a_bits_T @[Edges.scala 488:15]
            tl_out_a_bits_a.mask <= wmask @[Edges.scala 489:15]
            tl_out_a_bits_a.data <= wdata @[Edges.scala 490:15]
            tl_out_a_bits_a.corrupt <= UInt<1>("h0") @[Edges.scala 491:15]
            tl_out.a.bits <= tl_out_a_bits_a @[Writers.scala 126:21]
            node _T_15 = and(tl_out.a.ready, tl_out.a.valid) @[Decoupled.scala 51:35]
            when _T_15 : @[Writers.scala 134:27]
              txStates[allocatedTransaction] <= UInt<1>("h1") @[Writers.scala 135:40]
              addr <= nextAddr @[Writers.scala 136:14]
              idx <= UInt<1>("h0") @[Writers.scala 137:13]
              dataValid <= UInt<1>("h0") @[Writers.scala 138:19]
              node _T_16 = eq(req_len, UInt<1>("h0")) @[Writers.scala 139:22]
              node _T_17 = or(_T_16, earlyFinish) @[Writers.scala 139:30]
              when _T_17 : @[Writers.scala 139:46]
                state <= UInt<2>("h0") @[Writers.scala 140:17]
                earlyFinish <= UInt<1>("h0") @[Writers.scala 141:23]
              else :
                state <= UInt<2>("h1") @[Writers.scala 143:17]
    node _io_req_ready_T = eq(state, UInt<2>("h0")) @[Writers.scala 149:25]
    io.req.ready <= _io_req_ready_T @[Writers.scala 149:16]
    node _io_channel_data_ready_T = eq(state, UInt<2>("h1")) @[Writers.scala 150:34]
    io.channel.data.ready <= _io_channel_data_ready_T @[Writers.scala 150:25]
    node _io_busy_T = neq(state, UInt<2>("h0")) @[Writers.scala 151:20]
    io.busy <= _io_busy_T @[Writers.scala 151:11]

  module ComposerCoreWrapper :
    input clock : Clock
    input reset : Reset
    output auto : { solvated_mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, nonBonded_mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, halfNonBonded_mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, data_mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, writers_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<60>, rd : UInt<5>}}, busy : UInt<1>}
    input myWriters_WriteChannel : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<34>, len : UInt<34>}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    myWriters_WriteChannel is invalid
    inst data of CScratchpad @[ComposerCore.scala 76:32]
    data.clock is invalid
    data.reset is invalid
    data.auto is invalid
    data.access is invalid
    data.req is invalid
    data.clock <= clock
    data.reset <= reset
    inst halfNonBonded of CScratchpad_1 @[ComposerCore.scala 76:32]
    halfNonBonded.clock is invalid
    halfNonBonded.reset is invalid
    halfNonBonded.auto is invalid
    halfNonBonded.access is invalid
    halfNonBonded.req is invalid
    halfNonBonded.clock <= clock
    halfNonBonded.reset <= reset
    inst nonBonded of CScratchpad_2 @[ComposerCore.scala 76:32]
    nonBonded.clock is invalid
    nonBonded.reset is invalid
    nonBonded.auto is invalid
    nonBonded.access is invalid
    nonBonded.req is invalid
    nonBonded.clock <= clock
    nonBonded.reset <= reset
    inst solvated of CScratchpad_3 @[ComposerCore.scala 76:32]
    solvated.clock is invalid
    solvated.reset is invalid
    solvated.auto is invalid
    solvated.access is invalid
    solvated.req is invalid
    solvated.clock <= clock
    solvated.reset <= reset
    wire tl_outer : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    tl_outer is invalid @[Nodes.scala 1212:84]
    auto.writers_out <- tl_outer @[LazyModule.scala 368:12]
    auto.data_mem_out <- data.auto.mem_out @[LazyModule.scala 368:12]
    auto.halfNonBonded_mem_out <- halfNonBonded.auto.mem_out @[LazyModule.scala 368:12]
    auto.nonBonded_mem_out <- nonBonded.auto.mem_out @[LazyModule.scala 368:12]
    auto.solvated_mem_out <- solvated.auto.mem_out @[LazyModule.scala 368:12]
    inst myWriters_WriteChannel_1 of SequentialWriter @[ComposerCore.scala 194:74]
    myWriters_WriteChannel_1.clock <= clock
    myWriters_WriteChannel_1.reset <= reset
    myWriters_WriteChannel_1.tl_out.d <= tl_outer.d @[ComposerCore.scala 198:16]
    tl_outer.a.bits <= myWriters_WriteChannel_1.tl_out.a.bits @[ComposerCore.scala 198:16]
    tl_outer.a.valid <= myWriters_WriteChannel_1.tl_out.a.valid @[ComposerCore.scala 198:16]
    myWriters_WriteChannel_1.tl_out.a.ready <= tl_outer.a.ready @[ComposerCore.scala 198:16]
    myWriters_WriteChannel_1.io.req <= myWriters_WriteChannel @[ComposerCore.scala 202:15]
    myWriters_WriteChannel_1.io.channel.data.valid <= UInt<1>("h0") @[ComposerCore.scala 210:22]
    myWriters_WriteChannel_1.io.channel.data.bits is invalid @[ComposerCore.scala 211:21]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[EnergyCalcTop.scala 31:22]
    reg addr_data : UInt<34>, clock with :
      reset => (UInt<1>("h0"), addr_data) @[EnergyCalcTop.scala 32:52]
    reg addr_HNBT : UInt<34>, clock with :
      reset => (UInt<1>("h0"), addr_HNBT) @[EnergyCalcTop.scala 32:52]
    reg addr_NBT : UInt<34>, clock with :
      reset => (UInt<1>("h0"), addr_NBT) @[EnergyCalcTop.scala 32:52]
    reg addr_ST : UInt<34>, clock with :
      reset => (UInt<1>("h0"), addr_ST) @[EnergyCalcTop.scala 32:52]
    data.req.request.bits.scAddr <= UInt<1>("h0") @[EnergyCalcTop.scala 37:37]
    data.req.request.bits.len <= UInt<8>("h80") @[EnergyCalcTop.scala 38:34]
    data.req.request.bits.memAddr <= addr_data @[EnergyCalcTop.scala 39:38]
    halfNonBonded.req.request.bits.scAddr <= UInt<1>("h0") @[EnergyCalcTop.scala 42:46]
    halfNonBonded.req.request.bits.len <= UInt<8>("ha0") @[EnergyCalcTop.scala 43:43]
    halfNonBonded.req.request.bits.memAddr <= addr_HNBT @[EnergyCalcTop.scala 44:47]
    nonBonded.req.request.bits.scAddr <= UInt<1>("h0") @[EnergyCalcTop.scala 47:42]
    nonBonded.req.request.bits.len <= UInt<8>("ha0") @[EnergyCalcTop.scala 48:39]
    nonBonded.req.request.bits.memAddr <= addr_NBT @[EnergyCalcTop.scala 49:43]
    solvated.req.request.bits.scAddr <= UInt<1>("h0") @[EnergyCalcTop.scala 52:41]
    solvated.req.request.bits.len <= UInt<9>("h100") @[EnergyCalcTop.scala 53:38]
    solvated.req.request.bits.memAddr <= addr_ST @[EnergyCalcTop.scala 54:42]
    reg sum : UInt<32>, clock with :
      reset => (UInt<1>("h0"), sum) @[EnergyCalcTop.scala 60:16]
    reg a : UInt<32>, clock with :
      reset => (UInt<1>("h0"), a) @[EnergyCalcTop.scala 61:23]
    reg b : UInt<32>, clock with :
      reset => (UInt<1>("h0"), b) @[EnergyCalcTop.scala 61:23]
    reg c : UInt<32>, clock with :
      reset => (UInt<1>("h0"), c) @[EnergyCalcTop.scala 61:23]
    reg d : UInt<32>, clock with :
      reset => (UInt<1>("h0"), d) @[EnergyCalcTop.scala 61:23]
    myWriters_WriteChannel_1.io.channel.data.valid <= UInt<1>("h0") @[EnergyCalcTop.scala 62:23]
    myWriters_WriteChannel_1.io.channel.data.bits <= sum @[EnergyCalcTop.scala 63:22]
    node _io_req_ready_T = eq(state, UInt<3>("h0")) @[EnergyCalcTop.scala 64:25]
    io.req.ready <= _io_req_ready_T @[EnergyCalcTop.scala 64:16]
    io.resp.valid <= UInt<1>("h0") @[EnergyCalcTop.scala 65:17]
    io.resp.bits.data <= UInt<1>("h0") @[EnergyCalcTop.scala 66:21]
    io.resp.bits.rd <= UInt<1>("h0") @[EnergyCalcTop.scala 67:19]
    node _T = eq(state, UInt<3>("h0")) @[EnergyCalcTop.scala 70:15]
    when _T : @[EnergyCalcTop.scala 70:27]
      node _T_1 = and(io.req.ready, io.req.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[EnergyCalcTop.scala 71:23]
        node _T_2 = asUInt(reset) @[EnergyCalcTop.scala 72:13]
        node _T_3 = eq(_T_2, UInt<1>("h0")) @[EnergyCalcTop.scala 72:13]
        when _T_3 : @[EnergyCalcTop.scala 72:13]
          printf(clock, UInt<1>("h1"), "input fired\n") : printf @[EnergyCalcTop.scala 72:13]
        node _T_4 = asUInt(UInt<1>("h0")) @[EnergyCalcTop.scala 73:73]
        node _T_5 = eq(io.req.bits.inst.rs1, _T_4) @[EnergyCalcTop.scala 73:34]
        when _T_5 : @[EnergyCalcTop.scala 73:81]
          node _addr_data_T = bits(io.req.bits.payload1, 33, 0) @[EnergyCalcTop.scala 74:42]
          addr_data <= _addr_data_T @[EnergyCalcTop.scala 74:19]
          node _addr_HNBT_T = bits(io.req.bits.payload2, 33, 0) @[EnergyCalcTop.scala 75:42]
          addr_HNBT <= _addr_HNBT_T @[EnergyCalcTop.scala 75:19]
          node _T_6 = asUInt(reset) @[EnergyCalcTop.scala 77:15]
          node _T_7 = eq(_T_6, UInt<1>("h0")) @[EnergyCalcTop.scala 77:15]
          when _T_7 : @[EnergyCalcTop.scala 77:15]
            printf(clock, UInt<1>("h1"), "input 1 data address %b\n", addr_data) : printf_1 @[EnergyCalcTop.scala 77:15]
          node _T_8 = asUInt(reset) @[EnergyCalcTop.scala 78:15]
          node _T_9 = eq(_T_8, UInt<1>("h0")) @[EnergyCalcTop.scala 78:15]
          when _T_9 : @[EnergyCalcTop.scala 78:15]
            printf(clock, UInt<1>("h1"), "input 1 HNBT address %d\n", addr_HNBT) : printf_2 @[EnergyCalcTop.scala 78:15]
        else :
          node _T_10 = asUInt(UInt<1>("h1")) @[EnergyCalcTop.scala 80:75]
          node _T_11 = eq(io.req.bits.inst.rs1, _T_10) @[EnergyCalcTop.scala 80:39]
          when _T_11 : @[EnergyCalcTop.scala 80:83]
            addr_NBT <= io.req.bits.payload1 @[EnergyCalcTop.scala 81:18]
            addr_ST <= io.req.bits.payload2 @[EnergyCalcTop.scala 82:17]
            node _T_12 = asUInt(reset) @[EnergyCalcTop.scala 83:15]
            node _T_13 = eq(_T_12, UInt<1>("h0")) @[EnergyCalcTop.scala 83:15]
            when _T_13 : @[EnergyCalcTop.scala 83:15]
              printf(clock, UInt<1>("h1"), "input 2\n") : printf_3 @[EnergyCalcTop.scala 83:15]
            state <= UInt<3>("h1") @[EnergyCalcTop.scala 84:15]
    else :
      node _T_14 = eq(state, UInt<3>("h1")) @[EnergyCalcTop.scala 89:20]
      when _T_14 : @[EnergyCalcTop.scala 89:32]
        node _T_15 = asUInt(reset) @[EnergyCalcTop.scala 90:11]
        node _T_16 = eq(_T_15, UInt<1>("h0")) @[EnergyCalcTop.scala 90:11]
        when _T_16 : @[EnergyCalcTop.scala 90:11]
          printf(clock, UInt<1>("h1"), "read\n") : printf_4 @[EnergyCalcTop.scala 90:11]
        node _data_access_readReq_valid_T = eq(state, UInt<3>("h1")) @[EnergyCalcTop.scala 91:40]
        data.access.readReq.valid <= _data_access_readReq_valid_T @[EnergyCalcTop.scala 91:31]
        data.access.readReq.bits <= UInt<1>("h0") @[EnergyCalcTop.scala 93:30]
        node _T_17 = asUInt(reset) @[EnergyCalcTop.scala 94:11]
        node _T_18 = eq(_T_17, UInt<1>("h0")) @[EnergyCalcTop.scala 94:11]
        when _T_18 : @[EnergyCalcTop.scala 94:11]
          printf(clock, UInt<1>("h1"), "input 1 data address %b\n", addr_HNBT) : printf_5 @[EnergyCalcTop.scala 94:11]
        when data.access.readRes.valid : @[EnergyCalcTop.scala 95:38]
          node _a_T = bits(data.access.readRes.bits, 31, 0) @[EnergyCalcTop.scala 97:16]
          a <= _a_T @[EnergyCalcTop.scala 97:9]
          node _b_T = bits(data.access.readRes.bits, 63, 32) @[EnergyCalcTop.scala 98:16]
          b <= _b_T @[EnergyCalcTop.scala 98:9]
          node _c_T = bits(data.access.readRes.bits, 95, 64) @[EnergyCalcTop.scala 99:16]
          c <= _c_T @[EnergyCalcTop.scala 99:9]
          node _d_T = bits(data.access.readRes.bits, 127, 96) @[EnergyCalcTop.scala 100:16]
          d <= _d_T @[EnergyCalcTop.scala 100:9]
          node _T_19 = asUInt(reset) @[EnergyCalcTop.scala 101:13]
          node _T_20 = eq(_T_19, UInt<1>("h0")) @[EnergyCalcTop.scala 101:13]
          when _T_20 : @[EnergyCalcTop.scala 101:13]
            printf(clock, UInt<1>("h1"), "%b\n", data.access.readRes.bits) : printf_6 @[EnergyCalcTop.scala 101:13]
          node _T_21 = asUInt(reset) @[EnergyCalcTop.scala 103:13]
          node _T_22 = eq(_T_21, UInt<1>("h0")) @[EnergyCalcTop.scala 103:13]
          when _T_22 : @[EnergyCalcTop.scala 103:13]
            printf(clock, UInt<1>("h1"), "a%d b%d c%d d%d\n", a, b, c, d) : printf_7 @[EnergyCalcTop.scala 103:13]
          state <= UInt<3>("h2") @[EnergyCalcTop.scala 105:13]
      else :
        node _T_23 = eq(state, UInt<3>("h2")) @[EnergyCalcTop.scala 113:20]
        when _T_23 : @[EnergyCalcTop.scala 113:37]
          node _T_24 = asUInt(reset) @[EnergyCalcTop.scala 114:11]
          node _T_25 = eq(_T_24, UInt<1>("h0")) @[EnergyCalcTop.scala 114:11]
          when _T_25 : @[EnergyCalcTop.scala 114:11]
            printf(clock, UInt<1>("h1"), "calculate\n") : printf_8 @[EnergyCalcTop.scala 114:11]
          node _data_access_readReq_valid_T_1 = eq(state, UInt<3>("h2")) @[EnergyCalcTop.scala 115:40]
          data.access.readReq.valid <= _data_access_readReq_valid_T_1 @[EnergyCalcTop.scala 115:31]
          data.access.readReq.bits <= UInt<1>("h0") @[EnergyCalcTop.scala 117:30]
          when data.access.readReq.valid : @[EnergyCalcTop.scala 119:38]
            node _a_T_1 = bits(data.access.readRes.bits, 31, 0) @[EnergyCalcTop.scala 121:16]
            a <= _a_T_1 @[EnergyCalcTop.scala 121:9]
            node _b_T_1 = bits(data.access.readRes.bits, 63, 32) @[EnergyCalcTop.scala 122:16]
            b <= _b_T_1 @[EnergyCalcTop.scala 122:9]
            node _c_T_1 = bits(data.access.readRes.bits, 95, 64) @[EnergyCalcTop.scala 123:16]
            c <= _c_T_1 @[EnergyCalcTop.scala 123:9]
            node _d_T_1 = bits(data.access.readRes.bits, 127, 96) @[EnergyCalcTop.scala 124:16]
            d <= _d_T_1 @[EnergyCalcTop.scala 124:9]
            node _T_26 = asUInt(reset) @[EnergyCalcTop.scala 125:13]
            node _T_27 = eq(_T_26, UInt<1>("h0")) @[EnergyCalcTop.scala 125:13]
            when _T_27 : @[EnergyCalcTop.scala 125:13]
              printf(clock, UInt<1>("h1"), "%b\n", data.access.readRes.bits) : printf_9 @[EnergyCalcTop.scala 125:13]
          node _T_28 = asUInt(reset) @[EnergyCalcTop.scala 128:11]
          node _T_29 = eq(_T_28, UInt<1>("h0")) @[EnergyCalcTop.scala 128:11]
          when _T_29 : @[EnergyCalcTop.scala 128:11]
            printf(clock, UInt<1>("h1"), "a%d b%d c%d d%d\n", a, b, c, d) : printf_10 @[EnergyCalcTop.scala 128:11]
          node _sum_T = add(a, b) @[EnergyCalcTop.scala 130:14]
          node _sum_T_1 = tail(_sum_T, 1) @[EnergyCalcTop.scala 130:14]
          node _sum_T_2 = add(_sum_T_1, c) @[EnergyCalcTop.scala 130:18]
          node _sum_T_3 = tail(_sum_T_2, 1) @[EnergyCalcTop.scala 130:18]
          node _sum_T_4 = add(_sum_T_3, d) @[EnergyCalcTop.scala 130:22]
          node _sum_T_5 = tail(_sum_T_4, 1) @[EnergyCalcTop.scala 130:22]
          sum <= _sum_T_5 @[EnergyCalcTop.scala 130:9]
          state <= UInt<3>("h3") @[EnergyCalcTop.scala 132:11]
        else :
          node _T_30 = eq(state, UInt<3>("h3")) @[EnergyCalcTop.scala 134:20]
          when _T_30 : @[EnergyCalcTop.scala 134:33]
            node _T_31 = asUInt(reset) @[EnergyCalcTop.scala 135:11]
            node _T_32 = eq(_T_31, UInt<1>("h0")) @[EnergyCalcTop.scala 135:11]
            when _T_32 : @[EnergyCalcTop.scala 135:11]
              printf(clock, UInt<1>("h1"), "store\n") : printf_11 @[EnergyCalcTop.scala 135:11]
            myWriters_WriteChannel_1.io.channel.data.valid <= UInt<1>("h1") @[EnergyCalcTop.scala 136:25]
            node _T_33 = and(myWriters_WriteChannel_1.io.channel.data.ready, myWriters_WriteChannel_1.io.channel.data.valid) @[Decoupled.scala 51:35]
            when _T_33 : @[EnergyCalcTop.scala 138:30]
              node _T_34 = asUInt(reset) @[EnergyCalcTop.scala 139:13]
              node _T_35 = eq(_T_34, UInt<1>("h0")) @[EnergyCalcTop.scala 139:13]
              when _T_35 : @[EnergyCalcTop.scala 139:13]
                printf(clock, UInt<1>("h1"), "output sum - %d\n", sum) : printf_12 @[EnergyCalcTop.scala 139:13]
              state <= UInt<3>("h4") @[EnergyCalcTop.scala 140:13]
          else :
            node _T_36 = eq(state, UInt<3>("h4")) @[EnergyCalcTop.scala 143:20]
            when _T_36 : @[EnergyCalcTop.scala 143:34]
              node _data_access_readReq_valid_T_2 = eq(state, UInt<3>("h4")) @[EnergyCalcTop.scala 144:40]
              data.access.readReq.valid <= _data_access_readReq_valid_T_2 @[EnergyCalcTop.scala 144:31]
              data.access.readReq.bits <= UInt<1>("h0") @[EnergyCalcTop.scala 146:30]
              when data.access.readReq.valid : @[EnergyCalcTop.scala 148:38]
                node _a_T_2 = bits(data.access.readRes.bits, 31, 0) @[EnergyCalcTop.scala 150:16]
                a <= _a_T_2 @[EnergyCalcTop.scala 150:9]
                node _b_T_2 = bits(data.access.readRes.bits, 63, 32) @[EnergyCalcTop.scala 151:16]
                b <= _b_T_2 @[EnergyCalcTop.scala 151:9]
                node _c_T_2 = bits(data.access.readRes.bits, 95, 64) @[EnergyCalcTop.scala 152:16]
                c <= _c_T_2 @[EnergyCalcTop.scala 152:9]
                node _d_T_2 = bits(data.access.readRes.bits, 127, 96) @[EnergyCalcTop.scala 153:16]
                d <= _d_T_2 @[EnergyCalcTop.scala 153:9]
                node _T_37 = asUInt(reset) @[EnergyCalcTop.scala 154:13]
                node _T_38 = eq(_T_37, UInt<1>("h0")) @[EnergyCalcTop.scala 154:13]
                when _T_38 : @[EnergyCalcTop.scala 154:13]
                  printf(clock, UInt<1>("h1"), "%b\n", data.access.readRes.bits) : printf_13 @[EnergyCalcTop.scala 154:13]
              node _T_39 = asUInt(reset) @[EnergyCalcTop.scala 157:11]
              node _T_40 = eq(_T_39, UInt<1>("h0")) @[EnergyCalcTop.scala 157:11]
              when _T_40 : @[EnergyCalcTop.scala 157:11]
                printf(clock, UInt<1>("h1"), "a%d b%d c%d d%d\n", a, b, c, d) : printf_14 @[EnergyCalcTop.scala 157:11]
              node _T_41 = asUInt(reset) @[EnergyCalcTop.scala 159:11]
              node _T_42 = eq(_T_41, UInt<1>("h0")) @[EnergyCalcTop.scala 159:11]
              when _T_42 : @[EnergyCalcTop.scala 159:11]
                printf(clock, UInt<1>("h1"), "commit\n") : printf_15 @[EnergyCalcTop.scala 159:11]
              when myWriters_WriteChannel_1.io.channel.channelIdle : @[EnergyCalcTop.scala 160:32]
                state <= UInt<3>("h5") @[EnergyCalcTop.scala 161:17]
            else :
              node _T_43 = eq(state, UInt<3>("h5")) @[EnergyCalcTop.scala 164:20]
              when _T_43 : @[EnergyCalcTop.scala 164:34]
                node _T_44 = asUInt(reset) @[EnergyCalcTop.scala 165:11]
                node _T_45 = eq(_T_44, UInt<1>("h0")) @[EnergyCalcTop.scala 165:11]
                when _T_45 : @[EnergyCalcTop.scala 165:11]
                  printf(clock, UInt<1>("h1"), "finish\n") : printf_16 @[EnergyCalcTop.scala 165:11]
                io.resp.valid <= UInt<1>("h1") @[EnergyCalcTop.scala 166:19]
                node _T_46 = and(io.resp.ready, io.resp.valid) @[Decoupled.scala 51:35]
                when _T_46 : @[EnergyCalcTop.scala 167:24]
                  state <= UInt<3>("h0") @[EnergyCalcTop.scala 168:15]


  module MultiLevelArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<60>, rd : UInt<5>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<60>, rd : UInt<5>}}, chosen : UInt<1>}

    io.out <= io.in[0] @[MultiLevelArbiter.scala 55:14]
    io.chosen <= UInt<1>("h0") @[MultiLevelArbiter.scala 56:15]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, chosen : UInt<0>}

    wire choice : UInt @[Arbiter.scala 89:41]
    choice <= UInt<1>("h0") @[Arbiter.scala 89:41]
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[UInt<1>("h0")].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[UInt<1>("h0")].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    reg lastGrant : UInt<0>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_1) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, count : UInt<2>}

    cmem ram : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<60>, rd : UInt<5>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<60>, rd : UInt<5>}}, count : UInt<3>}

    smem ram : { data : UInt<60>, rd : UInt<5>} [4] @[Decoupled.scala 273:44]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    node _deq_ptr_next_T = sub(UInt<3>("h4"), UInt<1>("h1")) @[Decoupled.scala 306:57]
    node _deq_ptr_next_T_1 = tail(_deq_ptr_next_T, 1) @[Decoupled.scala 306:57]
    node _deq_ptr_next_T_2 = eq(deq_ptr_value, _deq_ptr_next_T_1) @[Decoupled.scala 306:42]
    node _deq_ptr_next_T_3 = add(deq_ptr_value, UInt<1>("h1")) @[Decoupled.scala 306:84]
    node _deq_ptr_next_T_4 = tail(_deq_ptr_next_T_3, 1) @[Decoupled.scala 306:84]
    node deq_ptr_next = mux(_deq_ptr_next_T_2, UInt<1>("h0"), _deq_ptr_next_T_4) @[Decoupled.scala 306:27]
    node _r_addr_T = mux(do_deq, deq_ptr_next, deq_ptr_value) @[Decoupled.scala 307:33]
    wire r_addr : UInt @[Decoupled.scala 307:29]
    r_addr <= _r_addr_T @[Decoupled.scala 307:29]
    wire _io_deq_bits_WIRE : UInt @[Decoupled.scala 308:28]
    _io_deq_bits_WIRE is invalid @[Decoupled.scala 308:28]
    when UInt<1>("h1") : @[Decoupled.scala 308:28]
      _io_deq_bits_WIRE <= r_addr @[Decoupled.scala 308:28]
      node _io_deq_bits_T = or(_io_deq_bits_WIRE, UInt<2>("h0")) @[Decoupled.scala 308:28]
      node _io_deq_bits_T_1 = bits(_io_deq_bits_T, 1, 0) @[Decoupled.scala 308:28]
      read mport io_deq_bits_MPORT = ram[_io_deq_bits_T_1], clock @[Decoupled.scala 308:28]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 308:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, system_id : UInt<4>, core_id : UInt<8>, data : UInt<47>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, system_id : UInt<4>, core_id : UInt<8>, data : UInt<47>}}, count : UInt<2>}

    cmem ram : { rd : UInt<5>, system_id : UInt<4>, core_id : UInt<8>, data : UInt<47>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module ComposerSystem :
    input clock : Clock
    input reset : Reset
    output auto : { memory_endpoint_identity_out_4 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, memory_endpoint_identity_out_3 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, memory_endpoint_identity_out_2 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, memory_endpoint_identity_out_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, memory_endpoint_identity_out_0 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output sw_io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, system_id : UInt<4>, core_id : UInt<8>, data : UInt<47>}}}
    output busy : UInt<1>

    clock is invalid
    reset is invalid
    auto is invalid
    sw_io is invalid
    busy is invalid
    inst cores of ComposerCoreWrapper @[ComposerSystem.scala 22:15]
    cores.clock is invalid
    cores.reset is invalid
    cores.auto is invalid
    cores.io is invalid
    cores.myWriters_WriteChannel is invalid
    cores.clock <= clock
    cores.reset <= reset
    wire x1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    wire x1_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_1 is invalid @[Nodes.scala 1215:84]
    x1 <- x1_1 @[Nodes.scala 1509:55]
    wire x1_2 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_2 is invalid @[Nodes.scala 1212:84]
    wire x1_3 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_3 is invalid @[Nodes.scala 1215:84]
    x1_2 <- x1_3 @[Nodes.scala 1509:55]
    wire x1_4 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_4 is invalid @[Nodes.scala 1212:84]
    wire x1_5 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_5 is invalid @[Nodes.scala 1215:84]
    x1_4 <- x1_5 @[Nodes.scala 1509:55]
    wire x1_6 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_6 is invalid @[Nodes.scala 1212:84]
    wire x1_7 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_7 is invalid @[Nodes.scala 1215:84]
    x1_6 <- x1_7 @[Nodes.scala 1509:55]
    wire x1_8 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_8 is invalid @[Nodes.scala 1212:84]
    wire x1_9 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_9 is invalid @[Nodes.scala 1215:84]
    x1_8 <- x1_9 @[Nodes.scala 1509:55]
    wire x1_10 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_10 is invalid @[Nodes.scala 1212:84]
    wire x1_11 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_11 is invalid @[Nodes.scala 1215:84]
    x1_10 <- x1_11 @[Nodes.scala 1509:55]
    wire x1_12 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_12 is invalid @[Nodes.scala 1212:84]
    wire x1_13 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_13 is invalid @[Nodes.scala 1215:84]
    x1_12 <- x1_13 @[Nodes.scala 1509:55]
    wire x1_14 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_14 is invalid @[Nodes.scala 1212:84]
    wire x1_15 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_15 is invalid @[Nodes.scala 1215:84]
    x1_14 <- x1_15 @[Nodes.scala 1509:55]
    wire x1_16 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_16 is invalid @[Nodes.scala 1212:84]
    wire x1_17 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_17 is invalid @[Nodes.scala 1215:84]
    x1_16 <- x1_17 @[Nodes.scala 1509:55]
    wire x1_18 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_18 is invalid @[Nodes.scala 1212:84]
    wire x1_19 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_19 is invalid @[Nodes.scala 1215:84]
    x1_18 <- x1_19 @[Nodes.scala 1509:55]
    x1_1 <- cores.auto.writers_out @[LazyModule.scala 353:16]
    x1_3 <- cores.auto.data_mem_out @[LazyModule.scala 353:16]
    x1_5 <- cores.auto.halfNonBonded_mem_out @[LazyModule.scala 353:16]
    x1_7 <- cores.auto.nonBonded_mem_out @[LazyModule.scala 353:16]
    x1_9 <- cores.auto.solvated_mem_out @[LazyModule.scala 353:16]
    x1_11 <- x1 @[LazyModule.scala 355:16]
    x1_13 <- x1_2 @[LazyModule.scala 355:16]
    x1_15 <- x1_4 @[LazyModule.scala 355:16]
    x1_17 <- x1_6 @[LazyModule.scala 355:16]
    x1_19 <- x1_8 @[LazyModule.scala 355:16]
    auto.memory_endpoint_identity_out_0 <- x1_10 @[LazyModule.scala 368:12]
    auto.memory_endpoint_identity_out_1 <- x1_12 @[LazyModule.scala 368:12]
    auto.memory_endpoint_identity_out_2 <- x1_14 @[LazyModule.scala 368:12]
    auto.memory_endpoint_identity_out_3 <- x1_16 @[LazyModule.scala 368:12]
    auto.memory_endpoint_identity_out_4 <- x1_18 @[LazyModule.scala 368:12]
    inst respArbiter of MultiLevelArbiter @[ComposerSystem.scala 133:27]
    respArbiter.clock <= clock
    respArbiter.reset <= reset
    busy <= cores.io.busy @[ComposerSystem.scala 136:8]
    inst cmdArbiter of RRArbiter @[ComposerSystem.scala 140:26]
    cmdArbiter.clock <= clock
    cmdArbiter.reset <= reset
    wire ioAsCmdSrc : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}} @[ComposerSystem.scala 156:21]
    ioAsCmdSrc.valid <= sw_io.cmd.valid @[ComposerSystem.scala 158:17]
    sw_io.cmd.ready <= ioAsCmdSrc.ready @[ComposerSystem.scala 159:19]
    ioAsCmdSrc.bits.payload2 <= sw_io.cmd.bits.payload2 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.payload1 <= sw_io.cmd.bits.payload1 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.core_id <= sw_io.cmd.bits.core_id @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.funct <= sw_io.cmd.bits.inst.funct @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.system_id <= sw_io.cmd.bits.inst.system_id @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.opcode <= sw_io.cmd.bits.inst.opcode @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.xs2 <= sw_io.cmd.bits.inst.xs2 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.xs1 <= sw_io.cmd.bits.inst.xs1 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.xd <= sw_io.cmd.bits.inst.xd @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.rs2 <= sw_io.cmd.bits.inst.rs2 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.rs1 <= sw_io.cmd.bits.inst.rs1 @[ComposerSystem.scala 160:16]
    ioAsCmdSrc.bits.inst.rd <= sw_io.cmd.bits.inst.rd @[ComposerSystem.scala 160:16]
    cmdArbiter.io.in[0] <= ioAsCmdSrc @[ComposerSystem.scala 166:27]
    inst cmd of Queue @[Decoupled.scala 375:21]
    cmd.clock <= clock
    cmd.reset <= reset
    cmd.io.enq.valid <= cmdArbiter.io.out.valid @[Decoupled.scala 377:22]
    cmd.io.enq.bits.payload2 <= cmdArbiter.io.out.bits.payload2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.payload1 <= cmdArbiter.io.out.bits.payload1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.core_id <= cmdArbiter.io.out.bits.core_id @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.funct <= cmdArbiter.io.out.bits.inst.funct @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.system_id <= cmdArbiter.io.out.bits.inst.system_id @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.opcode <= cmdArbiter.io.out.bits.inst.opcode @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs2 <= cmdArbiter.io.out.bits.inst.xs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs1 <= cmdArbiter.io.out.bits.inst.xs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xd <= cmdArbiter.io.out.bits.inst.xd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs2 <= cmdArbiter.io.out.bits.inst.rs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs1 <= cmdArbiter.io.out.bits.inst.rs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rd <= cmdArbiter.io.out.bits.inst.rd @[Decoupled.scala 378:21]
    cmdArbiter.io.out.ready <= cmd.io.enq.ready @[Decoupled.scala 379:17]
    node _cmd_io_deq_ready_T = neq(cmd.io.deq.bits.inst.funct, UInt<1>("h1")) @[ComposerSystem.scala 194:22]
    wire _cmd_io_deq_ready_WIRE : UInt<1>[1] @[ComposerSystem.scala 194:57]
    _cmd_io_deq_ready_WIRE[0] <= cores.io.req.ready @[ComposerSystem.scala 194:57]
    node _cmd_io_deq_ready_T_1 = or(_cmd_io_deq_ready_T, _cmd_io_deq_ready_WIRE[UInt<1>("h0")]) @[ComposerSystem.scala 194:47]
    cmd.io.deq.ready <= _cmd_io_deq_ready_T_1 @[ComposerSystem.scala 194:13]
    inst coreResps_rq of Queue_1 @[ComposerSystem.scala 212:22]
    coreResps_rq.clock <= clock
    coreResps_rq.reset <= reset
    coreResps_rq.io.enq <= cores.io.resp @[ComposerSystem.scala 213:17]
    respArbiter.io.in[0] <= coreResps_rq.io.deq @[ComposerSystem.scala 219:21]
    wire resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, system_id : UInt<4>, core_id : UInt<8>, data : UInt<47>}} @[ComposerSystem.scala 220:18]
    resp.valid <= respArbiter.io.out.valid @[ComposerSystem.scala 221:14]
    resp.bits.rd <= respArbiter.io.out.bits.rd @[ComposerSystem.scala 222:16]
    resp.bits.core_id <= respArbiter.io.chosen @[ComposerSystem.scala 223:21]
    resp.bits.data <= respArbiter.io.out.bits.data @[ComposerSystem.scala 224:18]
    resp.bits.system_id <= UInt<1>("h0") @[ComposerSystem.scala 225:23]
    respArbiter.io.out.ready <= resp.ready @[ComposerSystem.scala 226:28]
    inst respQ of Queue_2 @[Decoupled.scala 375:21]
    respQ.clock <= clock
    respQ.reset <= reset
    respQ.io.enq.valid <= resp.valid @[Decoupled.scala 377:22]
    respQ.io.enq.bits.data <= resp.bits.data @[Decoupled.scala 378:21]
    respQ.io.enq.bits.core_id <= resp.bits.core_id @[Decoupled.scala 378:21]
    respQ.io.enq.bits.system_id <= resp.bits.system_id @[Decoupled.scala 378:21]
    respQ.io.enq.bits.rd <= resp.bits.rd @[Decoupled.scala 378:21]
    resp.ready <= respQ.io.enq.ready @[Decoupled.scala 379:17]
    sw_io.resp.bits <= respQ.io.deq.bits @[ComposerSystem.scala 278:20]
    sw_io.resp.valid <= respQ.io.deq.valid @[ComposerSystem.scala 278:20]
    respQ.io.deq.ready <= sw_io.resp.ready @[ComposerSystem.scala 278:20]
    node _channelSelect_T = bits(cmd.io.deq.bits.inst.rs2, 2, 0) @[ComposerSystem.scala 301:44]
    node channelSelect = cat(_channelSelect_T, cmd.io.deq.bits.inst.rs1) @[Cat.scala 33:92]
    node _coreStart_T = and(cmd.io.deq.ready, cmd.io.deq.valid) @[Decoupled.scala 51:35]
    node _coreStart_T_1 = eq(cmd.io.deq.bits.inst.funct, UInt<1>("h1")) @[ComposerSystem.scala 304:39]
    node _coreStart_T_2 = and(_coreStart_T, _coreStart_T_1) @[ComposerSystem.scala 304:30]
    node _coreStart_T_3 = eq(cmd.io.deq.bits.core_id, UInt<1>("h0")) @[ComposerSystem.scala 304:78]
    node coreStart = and(_coreStart_T_2, _coreStart_T_3) @[ComposerSystem.scala 304:64]
    wire pipeIn : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}} @[ComposerSystem.scala 306:24]
    reg cmdPipePipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    cmdPipePipe_valid <= UInt<1>("h1") @[Valid.scala 130:22]
    reg cmdPipePipe_bits : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), cmdPipePipe_bits) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      cmdPipePipe_bits <= pipeIn @[Reg.scala 20:22]
    reg cmdPipePipe_valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    cmdPipePipe_valid_1 <= cmdPipePipe_valid @[Valid.scala 130:22]
    reg cmdPipePipe_bits_1 : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), cmdPipePipe_bits_1) @[Reg.scala 19:16]
    when cmdPipePipe_valid : @[Reg.scala 20:18]
      cmdPipePipe_bits_1 <= cmdPipePipe_bits @[Reg.scala 20:22]
    reg cmdPipePipe_valid_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    cmdPipePipe_valid_2 <= cmdPipePipe_valid_1 @[Valid.scala 130:22]
    reg cmdPipePipe_bits_2 : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), cmdPipePipe_bits_2) @[Reg.scala 19:16]
    when cmdPipePipe_valid_1 : @[Reg.scala 20:18]
      cmdPipePipe_bits_2 <= cmdPipePipe_bits_1 @[Reg.scala 20:22]
    reg cmdPipePipe_valid_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    cmdPipePipe_valid_3 <= cmdPipePipe_valid_2 @[Valid.scala 130:22]
    reg cmdPipePipe_bits_3 : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), cmdPipePipe_bits_3) @[Reg.scala 19:16]
    when cmdPipePipe_valid_2 : @[Reg.scala 20:18]
      cmdPipePipe_bits_3 <= cmdPipePipe_bits_2 @[Reg.scala 20:22]
    wire cmdPipe : { valid : UInt<1>, bits : { start : UInt<1>, cmdP : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}} @[Valid.scala 125:21]
    cmdPipe.valid <= cmdPipePipe_valid_3 @[Valid.scala 126:17]
    cmdPipe.bits <= cmdPipePipe_bits_3 @[Valid.scala 127:16]
    pipeIn.start <= coreStart @[ComposerSystem.scala 311:20]
    pipeIn.cmdP <= cmd.io.deq.bits @[ComposerSystem.scala 312:19]
    node _cores_io_req_valid_T = and(cmdPipe.bits.start, cmdPipe.valid) @[ComposerSystem.scala 313:47]
    cores.io.req.valid <= _cores_io_req_valid_T @[ComposerSystem.scala 313:25]
    cores.io.req.bits.payload2 <= cmdPipe.bits.cmdP.payload2 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.payload1 <= cmdPipe.bits.cmdP.payload1 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.core_id <= cmdPipe.bits.cmdP.core_id @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.funct <= cmdPipe.bits.cmdP.inst.funct @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.system_id <= cmdPipe.bits.cmdP.inst.system_id @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.opcode <= cmdPipe.bits.cmdP.inst.opcode @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.xs2 <= cmdPipe.bits.cmdP.inst.xs2 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.xs1 <= cmdPipe.bits.cmdP.inst.xs1 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.xd <= cmdPipe.bits.cmdP.inst.xd @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.rs2 <= cmdPipe.bits.cmdP.inst.rs2 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.rs1 <= cmdPipe.bits.cmdP.inst.rs1 @[ComposerSystem.scala 314:24]
    cores.io.req.bits.inst.rd <= cmdPipe.bits.cmdP.inst.rd @[ComposerSystem.scala 314:24]
    node _cmdFireLatch_T = and(cmd.io.deq.ready, cmd.io.deq.valid) @[Decoupled.scala 51:35]
    reg cmdFireLatch : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmdFireLatch) @[ComposerSystem.scala 322:29]
    cmdFireLatch <= _cmdFireLatch_T @[ComposerSystem.scala 322:29]
    reg cmdBitsLatch : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), cmdBitsLatch) @[ComposerSystem.scala 323:29]
    cmdBitsLatch <= cmd.io.deq.bits @[ComposerSystem.scala 323:29]
    node _addr_func_live_T = eq(cmd.io.deq.bits.inst.funct, UInt<1>("h0")) @[ComposerSystem.scala 327:44]
    node _addr_func_live_T_1 = and(cmd.io.deq.ready, cmd.io.deq.valid) @[Decoupled.scala 51:35]
    node addr_func_live = and(_addr_func_live_T, _addr_func_live_T_1) @[ComposerSystem.scala 327:68]
    node txLenFromCmd = bits(cmd.io.deq.bits.payload1, 33, 0) @[ComposerSystem.scala 333:39]
    reg tx_len : UInt<34>, clock with :
      reset => (UInt<1>("h0"), tx_len) @[ComposerSystem.scala 342:25]
    reg tx_addr_start : UInt<34>, clock with :
      reset => (UInt<1>("h0"), tx_addr_start) @[ComposerSystem.scala 343:32]
    node _T = eq(cmd.io.deq.bits.core_id, UInt<1>("h0")) @[ComposerSystem.scala 344:43]
    node _T_1 = and(addr_func_live, _T) @[ComposerSystem.scala 344:29]
    node _T_2 = eq(channelSelect, UInt<1>("h0")) @[ComposerSystem.scala 344:73]
    node _T_3 = and(_T_1, _T_2) @[ComposerSystem.scala 344:56]
    when _T_3 : @[ComposerSystem.scala 344:91]
      tx_len <= txLenFromCmd @[ComposerSystem.scala 345:18]
      node _tx_addr_start_T = bits(cmd.io.deq.bits.payload2, 33, 0) @[ComposerSystem.scala 346:45]
      tx_addr_start <= _tx_addr_start_T @[ComposerSystem.scala 346:25]
    node _cores_WriteChannel_valid_T = eq(cmdBitsLatch.inst.funct, UInt<1>("h1")) @[ComposerSystem.scala 348:50]
    node _cores_WriteChannel_valid_T_1 = and(cmdFireLatch, _cores_WriteChannel_valid_T) @[ComposerSystem.scala 348:36]
    node _cores_WriteChannel_valid_T_2 = eq(cmdBitsLatch.core_id, UInt<1>("h0")) @[ComposerSystem.scala 348:94]
    node _cores_WriteChannel_valid_T_3 = and(_cores_WriteChannel_valid_T_1, _cores_WriteChannel_valid_T_2) @[ComposerSystem.scala 348:75]
    cores.myWriters_WriteChannel.valid <= _cores_WriteChannel_valid_T_3 @[ComposerSystem.scala 348:20]
    cores.myWriters_WriteChannel.bits.addr <= tx_addr_start @[ComposerSystem.scala 349:24]
    cores.myWriters_WriteChannel.bits.len <= tx_len @[ComposerSystem.scala 350:23]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, count : UInt<2>}

    cmem ram : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, chosen : UInt<0>}

    wire choice : UInt @[Arbiter.scala 89:41]
    choice <= UInt<1>("h0") @[Arbiter.scala 89:41]
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[UInt<1>("h0")].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[UInt<1>("h0")].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    reg lastGrant : UInt<0>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_1) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, count : UInt<2>}

    cmem ram : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module RoccCommandRouter :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}[2], busy : UInt<1>}

    clock is invalid
    reset is invalid
    io is invalid
    inst cmd of Queue_4 @[Decoupled.scala 375:21]
    cmd.clock <= clock
    cmd.reset <= reset
    cmd.io.enq.valid <= io.in.valid @[Decoupled.scala 377:22]
    cmd.io.enq.bits.status.uie <= io.in.bits.status.uie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sie <= io.in.bits.status.sie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.hie <= io.in.bits.status.hie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mie <= io.in.bits.status.mie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.upie <= io.in.bits.status.upie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.spie <= io.in.bits.status.spie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.ube <= io.in.bits.status.ube @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpie <= io.in.bits.status.mpie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.spp <= io.in.bits.status.spp @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.vs <= io.in.bits.status.vs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpp <= io.in.bits.status.mpp @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.fs <= io.in.bits.status.fs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.xs <= io.in.bits.status.xs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mprv <= io.in.bits.status.mprv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sum <= io.in.bits.status.sum @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mxr <= io.in.bits.status.mxr @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tvm <= io.in.bits.status.tvm @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tw <= io.in.bits.status.tw @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tsr <= io.in.bits.status.tsr @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.zero1 <= io.in.bits.status.zero1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sd_rv32 <= io.in.bits.status.sd_rv32 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.uxl <= io.in.bits.status.uxl @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sxl <= io.in.bits.status.sxl @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sbe <= io.in.bits.status.sbe @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mbe <= io.in.bits.status.mbe @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.gva <= io.in.bits.status.gva @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpv <= io.in.bits.status.mpv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.zero2 <= io.in.bits.status.zero2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sd <= io.in.bits.status.sd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.v <= io.in.bits.status.v @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.prv <= io.in.bits.status.prv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.dv <= io.in.bits.status.dv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.dprv <= io.in.bits.status.dprv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.isa <= io.in.bits.status.isa @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.wfi <= io.in.bits.status.wfi @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.cease <= io.in.bits.status.cease @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.debug <= io.in.bits.status.debug @[Decoupled.scala 378:21]
    cmd.io.enq.bits.rs2 <= io.in.bits.rs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.rs1 <= io.in.bits.rs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.opcode <= io.in.bits.inst.opcode @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rd <= io.in.bits.inst.rd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs2 <= io.in.bits.inst.xs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs1 <= io.in.bits.inst.xs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xd <= io.in.bits.inst.xd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs1 <= io.in.bits.inst.rs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs2 <= io.in.bits.inst.rs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.funct <= io.in.bits.inst.funct @[Decoupled.scala 378:21]
    io.in.ready <= cmd.io.enq.ready @[Decoupled.scala 379:17]
    node cmdReadys_me = eq(UInt<4>("hb"), cmd.io.deq.bits.inst.opcode) @[LazyRoCC.scala 390:41]
    node _cmdReadys_io_out_0_valid_T = and(cmd.io.deq.valid, cmdReadys_me) @[LazyRoCC.scala 412:28]
    io.out[0].valid <= _cmdReadys_io_out_0_valid_T @[LazyRoCC.scala 412:15]
    io.out[0].bits <= cmd.io.deq.bits @[LazyRoCC.scala 413:14]
    node cmdReadys_0 = and(io.out[0].ready, cmdReadys_me) @[LazyRoCC.scala 414:15]
    node cmdReadys_me_1 = eq(UInt<7>("h7b"), cmd.io.deq.bits.inst.opcode) @[LazyRoCC.scala 390:41]
    node _cmdReadys_io_out_1_valid_T = and(cmd.io.deq.valid, cmdReadys_me_1) @[LazyRoCC.scala 412:28]
    io.out[1].valid <= _cmdReadys_io_out_1_valid_T @[LazyRoCC.scala 412:15]
    io.out[1].bits <= cmd.io.deq.bits @[LazyRoCC.scala 413:14]
    node cmdReadys_1 = and(io.out[1].ready, cmdReadys_me_1) @[LazyRoCC.scala 414:15]
    node _cmd_io_deq_ready_T = or(cmdReadys_0, cmdReadys_1) @[LazyRoCC.scala 416:35]
    cmd.io.deq.ready <= _cmd_io_deq_ready_T @[LazyRoCC.scala 416:13]
    io.busy <= cmd.io.deq.valid @[LazyRoCC.scala 417:11]
    node _T = add(cmdReadys_0, cmdReadys_1) @[Bitwise.scala 51:90]
    node _T_1 = bits(_T, 1, 0) @[Bitwise.scala 51:90]
    node _T_2 = leq(_T_1, UInt<1>("h1")) @[LazyRoCC.scala 419:30]
    node _T_3 = bits(reset, 0, 0) @[LazyRoCC.scala 419:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[LazyRoCC.scala 419:9]
    when _T_4 : @[LazyRoCC.scala 419:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[LazyRoCC.scala 419:9]
      when _T_5 : @[LazyRoCC.scala 419:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: Custom opcode matched for more than one accelerator\n    at LazyRoCC.scala:419 assert(PopCount(cmdReadys) <= 1.U,\n") : printf @[LazyRoCC.scala 419:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[LazyRoCC.scala 419:9]


  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}}, count : UInt<2>}

    cmem ram : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module RRArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}, chosen : UInt<0>}

    wire choice : UInt @[Arbiter.scala 89:41]
    choice <= UInt<1>("h0") @[Arbiter.scala 89:41]
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[UInt<1>("h0")].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[UInt<1>("h0")].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
    reg lastGrant : UInt<0>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_1) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]

  module ComposerAcc :
    input clock : Clock
    input reset : Reset
    output auto : { EnergyCalc_memory_endpoint_identity_out_4 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, EnergyCalc_memory_endpoint_identity_out_3 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, EnergyCalc_memory_endpoint_identity_out_2 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, EnergyCalc_memory_endpoint_identity_out_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, EnergyCalc_memory_endpoint_identity_out_0 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    inst EnergyCalc of ComposerSystem @[Accelerator.scala 33:16]
    EnergyCalc.clock is invalid
    EnergyCalc.reset is invalid
    EnergyCalc.auto is invalid
    EnergyCalc.sw_io is invalid
    EnergyCalc.busy is invalid
    EnergyCalc.clock <= clock
    EnergyCalc.reset <= reset
    auto.EnergyCalc_memory_endpoint_identity_out_0 <- EnergyCalc.auto.memory_endpoint_identity_out_0 @[LazyModule.scala 368:12]
    auto.EnergyCalc_memory_endpoint_identity_out_1 <- EnergyCalc.auto.memory_endpoint_identity_out_1 @[LazyModule.scala 368:12]
    auto.EnergyCalc_memory_endpoint_identity_out_2 <- EnergyCalc.auto.memory_endpoint_identity_out_2 @[LazyModule.scala 368:12]
    auto.EnergyCalc_memory_endpoint_identity_out_3 <- EnergyCalc.auto.memory_endpoint_identity_out_3 @[LazyModule.scala 368:12]
    auto.EnergyCalc_memory_endpoint_identity_out_4 <- EnergyCalc.auto.memory_endpoint_identity_out_4 @[LazyModule.scala 368:12]
    inst cmd of Queue_3 @[Decoupled.scala 375:21]
    cmd.clock <= clock
    cmd.reset <= reset
    cmd.io.enq.valid <= io.cmd.valid @[Decoupled.scala 377:22]
    cmd.io.enq.bits.status.uie <= io.cmd.bits.status.uie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sie <= io.cmd.bits.status.sie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.hie <= io.cmd.bits.status.hie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mie <= io.cmd.bits.status.mie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.upie <= io.cmd.bits.status.upie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.spie <= io.cmd.bits.status.spie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.ube <= io.cmd.bits.status.ube @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpie <= io.cmd.bits.status.mpie @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.spp <= io.cmd.bits.status.spp @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.vs <= io.cmd.bits.status.vs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpp <= io.cmd.bits.status.mpp @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.fs <= io.cmd.bits.status.fs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.xs <= io.cmd.bits.status.xs @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mprv <= io.cmd.bits.status.mprv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sum <= io.cmd.bits.status.sum @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mxr <= io.cmd.bits.status.mxr @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tvm <= io.cmd.bits.status.tvm @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tw <= io.cmd.bits.status.tw @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.tsr <= io.cmd.bits.status.tsr @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.zero1 <= io.cmd.bits.status.zero1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sd_rv32 <= io.cmd.bits.status.sd_rv32 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.uxl <= io.cmd.bits.status.uxl @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sxl <= io.cmd.bits.status.sxl @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sbe <= io.cmd.bits.status.sbe @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mbe <= io.cmd.bits.status.mbe @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.gva <= io.cmd.bits.status.gva @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.mpv <= io.cmd.bits.status.mpv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.zero2 <= io.cmd.bits.status.zero2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.sd <= io.cmd.bits.status.sd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.v <= io.cmd.bits.status.v @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.prv <= io.cmd.bits.status.prv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.dv <= io.cmd.bits.status.dv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.dprv <= io.cmd.bits.status.dprv @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.isa <= io.cmd.bits.status.isa @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.wfi <= io.cmd.bits.status.wfi @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.cease <= io.cmd.bits.status.cease @[Decoupled.scala 378:21]
    cmd.io.enq.bits.status.debug <= io.cmd.bits.status.debug @[Decoupled.scala 378:21]
    cmd.io.enq.bits.rs2 <= io.cmd.bits.rs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.rs1 <= io.cmd.bits.rs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.opcode <= io.cmd.bits.inst.opcode @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rd <= io.cmd.bits.inst.rd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs2 <= io.cmd.bits.inst.xs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xs1 <= io.cmd.bits.inst.xs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.xd <= io.cmd.bits.inst.xd @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs1 <= io.cmd.bits.inst.rs1 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.rs2 <= io.cmd.bits.inst.rs2 @[Decoupled.scala 378:21]
    cmd.io.enq.bits.inst.funct <= io.cmd.bits.inst.funct @[Decoupled.scala 378:21]
    io.cmd.ready <= cmd.io.enq.ready @[Decoupled.scala 379:17]
    inst cmdArb of RRArbiter_1 @[Accelerator.scala 63:22]
    cmdArb.clock <= clock
    cmdArb.reset <= reset
    cmdArb.io.in[0] <= cmd.io.deq @[Accelerator.scala 64:19]
    inst cmdRouter of RoccCommandRouter @[Accelerator.scala 69:25]
    cmdRouter.clock <= clock
    cmdRouter.reset <= reset
    cmdRouter.io.in <= cmdArb.io.out @[Accelerator.scala 70:19]
    wire accCmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { rd : UInt<5>, rs1 : UInt<5>, rs2 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, opcode : UInt<7>, system_id : UInt<4>, funct : UInt<3>}, core_id : UInt<8>, payload1 : UInt<56>, payload2 : UInt<64>}} @[Accelerator.scala 72:20]
    accCmd.valid <= cmdRouter.io.out[1].valid @[Accelerator.scala 73:16]
    cmdRouter.io.out[1].ready <= accCmd.ready @[Accelerator.scala 74:29]
    accCmd.bits.inst.rs1 <= cmdRouter.io.out[1].bits.inst.rs1 @[Accelerator.scala 75:24]
    accCmd.bits.inst.rs2 <= cmdRouter.io.out[1].bits.inst.rs2 @[Accelerator.scala 76:24]
    accCmd.bits.inst.rd <= cmdRouter.io.out[1].bits.inst.rd @[Accelerator.scala 77:23]
    accCmd.bits.inst.xd <= cmdRouter.io.out[1].bits.inst.xd @[Accelerator.scala 78:23]
    accCmd.bits.inst.xs1 <= cmdRouter.io.out[1].bits.inst.xs1 @[Accelerator.scala 79:24]
    accCmd.bits.inst.xs2 <= cmdRouter.io.out[1].bits.inst.xs2 @[Accelerator.scala 80:24]
    accCmd.bits.inst.opcode <= cmdRouter.io.out[1].bits.inst.opcode @[Accelerator.scala 81:27]
    node _accCmd_bits_inst_funct_T = bits(cmdRouter.io.out[1].bits.inst.funct, 2, 0) @[Accelerator.scala 83:64]
    accCmd.bits.inst.funct <= _accCmd_bits_inst_funct_T @[Accelerator.scala 83:26]
    node _accCmd_bits_inst_system_id_T = bits(cmdRouter.io.out[1].bits.inst.funct, 6, 3) @[Accelerator.scala 84:68]
    accCmd.bits.inst.system_id <= _accCmd_bits_inst_system_id_T @[Accelerator.scala 84:30]
    node _accCmd_bits_core_id_T = bits(cmdRouter.io.out[1].bits.rs1, 63, 56) @[Accelerator.scala 86:54]
    accCmd.bits.core_id <= _accCmd_bits_core_id_T @[Accelerator.scala 86:23]
    node _accCmd_bits_payload1_T = bits(cmdRouter.io.out[1].bits.rs1, 55, 0) @[Accelerator.scala 87:55]
    accCmd.bits.payload1 <= _accCmd_bits_payload1_T @[Accelerator.scala 87:24]
    accCmd.bits.payload2 <= cmdRouter.io.out[1].bits.rs2 @[Accelerator.scala 88:24]
    accCmd.ready <= UInt<1>("h0") @[Accelerator.scala 91:16]
    reg waitingToFlush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Accelerator.scala 93:31]
    node _cmdRouter_io_out_0_ready_T = eq(waitingToFlush, UInt<1>("h0")) @[Accelerator.scala 94:32]
    cmdRouter.io.out[0].ready <= _cmdRouter_io_out_0_ready_T @[Accelerator.scala 94:29]
    node _T = and(cmdRouter.io.out[0].ready, cmdRouter.io.out[0].valid) @[Decoupled.scala 51:35]
    when _T : @[Accelerator.scala 95:35]
      waitingToFlush <= UInt<1>("h1") @[Accelerator.scala 96:20]
    inst systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue of Queue_5 @[Accelerator.scala 100:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.clock <= clock
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.reset <= reset
    node _systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue_io_enq_valid_T = eq(UInt<1>("h0"), accCmd.bits.inst.system_id) @[Accelerator.scala 106:57]
    node _systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue_io_enq_valid_T_1 = and(accCmd.valid, _systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue_io_enq_valid_T) @[Accelerator.scala 106:44]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.valid <= _systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue_io_enq_valid_T_1 @[Accelerator.scala 106:28]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.payload2 <= accCmd.bits.payload2 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.payload1 <= accCmd.bits.payload1 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.core_id <= accCmd.bits.core_id @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.funct <= accCmd.bits.inst.funct @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.system_id <= accCmd.bits.inst.system_id @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.opcode <= accCmd.bits.inst.opcode @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.xs2 <= accCmd.bits.inst.xs2 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.xs1 <= accCmd.bits.inst.xs1 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.xd <= accCmd.bits.inst.xd @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.rs2 <= accCmd.bits.inst.rs2 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.rs1 <= accCmd.bits.inst.rs1 @[Accelerator.scala 107:27]
    systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.bits.inst.rd <= accCmd.bits.inst.rd @[Accelerator.scala 107:27]
    node _systemSoftwareResps_T = eq(accCmd.bits.inst.system_id, UInt<1>("h0")) @[Accelerator.scala 108:21]
    when _systemSoftwareResps_T : @[Accelerator.scala 108:36]
      accCmd.ready <= systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.enq.ready @[Accelerator.scala 109:20]
    EnergyCalc.sw_io.cmd <= systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.deq @[Accelerator.scala 113:37]
    when waitingToFlush : @[Accelerator.scala 116:26]
      systemSoftwareResps_ComposerSystemParams1EnergyCalcdesignenergyCalcwithEnergyCalcanonfunlessinitgreater1anonfunapply1Lambda60810x0000000802076e905299be2bComposerCoreParamsListCChannelParamsWriteChannel1WriteChannelCChannelParamsdata1ScratchpadCChannelParamshalfNonBonded1ScratchpadCChannelParamsnonBonded1ScratchpadCChannelParamssolvated1Scratchpad00132truefalse_command_queue.io.deq.ready <= UInt<1>("h0") @[Accelerator.scala 117:30]
      EnergyCalc.sw_io.cmd.valid <= UInt<1>("h0") @[Accelerator.scala 118:45]
    inst respArbiter of RRArbiter_2 @[Accelerator.scala 127:29]
    respArbiter.clock <= clock
    respArbiter.reset <= reset
    node respArbiter_io_in_0_bits_data_lo = cat(EnergyCalc.sw_io.resp.bits.rd, EnergyCalc.sw_io.resp.bits.data) @[Cat.scala 33:92]
    node respArbiter_io_in_0_bits_data_hi = cat(EnergyCalc.sw_io.resp.bits.system_id, EnergyCalc.sw_io.resp.bits.core_id) @[Cat.scala 33:92]
    node _respArbiter_io_in_0_bits_data_T = cat(respArbiter_io_in_0_bits_data_hi, respArbiter_io_in_0_bits_data_lo) @[Cat.scala 33:92]
    respArbiter.io.in[0].bits.data <= _respArbiter_io_in_0_bits_data_T @[Accelerator.scala 129:23]
    respArbiter.io.in[0].bits.rd <= EnergyCalc.sw_io.resp.bits.rd @[Accelerator.scala 130:21]
    respArbiter.io.in[0].valid <= EnergyCalc.sw_io.resp.valid @[Accelerator.scala 131:19]
    EnergyCalc.sw_io.resp.ready <= respArbiter.io.in[0].ready @[Accelerator.scala 132:19]
    io.resp.bits <= respArbiter.io.out.bits @[Accelerator.scala 134:24]
    io.resp.valid <= respArbiter.io.out.valid @[Accelerator.scala 134:24]
    respArbiter.io.out.ready <= io.resp.ready @[Accelerator.scala 134:24]

  module TLXbar :
    input clock : Clock
    input reset : Reset
    output auto : { flip in_4 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, flip in_3 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, flip in_2 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, flip in_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, flip in_0 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire bundleIn_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_1 is invalid @[Nodes.scala 1215:84]
    wire bundleIn_2 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_2 is invalid @[Nodes.scala 1215:84]
    wire bundleIn_3 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_3 is invalid @[Nodes.scala 1215:84]
    wire bundleIn_4 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_4 is invalid @[Nodes.scala 1215:84]
    wire x1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in_0 @[LazyModule.scala 366:16]
    bundleIn_1 <- auto.in_1 @[LazyModule.scala 366:16]
    bundleIn_2 <- auto.in_2 @[LazyModule.scala 366:16]
    bundleIn_3 <- auto.in_3 @[LazyModule.scala 366:16]
    bundleIn_4 <- auto.in_4 @[LazyModule.scala 366:16]
    wire _WIRE : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Xbar.scala 135:50]
    wire out : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Bundle_ACancel.scala 54:19]
    out.a.earlyValid <= bundleIn_0.a.valid @[Bundle_ACancel.scala 55:22]
    out.a.lateCancel <= UInt<1>("h0") @[Bundle_ACancel.scala 56:22]
    out.a.bits <= bundleIn_0.a.bits @[Bundle_ACancel.scala 57:16]
    bundleIn_0.a.ready <= out.a.ready @[Bundle_ACancel.scala 58:16]
    wire _WIRE_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_1.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.source <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_1.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_1.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_1.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<1>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_2.bits <= _WIRE_1.bits @[Bundles.scala 259:61]
    _WIRE_2.valid <= _WIRE_1.valid @[Bundles.scala 259:61]
    _WIRE_2.ready <= _WIRE_1.ready @[Bundles.scala 259:61]
    _WIRE_2.bits.corrupt <= out.b.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE_2.bits.data <= out.b.bits.data @[BundleMap.scala 247:19]
    _WIRE_2.bits.mask <= out.b.bits.mask @[BundleMap.scala 247:19]
    _WIRE_2.bits.address <= out.b.bits.address @[BundleMap.scala 247:19]
    _WIRE_2.bits.source <= out.b.bits.source @[BundleMap.scala 247:19]
    _WIRE_2.bits.size <= out.b.bits.size @[BundleMap.scala 247:19]
    _WIRE_2.bits.param <= out.b.bits.param @[BundleMap.scala 247:19]
    _WIRE_2.bits.opcode <= out.b.bits.opcode @[BundleMap.scala 247:19]
    _WIRE_2.valid <= out.b.valid @[BundleMap.scala 247:19]
    out.b.ready <= _WIRE_2.ready @[BundleMap.scala 247:19]
    wire _WIRE_3 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_3.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.source <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_3.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_3.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_3.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_4 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<1>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_4.bits <= _WIRE_3.bits @[Bundles.scala 260:61]
    _WIRE_4.valid <= _WIRE_3.valid @[Bundles.scala 260:61]
    _WIRE_4.ready <= _WIRE_3.ready @[Bundles.scala 260:61]
    out.c.bits.corrupt <= _WIRE_4.bits.corrupt @[BundleMap.scala 247:19]
    out.c.bits.data <= _WIRE_4.bits.data @[BundleMap.scala 247:19]
    out.c.bits.address <= _WIRE_4.bits.address @[BundleMap.scala 247:19]
    out.c.bits.source <= _WIRE_4.bits.source @[BundleMap.scala 247:19]
    out.c.bits.size <= _WIRE_4.bits.size @[BundleMap.scala 247:19]
    out.c.bits.param <= _WIRE_4.bits.param @[BundleMap.scala 247:19]
    out.c.bits.opcode <= _WIRE_4.bits.opcode @[BundleMap.scala 247:19]
    out.c.valid <= _WIRE_4.valid @[BundleMap.scala 247:19]
    _WIRE_4.ready <= out.c.ready @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.corrupt <= out.d.bits.corrupt @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.data <= out.d.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.denied <= out.d.bits.denied @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.sink <= out.d.bits.sink @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.source <= out.d.bits.source @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.size <= out.d.bits.size @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.param <= out.d.bits.param @[BundleMap.scala 247:19]
    bundleIn_0.d.bits.opcode <= out.d.bits.opcode @[BundleMap.scala 247:19]
    bundleIn_0.d.valid <= out.d.valid @[BundleMap.scala 247:19]
    out.d.ready <= bundleIn_0.d.ready @[BundleMap.scala 247:19]
    wire _WIRE_5 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_5.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_5.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_5.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_6 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_6.bits <= _WIRE_5.bits @[Bundles.scala 262:61]
    _WIRE_6.valid <= _WIRE_5.valid @[Bundles.scala 262:61]
    _WIRE_6.ready <= _WIRE_5.ready @[Bundles.scala 262:61]
    out.e.bits.sink <= _WIRE_6.bits.sink @[BundleMap.scala 247:19]
    out.e.valid <= _WIRE_6.valid @[BundleMap.scala 247:19]
    _WIRE_6.ready <= out.e.ready @[BundleMap.scala 247:19]
    wire out_1 : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Bundle_ACancel.scala 54:19]
    out_1.a.earlyValid <= bundleIn_1.a.valid @[Bundle_ACancel.scala 55:22]
    out_1.a.lateCancel <= UInt<1>("h0") @[Bundle_ACancel.scala 56:22]
    out_1.a.bits <= bundleIn_1.a.bits @[Bundle_ACancel.scala 57:16]
    bundleIn_1.a.ready <= out_1.a.ready @[Bundle_ACancel.scala 58:16]
    wire _WIRE_7 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_7.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.source <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_7.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_7.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_7.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_8 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_8.bits <= _WIRE_7.bits @[Bundles.scala 259:61]
    _WIRE_8.valid <= _WIRE_7.valid @[Bundles.scala 259:61]
    _WIRE_8.ready <= _WIRE_7.ready @[Bundles.scala 259:61]
    _WIRE_8.bits.corrupt <= out_1.b.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE_8.bits.data <= out_1.b.bits.data @[BundleMap.scala 247:19]
    _WIRE_8.bits.mask <= out_1.b.bits.mask @[BundleMap.scala 247:19]
    _WIRE_8.bits.address <= out_1.b.bits.address @[BundleMap.scala 247:19]
    _WIRE_8.bits.source <= out_1.b.bits.source @[BundleMap.scala 247:19]
    _WIRE_8.bits.size <= out_1.b.bits.size @[BundleMap.scala 247:19]
    _WIRE_8.bits.param <= out_1.b.bits.param @[BundleMap.scala 247:19]
    _WIRE_8.bits.opcode <= out_1.b.bits.opcode @[BundleMap.scala 247:19]
    _WIRE_8.valid <= out_1.b.valid @[BundleMap.scala 247:19]
    out_1.b.ready <= _WIRE_8.ready @[BundleMap.scala 247:19]
    wire _WIRE_9 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_9.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.source <= UInt<4>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_9.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_9.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_9.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_10 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_10.bits <= _WIRE_9.bits @[Bundles.scala 260:61]
    _WIRE_10.valid <= _WIRE_9.valid @[Bundles.scala 260:61]
    _WIRE_10.ready <= _WIRE_9.ready @[Bundles.scala 260:61]
    out_1.c.bits.corrupt <= _WIRE_10.bits.corrupt @[BundleMap.scala 247:19]
    out_1.c.bits.data <= _WIRE_10.bits.data @[BundleMap.scala 247:19]
    out_1.c.bits.address <= _WIRE_10.bits.address @[BundleMap.scala 247:19]
    out_1.c.bits.source <= _WIRE_10.bits.source @[BundleMap.scala 247:19]
    out_1.c.bits.size <= _WIRE_10.bits.size @[BundleMap.scala 247:19]
    out_1.c.bits.param <= _WIRE_10.bits.param @[BundleMap.scala 247:19]
    out_1.c.bits.opcode <= _WIRE_10.bits.opcode @[BundleMap.scala 247:19]
    out_1.c.valid <= _WIRE_10.valid @[BundleMap.scala 247:19]
    _WIRE_10.ready <= out_1.c.ready @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.corrupt <= out_1.d.bits.corrupt @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.data <= out_1.d.bits.data @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.denied <= out_1.d.bits.denied @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.sink <= out_1.d.bits.sink @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.source <= out_1.d.bits.source @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.size <= out_1.d.bits.size @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.param <= out_1.d.bits.param @[BundleMap.scala 247:19]
    bundleIn_1.d.bits.opcode <= out_1.d.bits.opcode @[BundleMap.scala 247:19]
    bundleIn_1.d.valid <= out_1.d.valid @[BundleMap.scala 247:19]
    out_1.d.ready <= bundleIn_1.d.ready @[BundleMap.scala 247:19]
    wire _WIRE_11 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_11.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_11.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_11.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_12 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_12.bits <= _WIRE_11.bits @[Bundles.scala 262:61]
    _WIRE_12.valid <= _WIRE_11.valid @[Bundles.scala 262:61]
    _WIRE_12.ready <= _WIRE_11.ready @[Bundles.scala 262:61]
    out_1.e.bits.sink <= _WIRE_12.bits.sink @[BundleMap.scala 247:19]
    out_1.e.valid <= _WIRE_12.valid @[BundleMap.scala 247:19]
    _WIRE_12.ready <= out_1.e.ready @[BundleMap.scala 247:19]
    wire out_2 : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Bundle_ACancel.scala 54:19]
    out_2.a.earlyValid <= bundleIn_2.a.valid @[Bundle_ACancel.scala 55:22]
    out_2.a.lateCancel <= UInt<1>("h0") @[Bundle_ACancel.scala 56:22]
    out_2.a.bits <= bundleIn_2.a.bits @[Bundle_ACancel.scala 57:16]
    bundleIn_2.a.ready <= out_2.a.ready @[Bundle_ACancel.scala 58:16]
    wire _WIRE_13 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_13.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.source <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_13.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_13.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_13.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_14 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_14.bits <= _WIRE_13.bits @[Bundles.scala 259:61]
    _WIRE_14.valid <= _WIRE_13.valid @[Bundles.scala 259:61]
    _WIRE_14.ready <= _WIRE_13.ready @[Bundles.scala 259:61]
    _WIRE_14.bits.corrupt <= out_2.b.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE_14.bits.data <= out_2.b.bits.data @[BundleMap.scala 247:19]
    _WIRE_14.bits.mask <= out_2.b.bits.mask @[BundleMap.scala 247:19]
    _WIRE_14.bits.address <= out_2.b.bits.address @[BundleMap.scala 247:19]
    _WIRE_14.bits.source <= out_2.b.bits.source @[BundleMap.scala 247:19]
    _WIRE_14.bits.size <= out_2.b.bits.size @[BundleMap.scala 247:19]
    _WIRE_14.bits.param <= out_2.b.bits.param @[BundleMap.scala 247:19]
    _WIRE_14.bits.opcode <= out_2.b.bits.opcode @[BundleMap.scala 247:19]
    _WIRE_14.valid <= out_2.b.valid @[BundleMap.scala 247:19]
    out_2.b.ready <= _WIRE_14.ready @[BundleMap.scala 247:19]
    wire _WIRE_15 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_15.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.source <= UInt<4>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_15.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_15.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_15.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_16 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_16.bits <= _WIRE_15.bits @[Bundles.scala 260:61]
    _WIRE_16.valid <= _WIRE_15.valid @[Bundles.scala 260:61]
    _WIRE_16.ready <= _WIRE_15.ready @[Bundles.scala 260:61]
    out_2.c.bits.corrupt <= _WIRE_16.bits.corrupt @[BundleMap.scala 247:19]
    out_2.c.bits.data <= _WIRE_16.bits.data @[BundleMap.scala 247:19]
    out_2.c.bits.address <= _WIRE_16.bits.address @[BundleMap.scala 247:19]
    out_2.c.bits.source <= _WIRE_16.bits.source @[BundleMap.scala 247:19]
    out_2.c.bits.size <= _WIRE_16.bits.size @[BundleMap.scala 247:19]
    out_2.c.bits.param <= _WIRE_16.bits.param @[BundleMap.scala 247:19]
    out_2.c.bits.opcode <= _WIRE_16.bits.opcode @[BundleMap.scala 247:19]
    out_2.c.valid <= _WIRE_16.valid @[BundleMap.scala 247:19]
    _WIRE_16.ready <= out_2.c.ready @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.corrupt <= out_2.d.bits.corrupt @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.data <= out_2.d.bits.data @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.denied <= out_2.d.bits.denied @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.sink <= out_2.d.bits.sink @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.source <= out_2.d.bits.source @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.size <= out_2.d.bits.size @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.param <= out_2.d.bits.param @[BundleMap.scala 247:19]
    bundleIn_2.d.bits.opcode <= out_2.d.bits.opcode @[BundleMap.scala 247:19]
    bundleIn_2.d.valid <= out_2.d.valid @[BundleMap.scala 247:19]
    out_2.d.ready <= bundleIn_2.d.ready @[BundleMap.scala 247:19]
    wire _WIRE_17 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_17.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_17.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_17.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_18 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_18.bits <= _WIRE_17.bits @[Bundles.scala 262:61]
    _WIRE_18.valid <= _WIRE_17.valid @[Bundles.scala 262:61]
    _WIRE_18.ready <= _WIRE_17.ready @[Bundles.scala 262:61]
    out_2.e.bits.sink <= _WIRE_18.bits.sink @[BundleMap.scala 247:19]
    out_2.e.valid <= _WIRE_18.valid @[BundleMap.scala 247:19]
    _WIRE_18.ready <= out_2.e.ready @[BundleMap.scala 247:19]
    wire out_3 : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Bundle_ACancel.scala 54:19]
    out_3.a.earlyValid <= bundleIn_3.a.valid @[Bundle_ACancel.scala 55:22]
    out_3.a.lateCancel <= UInt<1>("h0") @[Bundle_ACancel.scala 56:22]
    out_3.a.bits <= bundleIn_3.a.bits @[Bundle_ACancel.scala 57:16]
    bundleIn_3.a.ready <= out_3.a.ready @[Bundle_ACancel.scala 58:16]
    wire _WIRE_19 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_19.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.source <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_19.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_19.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_19.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_20 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_20.bits <= _WIRE_19.bits @[Bundles.scala 259:61]
    _WIRE_20.valid <= _WIRE_19.valid @[Bundles.scala 259:61]
    _WIRE_20.ready <= _WIRE_19.ready @[Bundles.scala 259:61]
    _WIRE_20.bits.corrupt <= out_3.b.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE_20.bits.data <= out_3.b.bits.data @[BundleMap.scala 247:19]
    _WIRE_20.bits.mask <= out_3.b.bits.mask @[BundleMap.scala 247:19]
    _WIRE_20.bits.address <= out_3.b.bits.address @[BundleMap.scala 247:19]
    _WIRE_20.bits.source <= out_3.b.bits.source @[BundleMap.scala 247:19]
    _WIRE_20.bits.size <= out_3.b.bits.size @[BundleMap.scala 247:19]
    _WIRE_20.bits.param <= out_3.b.bits.param @[BundleMap.scala 247:19]
    _WIRE_20.bits.opcode <= out_3.b.bits.opcode @[BundleMap.scala 247:19]
    _WIRE_20.valid <= out_3.b.valid @[BundleMap.scala 247:19]
    out_3.b.ready <= _WIRE_20.ready @[BundleMap.scala 247:19]
    wire _WIRE_21 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_21.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.source <= UInt<4>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_21.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_21.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_21.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_22 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_22.bits <= _WIRE_21.bits @[Bundles.scala 260:61]
    _WIRE_22.valid <= _WIRE_21.valid @[Bundles.scala 260:61]
    _WIRE_22.ready <= _WIRE_21.ready @[Bundles.scala 260:61]
    out_3.c.bits.corrupt <= _WIRE_22.bits.corrupt @[BundleMap.scala 247:19]
    out_3.c.bits.data <= _WIRE_22.bits.data @[BundleMap.scala 247:19]
    out_3.c.bits.address <= _WIRE_22.bits.address @[BundleMap.scala 247:19]
    out_3.c.bits.source <= _WIRE_22.bits.source @[BundleMap.scala 247:19]
    out_3.c.bits.size <= _WIRE_22.bits.size @[BundleMap.scala 247:19]
    out_3.c.bits.param <= _WIRE_22.bits.param @[BundleMap.scala 247:19]
    out_3.c.bits.opcode <= _WIRE_22.bits.opcode @[BundleMap.scala 247:19]
    out_3.c.valid <= _WIRE_22.valid @[BundleMap.scala 247:19]
    _WIRE_22.ready <= out_3.c.ready @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.corrupt <= out_3.d.bits.corrupt @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.data <= out_3.d.bits.data @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.denied <= out_3.d.bits.denied @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.sink <= out_3.d.bits.sink @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.source <= out_3.d.bits.source @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.size <= out_3.d.bits.size @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.param <= out_3.d.bits.param @[BundleMap.scala 247:19]
    bundleIn_3.d.bits.opcode <= out_3.d.bits.opcode @[BundleMap.scala 247:19]
    bundleIn_3.d.valid <= out_3.d.valid @[BundleMap.scala 247:19]
    out_3.d.ready <= bundleIn_3.d.ready @[BundleMap.scala 247:19]
    wire _WIRE_23 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_23.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_23.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_23.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_24 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_24.bits <= _WIRE_23.bits @[Bundles.scala 262:61]
    _WIRE_24.valid <= _WIRE_23.valid @[Bundles.scala 262:61]
    _WIRE_24.ready <= _WIRE_23.ready @[Bundles.scala 262:61]
    out_3.e.bits.sink <= _WIRE_24.bits.sink @[BundleMap.scala 247:19]
    out_3.e.valid <= _WIRE_24.valid @[BundleMap.scala 247:19]
    _WIRE_24.ready <= out_3.e.ready @[BundleMap.scala 247:19]
    wire out_4 : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}} @[Bundle_ACancel.scala 54:19]
    out_4.a.earlyValid <= bundleIn_4.a.valid @[Bundle_ACancel.scala 55:22]
    out_4.a.lateCancel <= UInt<1>("h0") @[Bundle_ACancel.scala 56:22]
    out_4.a.bits <= bundleIn_4.a.bits @[Bundle_ACancel.scala 57:16]
    bundleIn_4.a.ready <= out_4.a.ready @[Bundle_ACancel.scala 58:16]
    wire _WIRE_25 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_25.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.source <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_25.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_25.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_25.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_26 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<4>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_26.bits <= _WIRE_25.bits @[Bundles.scala 259:61]
    _WIRE_26.valid <= _WIRE_25.valid @[Bundles.scala 259:61]
    _WIRE_26.ready <= _WIRE_25.ready @[Bundles.scala 259:61]
    _WIRE_26.bits.corrupt <= out_4.b.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE_26.bits.data <= out_4.b.bits.data @[BundleMap.scala 247:19]
    _WIRE_26.bits.mask <= out_4.b.bits.mask @[BundleMap.scala 247:19]
    _WIRE_26.bits.address <= out_4.b.bits.address @[BundleMap.scala 247:19]
    _WIRE_26.bits.source <= out_4.b.bits.source @[BundleMap.scala 247:19]
    _WIRE_26.bits.size <= out_4.b.bits.size @[BundleMap.scala 247:19]
    _WIRE_26.bits.param <= out_4.b.bits.param @[BundleMap.scala 247:19]
    _WIRE_26.bits.opcode <= out_4.b.bits.opcode @[BundleMap.scala 247:19]
    _WIRE_26.valid <= out_4.b.valid @[BundleMap.scala 247:19]
    out_4.b.ready <= _WIRE_26.ready @[BundleMap.scala 247:19]
    wire _WIRE_27 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_27.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.source <= UInt<4>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_27.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_27.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_27.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_28 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<4>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_28.bits <= _WIRE_27.bits @[Bundles.scala 260:61]
    _WIRE_28.valid <= _WIRE_27.valid @[Bundles.scala 260:61]
    _WIRE_28.ready <= _WIRE_27.ready @[Bundles.scala 260:61]
    out_4.c.bits.corrupt <= _WIRE_28.bits.corrupt @[BundleMap.scala 247:19]
    out_4.c.bits.data <= _WIRE_28.bits.data @[BundleMap.scala 247:19]
    out_4.c.bits.address <= _WIRE_28.bits.address @[BundleMap.scala 247:19]
    out_4.c.bits.source <= _WIRE_28.bits.source @[BundleMap.scala 247:19]
    out_4.c.bits.size <= _WIRE_28.bits.size @[BundleMap.scala 247:19]
    out_4.c.bits.param <= _WIRE_28.bits.param @[BundleMap.scala 247:19]
    out_4.c.bits.opcode <= _WIRE_28.bits.opcode @[BundleMap.scala 247:19]
    out_4.c.valid <= _WIRE_28.valid @[BundleMap.scala 247:19]
    _WIRE_28.ready <= out_4.c.ready @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.corrupt <= out_4.d.bits.corrupt @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.data <= out_4.d.bits.data @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.denied <= out_4.d.bits.denied @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.sink <= out_4.d.bits.sink @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.source <= out_4.d.bits.source @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.size <= out_4.d.bits.size @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.param <= out_4.d.bits.param @[BundleMap.scala 247:19]
    bundleIn_4.d.bits.opcode <= out_4.d.bits.opcode @[BundleMap.scala 247:19]
    bundleIn_4.d.valid <= out_4.d.valid @[BundleMap.scala 247:19]
    out_4.d.ready <= bundleIn_4.d.ready @[BundleMap.scala 247:19]
    wire _WIRE_29 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_29.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_29.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_29.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_30 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_30.bits <= _WIRE_29.bits @[Bundles.scala 262:61]
    _WIRE_30.valid <= _WIRE_29.valid @[Bundles.scala 262:61]
    _WIRE_30.ready <= _WIRE_29.ready @[Bundles.scala 262:61]
    out_4.e.bits.sink <= _WIRE_30.bits.sink @[BundleMap.scala 247:19]
    out_4.e.valid <= _WIRE_30.valid @[BundleMap.scala 247:19]
    _WIRE_30.ready <= out_4.e.ready @[BundleMap.scala 247:19]
    wire in : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}}[5] @[Xbar.scala 234:18]
    in[0].a.bits.corrupt <= out.a.bits.corrupt @[BundleMap.scala 247:19]
    in[0].a.bits.data <= out.a.bits.data @[BundleMap.scala 247:19]
    in[0].a.bits.mask <= out.a.bits.mask @[BundleMap.scala 247:19]
    in[0].a.bits.address <= out.a.bits.address @[BundleMap.scala 247:19]
    in[0].a.bits.source <= out.a.bits.source @[BundleMap.scala 247:19]
    in[0].a.bits.size <= out.a.bits.size @[BundleMap.scala 247:19]
    in[0].a.bits.param <= out.a.bits.param @[BundleMap.scala 247:19]
    in[0].a.bits.opcode <= out.a.bits.opcode @[BundleMap.scala 247:19]
    in[0].a.lateCancel <= out.a.lateCancel @[BundleMap.scala 247:19]
    in[0].a.earlyValid <= out.a.earlyValid @[BundleMap.scala 247:19]
    out.a.ready <= in[0].a.ready @[BundleMap.scala 247:19]
    node _in_0_a_bits_source_T = or(out.a.bits.source, UInt<7>("h40")) @[Xbar.scala 240:55]
    in[0].a.bits.source <= _in_0_a_bits_source_T @[Xbar.scala 240:29]
    in[0].b.ready <= UInt<1>("h1") @[Xbar.scala 254:23]
    in[0].b.bits.corrupt is invalid @[Xbar.scala 255:23]
    in[0].b.bits.data is invalid @[Xbar.scala 255:23]
    in[0].b.bits.mask is invalid @[Xbar.scala 255:23]
    in[0].b.bits.address is invalid @[Xbar.scala 255:23]
    in[0].b.bits.source is invalid @[Xbar.scala 255:23]
    in[0].b.bits.size is invalid @[Xbar.scala 255:23]
    in[0].b.bits.param is invalid @[Xbar.scala 255:23]
    in[0].b.bits.opcode is invalid @[Xbar.scala 255:23]
    out.b.valid <= UInt<1>("h0") @[Xbar.scala 256:26]
    out.b.bits.corrupt is invalid @[Xbar.scala 257:26]
    out.b.bits.data is invalid @[Xbar.scala 257:26]
    out.b.bits.mask is invalid @[Xbar.scala 257:26]
    out.b.bits.address is invalid @[Xbar.scala 257:26]
    out.b.bits.source is invalid @[Xbar.scala 257:26]
    out.b.bits.size is invalid @[Xbar.scala 257:26]
    out.b.bits.param is invalid @[Xbar.scala 257:26]
    out.b.bits.opcode is invalid @[Xbar.scala 257:26]
    in[0].c.valid <= UInt<1>("h0") @[Xbar.scala 264:23]
    in[0].c.bits.corrupt is invalid @[Xbar.scala 265:23]
    in[0].c.bits.data is invalid @[Xbar.scala 265:23]
    in[0].c.bits.address is invalid @[Xbar.scala 265:23]
    in[0].c.bits.source is invalid @[Xbar.scala 265:23]
    in[0].c.bits.size is invalid @[Xbar.scala 265:23]
    in[0].c.bits.param is invalid @[Xbar.scala 265:23]
    in[0].c.bits.opcode is invalid @[Xbar.scala 265:23]
    out.c.ready <= UInt<1>("h1") @[Xbar.scala 266:26]
    out.c.bits.corrupt is invalid @[Xbar.scala 267:26]
    out.c.bits.data is invalid @[Xbar.scala 267:26]
    out.c.bits.address is invalid @[Xbar.scala 267:26]
    out.c.bits.source is invalid @[Xbar.scala 267:26]
    out.c.bits.size is invalid @[Xbar.scala 267:26]
    out.c.bits.param is invalid @[Xbar.scala 267:26]
    out.c.bits.opcode is invalid @[Xbar.scala 267:26]
    out.d.bits.corrupt <= in[0].d.bits.corrupt @[BundleMap.scala 247:19]
    out.d.bits.data <= in[0].d.bits.data @[BundleMap.scala 247:19]
    out.d.bits.denied <= in[0].d.bits.denied @[BundleMap.scala 247:19]
    out.d.bits.sink <= in[0].d.bits.sink @[BundleMap.scala 247:19]
    out.d.bits.source <= in[0].d.bits.source @[BundleMap.scala 247:19]
    out.d.bits.size <= in[0].d.bits.size @[BundleMap.scala 247:19]
    out.d.bits.param <= in[0].d.bits.param @[BundleMap.scala 247:19]
    out.d.bits.opcode <= in[0].d.bits.opcode @[BundleMap.scala 247:19]
    out.d.valid <= in[0].d.valid @[BundleMap.scala 247:19]
    in[0].d.ready <= out.d.ready @[BundleMap.scala 247:19]
    node _out_d_bits_source_T = bits(in[0].d.bits.source, 0, 0) @[Xbar.scala 231:69]
    out.d.bits.source <= _out_d_bits_source_T @[Xbar.scala 272:32]
    in[0].e.valid <= UInt<1>("h0") @[Xbar.scala 283:23]
    in[0].e.bits.sink is invalid @[Xbar.scala 284:23]
    out.e.ready <= UInt<1>("h1") @[Xbar.scala 285:26]
    out.e.bits.sink is invalid @[Xbar.scala 286:26]
    in[1].a.bits.corrupt <= out_1.a.bits.corrupt @[BundleMap.scala 247:19]
    in[1].a.bits.data <= out_1.a.bits.data @[BundleMap.scala 247:19]
    in[1].a.bits.mask <= out_1.a.bits.mask @[BundleMap.scala 247:19]
    in[1].a.bits.address <= out_1.a.bits.address @[BundleMap.scala 247:19]
    in[1].a.bits.source <= out_1.a.bits.source @[BundleMap.scala 247:19]
    in[1].a.bits.size <= out_1.a.bits.size @[BundleMap.scala 247:19]
    in[1].a.bits.param <= out_1.a.bits.param @[BundleMap.scala 247:19]
    in[1].a.bits.opcode <= out_1.a.bits.opcode @[BundleMap.scala 247:19]
    in[1].a.lateCancel <= out_1.a.lateCancel @[BundleMap.scala 247:19]
    in[1].a.earlyValid <= out_1.a.earlyValid @[BundleMap.scala 247:19]
    out_1.a.ready <= in[1].a.ready @[BundleMap.scala 247:19]
    node _in_1_a_bits_source_T = or(out_1.a.bits.source, UInt<6>("h30")) @[Xbar.scala 240:55]
    in[1].a.bits.source <= _in_1_a_bits_source_T @[Xbar.scala 240:29]
    in[1].b.ready <= UInt<1>("h1") @[Xbar.scala 254:23]
    in[1].b.bits.corrupt is invalid @[Xbar.scala 255:23]
    in[1].b.bits.data is invalid @[Xbar.scala 255:23]
    in[1].b.bits.mask is invalid @[Xbar.scala 255:23]
    in[1].b.bits.address is invalid @[Xbar.scala 255:23]
    in[1].b.bits.source is invalid @[Xbar.scala 255:23]
    in[1].b.bits.size is invalid @[Xbar.scala 255:23]
    in[1].b.bits.param is invalid @[Xbar.scala 255:23]
    in[1].b.bits.opcode is invalid @[Xbar.scala 255:23]
    out_1.b.valid <= UInt<1>("h0") @[Xbar.scala 256:26]
    out_1.b.bits.corrupt is invalid @[Xbar.scala 257:26]
    out_1.b.bits.data is invalid @[Xbar.scala 257:26]
    out_1.b.bits.mask is invalid @[Xbar.scala 257:26]
    out_1.b.bits.address is invalid @[Xbar.scala 257:26]
    out_1.b.bits.source is invalid @[Xbar.scala 257:26]
    out_1.b.bits.size is invalid @[Xbar.scala 257:26]
    out_1.b.bits.param is invalid @[Xbar.scala 257:26]
    out_1.b.bits.opcode is invalid @[Xbar.scala 257:26]
    in[1].c.valid <= UInt<1>("h0") @[Xbar.scala 264:23]
    in[1].c.bits.corrupt is invalid @[Xbar.scala 265:23]
    in[1].c.bits.data is invalid @[Xbar.scala 265:23]
    in[1].c.bits.address is invalid @[Xbar.scala 265:23]
    in[1].c.bits.source is invalid @[Xbar.scala 265:23]
    in[1].c.bits.size is invalid @[Xbar.scala 265:23]
    in[1].c.bits.param is invalid @[Xbar.scala 265:23]
    in[1].c.bits.opcode is invalid @[Xbar.scala 265:23]
    out_1.c.ready <= UInt<1>("h1") @[Xbar.scala 266:26]
    out_1.c.bits.corrupt is invalid @[Xbar.scala 267:26]
    out_1.c.bits.data is invalid @[Xbar.scala 267:26]
    out_1.c.bits.address is invalid @[Xbar.scala 267:26]
    out_1.c.bits.source is invalid @[Xbar.scala 267:26]
    out_1.c.bits.size is invalid @[Xbar.scala 267:26]
    out_1.c.bits.param is invalid @[Xbar.scala 267:26]
    out_1.c.bits.opcode is invalid @[Xbar.scala 267:26]
    out_1.d.bits.corrupt <= in[1].d.bits.corrupt @[BundleMap.scala 247:19]
    out_1.d.bits.data <= in[1].d.bits.data @[BundleMap.scala 247:19]
    out_1.d.bits.denied <= in[1].d.bits.denied @[BundleMap.scala 247:19]
    out_1.d.bits.sink <= in[1].d.bits.sink @[BundleMap.scala 247:19]
    out_1.d.bits.source <= in[1].d.bits.source @[BundleMap.scala 247:19]
    out_1.d.bits.size <= in[1].d.bits.size @[BundleMap.scala 247:19]
    out_1.d.bits.param <= in[1].d.bits.param @[BundleMap.scala 247:19]
    out_1.d.bits.opcode <= in[1].d.bits.opcode @[BundleMap.scala 247:19]
    out_1.d.valid <= in[1].d.valid @[BundleMap.scala 247:19]
    in[1].d.ready <= out_1.d.ready @[BundleMap.scala 247:19]
    node _out_d_bits_source_T_1 = bits(in[1].d.bits.source, 3, 0) @[Xbar.scala 231:69]
    out_1.d.bits.source <= _out_d_bits_source_T_1 @[Xbar.scala 272:32]
    in[1].e.valid <= UInt<1>("h0") @[Xbar.scala 283:23]
    in[1].e.bits.sink is invalid @[Xbar.scala 284:23]
    out_1.e.ready <= UInt<1>("h1") @[Xbar.scala 285:26]
    out_1.e.bits.sink is invalid @[Xbar.scala 286:26]
    in[2].a.bits.corrupt <= out_2.a.bits.corrupt @[BundleMap.scala 247:19]
    in[2].a.bits.data <= out_2.a.bits.data @[BundleMap.scala 247:19]
    in[2].a.bits.mask <= out_2.a.bits.mask @[BundleMap.scala 247:19]
    in[2].a.bits.address <= out_2.a.bits.address @[BundleMap.scala 247:19]
    in[2].a.bits.source <= out_2.a.bits.source @[BundleMap.scala 247:19]
    in[2].a.bits.size <= out_2.a.bits.size @[BundleMap.scala 247:19]
    in[2].a.bits.param <= out_2.a.bits.param @[BundleMap.scala 247:19]
    in[2].a.bits.opcode <= out_2.a.bits.opcode @[BundleMap.scala 247:19]
    in[2].a.lateCancel <= out_2.a.lateCancel @[BundleMap.scala 247:19]
    in[2].a.earlyValid <= out_2.a.earlyValid @[BundleMap.scala 247:19]
    out_2.a.ready <= in[2].a.ready @[BundleMap.scala 247:19]
    node _in_2_a_bits_source_T = or(out_2.a.bits.source, UInt<6>("h20")) @[Xbar.scala 240:55]
    in[2].a.bits.source <= _in_2_a_bits_source_T @[Xbar.scala 240:29]
    in[2].b.ready <= UInt<1>("h1") @[Xbar.scala 254:23]
    in[2].b.bits.corrupt is invalid @[Xbar.scala 255:23]
    in[2].b.bits.data is invalid @[Xbar.scala 255:23]
    in[2].b.bits.mask is invalid @[Xbar.scala 255:23]
    in[2].b.bits.address is invalid @[Xbar.scala 255:23]
    in[2].b.bits.source is invalid @[Xbar.scala 255:23]
    in[2].b.bits.size is invalid @[Xbar.scala 255:23]
    in[2].b.bits.param is invalid @[Xbar.scala 255:23]
    in[2].b.bits.opcode is invalid @[Xbar.scala 255:23]
    out_2.b.valid <= UInt<1>("h0") @[Xbar.scala 256:26]
    out_2.b.bits.corrupt is invalid @[Xbar.scala 257:26]
    out_2.b.bits.data is invalid @[Xbar.scala 257:26]
    out_2.b.bits.mask is invalid @[Xbar.scala 257:26]
    out_2.b.bits.address is invalid @[Xbar.scala 257:26]
    out_2.b.bits.source is invalid @[Xbar.scala 257:26]
    out_2.b.bits.size is invalid @[Xbar.scala 257:26]
    out_2.b.bits.param is invalid @[Xbar.scala 257:26]
    out_2.b.bits.opcode is invalid @[Xbar.scala 257:26]
    in[2].c.valid <= UInt<1>("h0") @[Xbar.scala 264:23]
    in[2].c.bits.corrupt is invalid @[Xbar.scala 265:23]
    in[2].c.bits.data is invalid @[Xbar.scala 265:23]
    in[2].c.bits.address is invalid @[Xbar.scala 265:23]
    in[2].c.bits.source is invalid @[Xbar.scala 265:23]
    in[2].c.bits.size is invalid @[Xbar.scala 265:23]
    in[2].c.bits.param is invalid @[Xbar.scala 265:23]
    in[2].c.bits.opcode is invalid @[Xbar.scala 265:23]
    out_2.c.ready <= UInt<1>("h1") @[Xbar.scala 266:26]
    out_2.c.bits.corrupt is invalid @[Xbar.scala 267:26]
    out_2.c.bits.data is invalid @[Xbar.scala 267:26]
    out_2.c.bits.address is invalid @[Xbar.scala 267:26]
    out_2.c.bits.source is invalid @[Xbar.scala 267:26]
    out_2.c.bits.size is invalid @[Xbar.scala 267:26]
    out_2.c.bits.param is invalid @[Xbar.scala 267:26]
    out_2.c.bits.opcode is invalid @[Xbar.scala 267:26]
    out_2.d.bits.corrupt <= in[2].d.bits.corrupt @[BundleMap.scala 247:19]
    out_2.d.bits.data <= in[2].d.bits.data @[BundleMap.scala 247:19]
    out_2.d.bits.denied <= in[2].d.bits.denied @[BundleMap.scala 247:19]
    out_2.d.bits.sink <= in[2].d.bits.sink @[BundleMap.scala 247:19]
    out_2.d.bits.source <= in[2].d.bits.source @[BundleMap.scala 247:19]
    out_2.d.bits.size <= in[2].d.bits.size @[BundleMap.scala 247:19]
    out_2.d.bits.param <= in[2].d.bits.param @[BundleMap.scala 247:19]
    out_2.d.bits.opcode <= in[2].d.bits.opcode @[BundleMap.scala 247:19]
    out_2.d.valid <= in[2].d.valid @[BundleMap.scala 247:19]
    in[2].d.ready <= out_2.d.ready @[BundleMap.scala 247:19]
    node _out_d_bits_source_T_2 = bits(in[2].d.bits.source, 3, 0) @[Xbar.scala 231:69]
    out_2.d.bits.source <= _out_d_bits_source_T_2 @[Xbar.scala 272:32]
    in[2].e.valid <= UInt<1>("h0") @[Xbar.scala 283:23]
    in[2].e.bits.sink is invalid @[Xbar.scala 284:23]
    out_2.e.ready <= UInt<1>("h1") @[Xbar.scala 285:26]
    out_2.e.bits.sink is invalid @[Xbar.scala 286:26]
    in[3].a.bits.corrupt <= out_3.a.bits.corrupt @[BundleMap.scala 247:19]
    in[3].a.bits.data <= out_3.a.bits.data @[BundleMap.scala 247:19]
    in[3].a.bits.mask <= out_3.a.bits.mask @[BundleMap.scala 247:19]
    in[3].a.bits.address <= out_3.a.bits.address @[BundleMap.scala 247:19]
    in[3].a.bits.source <= out_3.a.bits.source @[BundleMap.scala 247:19]
    in[3].a.bits.size <= out_3.a.bits.size @[BundleMap.scala 247:19]
    in[3].a.bits.param <= out_3.a.bits.param @[BundleMap.scala 247:19]
    in[3].a.bits.opcode <= out_3.a.bits.opcode @[BundleMap.scala 247:19]
    in[3].a.lateCancel <= out_3.a.lateCancel @[BundleMap.scala 247:19]
    in[3].a.earlyValid <= out_3.a.earlyValid @[BundleMap.scala 247:19]
    out_3.a.ready <= in[3].a.ready @[BundleMap.scala 247:19]
    node _in_3_a_bits_source_T = or(out_3.a.bits.source, UInt<5>("h10")) @[Xbar.scala 240:55]
    in[3].a.bits.source <= _in_3_a_bits_source_T @[Xbar.scala 240:29]
    in[3].b.ready <= UInt<1>("h1") @[Xbar.scala 254:23]
    in[3].b.bits.corrupt is invalid @[Xbar.scala 255:23]
    in[3].b.bits.data is invalid @[Xbar.scala 255:23]
    in[3].b.bits.mask is invalid @[Xbar.scala 255:23]
    in[3].b.bits.address is invalid @[Xbar.scala 255:23]
    in[3].b.bits.source is invalid @[Xbar.scala 255:23]
    in[3].b.bits.size is invalid @[Xbar.scala 255:23]
    in[3].b.bits.param is invalid @[Xbar.scala 255:23]
    in[3].b.bits.opcode is invalid @[Xbar.scala 255:23]
    out_3.b.valid <= UInt<1>("h0") @[Xbar.scala 256:26]
    out_3.b.bits.corrupt is invalid @[Xbar.scala 257:26]
    out_3.b.bits.data is invalid @[Xbar.scala 257:26]
    out_3.b.bits.mask is invalid @[Xbar.scala 257:26]
    out_3.b.bits.address is invalid @[Xbar.scala 257:26]
    out_3.b.bits.source is invalid @[Xbar.scala 257:26]
    out_3.b.bits.size is invalid @[Xbar.scala 257:26]
    out_3.b.bits.param is invalid @[Xbar.scala 257:26]
    out_3.b.bits.opcode is invalid @[Xbar.scala 257:26]
    in[3].c.valid <= UInt<1>("h0") @[Xbar.scala 264:23]
    in[3].c.bits.corrupt is invalid @[Xbar.scala 265:23]
    in[3].c.bits.data is invalid @[Xbar.scala 265:23]
    in[3].c.bits.address is invalid @[Xbar.scala 265:23]
    in[3].c.bits.source is invalid @[Xbar.scala 265:23]
    in[3].c.bits.size is invalid @[Xbar.scala 265:23]
    in[3].c.bits.param is invalid @[Xbar.scala 265:23]
    in[3].c.bits.opcode is invalid @[Xbar.scala 265:23]
    out_3.c.ready <= UInt<1>("h1") @[Xbar.scala 266:26]
    out_3.c.bits.corrupt is invalid @[Xbar.scala 267:26]
    out_3.c.bits.data is invalid @[Xbar.scala 267:26]
    out_3.c.bits.address is invalid @[Xbar.scala 267:26]
    out_3.c.bits.source is invalid @[Xbar.scala 267:26]
    out_3.c.bits.size is invalid @[Xbar.scala 267:26]
    out_3.c.bits.param is invalid @[Xbar.scala 267:26]
    out_3.c.bits.opcode is invalid @[Xbar.scala 267:26]
    out_3.d.bits.corrupt <= in[3].d.bits.corrupt @[BundleMap.scala 247:19]
    out_3.d.bits.data <= in[3].d.bits.data @[BundleMap.scala 247:19]
    out_3.d.bits.denied <= in[3].d.bits.denied @[BundleMap.scala 247:19]
    out_3.d.bits.sink <= in[3].d.bits.sink @[BundleMap.scala 247:19]
    out_3.d.bits.source <= in[3].d.bits.source @[BundleMap.scala 247:19]
    out_3.d.bits.size <= in[3].d.bits.size @[BundleMap.scala 247:19]
    out_3.d.bits.param <= in[3].d.bits.param @[BundleMap.scala 247:19]
    out_3.d.bits.opcode <= in[3].d.bits.opcode @[BundleMap.scala 247:19]
    out_3.d.valid <= in[3].d.valid @[BundleMap.scala 247:19]
    in[3].d.ready <= out_3.d.ready @[BundleMap.scala 247:19]
    node _out_d_bits_source_T_3 = bits(in[3].d.bits.source, 3, 0) @[Xbar.scala 231:69]
    out_3.d.bits.source <= _out_d_bits_source_T_3 @[Xbar.scala 272:32]
    in[3].e.valid <= UInt<1>("h0") @[Xbar.scala 283:23]
    in[3].e.bits.sink is invalid @[Xbar.scala 284:23]
    out_3.e.ready <= UInt<1>("h1") @[Xbar.scala 285:26]
    out_3.e.bits.sink is invalid @[Xbar.scala 286:26]
    in[4].a.bits.corrupt <= out_4.a.bits.corrupt @[BundleMap.scala 247:19]
    in[4].a.bits.data <= out_4.a.bits.data @[BundleMap.scala 247:19]
    in[4].a.bits.mask <= out_4.a.bits.mask @[BundleMap.scala 247:19]
    in[4].a.bits.address <= out_4.a.bits.address @[BundleMap.scala 247:19]
    in[4].a.bits.source <= out_4.a.bits.source @[BundleMap.scala 247:19]
    in[4].a.bits.size <= out_4.a.bits.size @[BundleMap.scala 247:19]
    in[4].a.bits.param <= out_4.a.bits.param @[BundleMap.scala 247:19]
    in[4].a.bits.opcode <= out_4.a.bits.opcode @[BundleMap.scala 247:19]
    in[4].a.lateCancel <= out_4.a.lateCancel @[BundleMap.scala 247:19]
    in[4].a.earlyValid <= out_4.a.earlyValid @[BundleMap.scala 247:19]
    out_4.a.ready <= in[4].a.ready @[BundleMap.scala 247:19]
    node _in_4_a_bits_source_T = or(out_4.a.bits.source, UInt<1>("h0")) @[Xbar.scala 240:55]
    in[4].a.bits.source <= _in_4_a_bits_source_T @[Xbar.scala 240:29]
    in[4].b.ready <= UInt<1>("h1") @[Xbar.scala 254:23]
    in[4].b.bits.corrupt is invalid @[Xbar.scala 255:23]
    in[4].b.bits.data is invalid @[Xbar.scala 255:23]
    in[4].b.bits.mask is invalid @[Xbar.scala 255:23]
    in[4].b.bits.address is invalid @[Xbar.scala 255:23]
    in[4].b.bits.source is invalid @[Xbar.scala 255:23]
    in[4].b.bits.size is invalid @[Xbar.scala 255:23]
    in[4].b.bits.param is invalid @[Xbar.scala 255:23]
    in[4].b.bits.opcode is invalid @[Xbar.scala 255:23]
    out_4.b.valid <= UInt<1>("h0") @[Xbar.scala 256:26]
    out_4.b.bits.corrupt is invalid @[Xbar.scala 257:26]
    out_4.b.bits.data is invalid @[Xbar.scala 257:26]
    out_4.b.bits.mask is invalid @[Xbar.scala 257:26]
    out_4.b.bits.address is invalid @[Xbar.scala 257:26]
    out_4.b.bits.source is invalid @[Xbar.scala 257:26]
    out_4.b.bits.size is invalid @[Xbar.scala 257:26]
    out_4.b.bits.param is invalid @[Xbar.scala 257:26]
    out_4.b.bits.opcode is invalid @[Xbar.scala 257:26]
    in[4].c.valid <= UInt<1>("h0") @[Xbar.scala 264:23]
    in[4].c.bits.corrupt is invalid @[Xbar.scala 265:23]
    in[4].c.bits.data is invalid @[Xbar.scala 265:23]
    in[4].c.bits.address is invalid @[Xbar.scala 265:23]
    in[4].c.bits.source is invalid @[Xbar.scala 265:23]
    in[4].c.bits.size is invalid @[Xbar.scala 265:23]
    in[4].c.bits.param is invalid @[Xbar.scala 265:23]
    in[4].c.bits.opcode is invalid @[Xbar.scala 265:23]
    out_4.c.ready <= UInt<1>("h1") @[Xbar.scala 266:26]
    out_4.c.bits.corrupt is invalid @[Xbar.scala 267:26]
    out_4.c.bits.data is invalid @[Xbar.scala 267:26]
    out_4.c.bits.address is invalid @[Xbar.scala 267:26]
    out_4.c.bits.source is invalid @[Xbar.scala 267:26]
    out_4.c.bits.size is invalid @[Xbar.scala 267:26]
    out_4.c.bits.param is invalid @[Xbar.scala 267:26]
    out_4.c.bits.opcode is invalid @[Xbar.scala 267:26]
    out_4.d.bits.corrupt <= in[4].d.bits.corrupt @[BundleMap.scala 247:19]
    out_4.d.bits.data <= in[4].d.bits.data @[BundleMap.scala 247:19]
    out_4.d.bits.denied <= in[4].d.bits.denied @[BundleMap.scala 247:19]
    out_4.d.bits.sink <= in[4].d.bits.sink @[BundleMap.scala 247:19]
    out_4.d.bits.source <= in[4].d.bits.source @[BundleMap.scala 247:19]
    out_4.d.bits.size <= in[4].d.bits.size @[BundleMap.scala 247:19]
    out_4.d.bits.param <= in[4].d.bits.param @[BundleMap.scala 247:19]
    out_4.d.bits.opcode <= in[4].d.bits.opcode @[BundleMap.scala 247:19]
    out_4.d.valid <= in[4].d.valid @[BundleMap.scala 247:19]
    in[4].d.ready <= out_4.d.ready @[BundleMap.scala 247:19]
    node _out_d_bits_source_T_4 = bits(in[4].d.bits.source, 3, 0) @[Xbar.scala 231:69]
    out_4.d.bits.source <= _out_d_bits_source_T_4 @[Xbar.scala 272:32]
    in[4].e.valid <= UInt<1>("h0") @[Xbar.scala 283:23]
    in[4].e.bits.sink is invalid @[Xbar.scala 284:23]
    out_4.e.ready <= UInt<1>("h1") @[Xbar.scala 285:26]
    out_4.e.bits.sink is invalid @[Xbar.scala 286:26]
    wire out_5 : { a : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, c : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}, e : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}}[1] @[Xbar.scala 291:19]
    _WIRE.a.bits.corrupt <= out_5[0].a.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE.a.bits.data <= out_5[0].a.bits.data @[BundleMap.scala 247:19]
    _WIRE.a.bits.mask <= out_5[0].a.bits.mask @[BundleMap.scala 247:19]
    _WIRE.a.bits.address <= out_5[0].a.bits.address @[BundleMap.scala 247:19]
    _WIRE.a.bits.source <= out_5[0].a.bits.source @[BundleMap.scala 247:19]
    _WIRE.a.bits.size <= out_5[0].a.bits.size @[BundleMap.scala 247:19]
    _WIRE.a.bits.param <= out_5[0].a.bits.param @[BundleMap.scala 247:19]
    _WIRE.a.bits.opcode <= out_5[0].a.bits.opcode @[BundleMap.scala 247:19]
    _WIRE.a.lateCancel <= out_5[0].a.lateCancel @[BundleMap.scala 247:19]
    _WIRE.a.earlyValid <= out_5[0].a.earlyValid @[BundleMap.scala 247:19]
    out_5[0].a.ready <= _WIRE.a.ready @[BundleMap.scala 247:19]
    out_5[0].b.valid <= UInt<1>("h0") @[Xbar.scala 309:24]
    out_5[0].b.bits.corrupt is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.data is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.mask is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.address is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.source is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.size is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.param is invalid @[Xbar.scala 310:24]
    out_5[0].b.bits.opcode is invalid @[Xbar.scala 310:24]
    _WIRE.b.ready <= UInt<1>("h1") @[Xbar.scala 311:27]
    _WIRE.b.bits.corrupt is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.data is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.mask is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.address is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.source is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.size is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.param is invalid @[Xbar.scala 312:27]
    _WIRE.b.bits.opcode is invalid @[Xbar.scala 312:27]
    out_5[0].c.ready <= UInt<1>("h1") @[Xbar.scala 318:24]
    out_5[0].c.bits.corrupt is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.data is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.address is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.source is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.size is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.param is invalid @[Xbar.scala 319:24]
    out_5[0].c.bits.opcode is invalid @[Xbar.scala 319:24]
    _WIRE.c.valid <= UInt<1>("h0") @[Xbar.scala 320:27]
    _WIRE.c.bits.corrupt is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.data is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.address is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.source is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.size is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.param is invalid @[Xbar.scala 321:27]
    _WIRE.c.bits.opcode is invalid @[Xbar.scala 321:27]
    out_5[0].d.bits.corrupt <= _WIRE.d.bits.corrupt @[BundleMap.scala 247:19]
    out_5[0].d.bits.data <= _WIRE.d.bits.data @[BundleMap.scala 247:19]
    out_5[0].d.bits.denied <= _WIRE.d.bits.denied @[BundleMap.scala 247:19]
    out_5[0].d.bits.sink <= _WIRE.d.bits.sink @[BundleMap.scala 247:19]
    out_5[0].d.bits.source <= _WIRE.d.bits.source @[BundleMap.scala 247:19]
    out_5[0].d.bits.size <= _WIRE.d.bits.size @[BundleMap.scala 247:19]
    out_5[0].d.bits.param <= _WIRE.d.bits.param @[BundleMap.scala 247:19]
    out_5[0].d.bits.opcode <= _WIRE.d.bits.opcode @[BundleMap.scala 247:19]
    out_5[0].d.valid <= _WIRE.d.valid @[BundleMap.scala 247:19]
    _WIRE.d.ready <= out_5[0].d.ready @[BundleMap.scala 247:19]
    node _out_0_d_bits_sink_T = or(_WIRE.d.bits.sink, UInt<1>("h0")) @[Xbar.scala 326:53]
    out_5[0].d.bits.sink <= _out_0_d_bits_sink_T @[Xbar.scala 326:28]
    out_5[0].e.ready <= UInt<1>("h1") @[Xbar.scala 338:24]
    out_5[0].e.bits.sink is invalid @[Xbar.scala 339:24]
    _WIRE.e.valid <= UInt<1>("h0") @[Xbar.scala 340:27]
    _WIRE.e.bits.sink is invalid @[Xbar.scala 341:27]
    node _requestAIO_T = xor(in[0].a.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAIO_T_1 = cvt(_requestAIO_T) @[Parameters.scala 137:45]
    node _requestAIO_T_2 = and(_requestAIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAIO_T_3 = asSInt(_requestAIO_T_2) @[Parameters.scala 137:50]
    node _requestAIO_T_4 = eq(_requestAIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestAIO_0_0 = or(UInt<1>("h1"), _requestAIO_T_4) @[Xbar.scala 382:107]
    node _requestAIO_T_5 = xor(in[1].a.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAIO_T_6 = cvt(_requestAIO_T_5) @[Parameters.scala 137:45]
    node _requestAIO_T_7 = and(_requestAIO_T_6, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAIO_T_8 = asSInt(_requestAIO_T_7) @[Parameters.scala 137:50]
    node _requestAIO_T_9 = eq(_requestAIO_T_8, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestAIO_1_0 = or(UInt<1>("h1"), _requestAIO_T_9) @[Xbar.scala 382:107]
    node _requestAIO_T_10 = xor(in[2].a.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAIO_T_11 = cvt(_requestAIO_T_10) @[Parameters.scala 137:45]
    node _requestAIO_T_12 = and(_requestAIO_T_11, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAIO_T_13 = asSInt(_requestAIO_T_12) @[Parameters.scala 137:50]
    node _requestAIO_T_14 = eq(_requestAIO_T_13, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestAIO_2_0 = or(UInt<1>("h1"), _requestAIO_T_14) @[Xbar.scala 382:107]
    node _requestAIO_T_15 = xor(in[3].a.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAIO_T_16 = cvt(_requestAIO_T_15) @[Parameters.scala 137:45]
    node _requestAIO_T_17 = and(_requestAIO_T_16, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAIO_T_18 = asSInt(_requestAIO_T_17) @[Parameters.scala 137:50]
    node _requestAIO_T_19 = eq(_requestAIO_T_18, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestAIO_3_0 = or(UInt<1>("h1"), _requestAIO_T_19) @[Xbar.scala 382:107]
    node _requestAIO_T_20 = xor(in[4].a.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAIO_T_21 = cvt(_requestAIO_T_20) @[Parameters.scala 137:45]
    node _requestAIO_T_22 = and(_requestAIO_T_21, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAIO_T_23 = asSInt(_requestAIO_T_22) @[Parameters.scala 137:50]
    node _requestAIO_T_24 = eq(_requestAIO_T_23, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestAIO_4_0 = or(UInt<1>("h1"), _requestAIO_T_24) @[Xbar.scala 382:107]
    node _requestCIO_T = xor(in[0].c.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestCIO_T_1 = cvt(_requestCIO_T) @[Parameters.scala 137:45]
    node _requestCIO_T_2 = and(_requestCIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestCIO_T_3 = asSInt(_requestCIO_T_2) @[Parameters.scala 137:50]
    node _requestCIO_T_4 = eq(_requestCIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestCIO_0_0 = or(UInt<1>("h1"), _requestCIO_T_4) @[Xbar.scala 383:107]
    node _requestCIO_T_5 = xor(in[1].c.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestCIO_T_6 = cvt(_requestCIO_T_5) @[Parameters.scala 137:45]
    node _requestCIO_T_7 = and(_requestCIO_T_6, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestCIO_T_8 = asSInt(_requestCIO_T_7) @[Parameters.scala 137:50]
    node _requestCIO_T_9 = eq(_requestCIO_T_8, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestCIO_1_0 = or(UInt<1>("h1"), _requestCIO_T_9) @[Xbar.scala 383:107]
    node _requestCIO_T_10 = xor(in[2].c.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestCIO_T_11 = cvt(_requestCIO_T_10) @[Parameters.scala 137:45]
    node _requestCIO_T_12 = and(_requestCIO_T_11, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestCIO_T_13 = asSInt(_requestCIO_T_12) @[Parameters.scala 137:50]
    node _requestCIO_T_14 = eq(_requestCIO_T_13, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestCIO_2_0 = or(UInt<1>("h1"), _requestCIO_T_14) @[Xbar.scala 383:107]
    node _requestCIO_T_15 = xor(in[3].c.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestCIO_T_16 = cvt(_requestCIO_T_15) @[Parameters.scala 137:45]
    node _requestCIO_T_17 = and(_requestCIO_T_16, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestCIO_T_18 = asSInt(_requestCIO_T_17) @[Parameters.scala 137:50]
    node _requestCIO_T_19 = eq(_requestCIO_T_18, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestCIO_3_0 = or(UInt<1>("h1"), _requestCIO_T_19) @[Xbar.scala 383:107]
    node _requestCIO_T_20 = xor(in[4].c.bits.address, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestCIO_T_21 = cvt(_requestCIO_T_20) @[Parameters.scala 137:45]
    node _requestCIO_T_22 = and(_requestCIO_T_21, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestCIO_T_23 = asSInt(_requestCIO_T_22) @[Parameters.scala 137:50]
    node _requestCIO_T_24 = eq(_requestCIO_T_23, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node requestCIO_4_0 = or(UInt<1>("h1"), _requestCIO_T_24) @[Xbar.scala 383:107]
    node _requestBOI_uncommonBits_T = or(out_5[0].b.bits.source, UInt<1>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits = bits(_requestBOI_uncommonBits_T, 0, 0) @[Parameters.scala 52:64]
    node _requestBOI_T = shr(out_5[0].b.bits.source, 1) @[Parameters.scala 54:10]
    node _requestBOI_T_1 = eq(_requestBOI_T, UInt<6>("h20")) @[Parameters.scala 54:32]
    node _requestBOI_T_2 = leq(UInt<1>("h0"), requestBOI_uncommonBits) @[Parameters.scala 56:34]
    node _requestBOI_T_3 = and(_requestBOI_T_1, _requestBOI_T_2) @[Parameters.scala 54:69]
    node _requestBOI_T_4 = leq(requestBOI_uncommonBits, UInt<1>("h1")) @[Parameters.scala 57:20]
    node requestBOI_0_0 = and(_requestBOI_T_3, _requestBOI_T_4) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T_1 = or(out_5[0].b.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits_1 = bits(_requestBOI_uncommonBits_T_1, 3, 0) @[Parameters.scala 52:64]
    node _requestBOI_T_5 = shr(out_5[0].b.bits.source, 4) @[Parameters.scala 54:10]
    node _requestBOI_T_6 = eq(_requestBOI_T_5, UInt<2>("h3")) @[Parameters.scala 54:32]
    node _requestBOI_T_7 = leq(UInt<1>("h0"), requestBOI_uncommonBits_1) @[Parameters.scala 56:34]
    node _requestBOI_T_8 = and(_requestBOI_T_6, _requestBOI_T_7) @[Parameters.scala 54:69]
    node _requestBOI_T_9 = leq(requestBOI_uncommonBits_1, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestBOI_0_1 = and(_requestBOI_T_8, _requestBOI_T_9) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T_2 = or(out_5[0].b.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits_2 = bits(_requestBOI_uncommonBits_T_2, 3, 0) @[Parameters.scala 52:64]
    node _requestBOI_T_10 = shr(out_5[0].b.bits.source, 4) @[Parameters.scala 54:10]
    node _requestBOI_T_11 = eq(_requestBOI_T_10, UInt<2>("h2")) @[Parameters.scala 54:32]
    node _requestBOI_T_12 = leq(UInt<1>("h0"), requestBOI_uncommonBits_2) @[Parameters.scala 56:34]
    node _requestBOI_T_13 = and(_requestBOI_T_11, _requestBOI_T_12) @[Parameters.scala 54:69]
    node _requestBOI_T_14 = leq(requestBOI_uncommonBits_2, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestBOI_0_2 = and(_requestBOI_T_13, _requestBOI_T_14) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T_3 = or(out_5[0].b.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits_3 = bits(_requestBOI_uncommonBits_T_3, 3, 0) @[Parameters.scala 52:64]
    node _requestBOI_T_15 = shr(out_5[0].b.bits.source, 4) @[Parameters.scala 54:10]
    node _requestBOI_T_16 = eq(_requestBOI_T_15, UInt<1>("h1")) @[Parameters.scala 54:32]
    node _requestBOI_T_17 = leq(UInt<1>("h0"), requestBOI_uncommonBits_3) @[Parameters.scala 56:34]
    node _requestBOI_T_18 = and(_requestBOI_T_16, _requestBOI_T_17) @[Parameters.scala 54:69]
    node _requestBOI_T_19 = leq(requestBOI_uncommonBits_3, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestBOI_0_3 = and(_requestBOI_T_18, _requestBOI_T_19) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T_4 = or(out_5[0].b.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits_4 = bits(_requestBOI_uncommonBits_T_4, 3, 0) @[Parameters.scala 52:64]
    node _requestBOI_T_20 = shr(out_5[0].b.bits.source, 4) @[Parameters.scala 54:10]
    node _requestBOI_T_21 = eq(_requestBOI_T_20, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestBOI_T_22 = leq(UInt<1>("h0"), requestBOI_uncommonBits_4) @[Parameters.scala 56:34]
    node _requestBOI_T_23 = and(_requestBOI_T_21, _requestBOI_T_22) @[Parameters.scala 54:69]
    node _requestBOI_T_24 = leq(requestBOI_uncommonBits_4, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestBOI_0_4 = and(_requestBOI_T_23, _requestBOI_T_24) @[Parameters.scala 56:50]
    node _requestDOI_uncommonBits_T = or(out_5[0].d.bits.source, UInt<1>("h0")) @[Parameters.scala 52:29]
    node requestDOI_uncommonBits = bits(_requestDOI_uncommonBits_T, 0, 0) @[Parameters.scala 52:64]
    node _requestDOI_T = shr(out_5[0].d.bits.source, 1) @[Parameters.scala 54:10]
    node _requestDOI_T_1 = eq(_requestDOI_T, UInt<6>("h20")) @[Parameters.scala 54:32]
    node _requestDOI_T_2 = leq(UInt<1>("h0"), requestDOI_uncommonBits) @[Parameters.scala 56:34]
    node _requestDOI_T_3 = and(_requestDOI_T_1, _requestDOI_T_2) @[Parameters.scala 54:69]
    node _requestDOI_T_4 = leq(requestDOI_uncommonBits, UInt<1>("h1")) @[Parameters.scala 57:20]
    node requestDOI_0_0 = and(_requestDOI_T_3, _requestDOI_T_4) @[Parameters.scala 56:50]
    node _requestDOI_uncommonBits_T_1 = or(out_5[0].d.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestDOI_uncommonBits_1 = bits(_requestDOI_uncommonBits_T_1, 3, 0) @[Parameters.scala 52:64]
    node _requestDOI_T_5 = shr(out_5[0].d.bits.source, 4) @[Parameters.scala 54:10]
    node _requestDOI_T_6 = eq(_requestDOI_T_5, UInt<2>("h3")) @[Parameters.scala 54:32]
    node _requestDOI_T_7 = leq(UInt<1>("h0"), requestDOI_uncommonBits_1) @[Parameters.scala 56:34]
    node _requestDOI_T_8 = and(_requestDOI_T_6, _requestDOI_T_7) @[Parameters.scala 54:69]
    node _requestDOI_T_9 = leq(requestDOI_uncommonBits_1, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestDOI_0_1 = and(_requestDOI_T_8, _requestDOI_T_9) @[Parameters.scala 56:50]
    node _requestDOI_uncommonBits_T_2 = or(out_5[0].d.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestDOI_uncommonBits_2 = bits(_requestDOI_uncommonBits_T_2, 3, 0) @[Parameters.scala 52:64]
    node _requestDOI_T_10 = shr(out_5[0].d.bits.source, 4) @[Parameters.scala 54:10]
    node _requestDOI_T_11 = eq(_requestDOI_T_10, UInt<2>("h2")) @[Parameters.scala 54:32]
    node _requestDOI_T_12 = leq(UInt<1>("h0"), requestDOI_uncommonBits_2) @[Parameters.scala 56:34]
    node _requestDOI_T_13 = and(_requestDOI_T_11, _requestDOI_T_12) @[Parameters.scala 54:69]
    node _requestDOI_T_14 = leq(requestDOI_uncommonBits_2, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestDOI_0_2 = and(_requestDOI_T_13, _requestDOI_T_14) @[Parameters.scala 56:50]
    node _requestDOI_uncommonBits_T_3 = or(out_5[0].d.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestDOI_uncommonBits_3 = bits(_requestDOI_uncommonBits_T_3, 3, 0) @[Parameters.scala 52:64]
    node _requestDOI_T_15 = shr(out_5[0].d.bits.source, 4) @[Parameters.scala 54:10]
    node _requestDOI_T_16 = eq(_requestDOI_T_15, UInt<1>("h1")) @[Parameters.scala 54:32]
    node _requestDOI_T_17 = leq(UInt<1>("h0"), requestDOI_uncommonBits_3) @[Parameters.scala 56:34]
    node _requestDOI_T_18 = and(_requestDOI_T_16, _requestDOI_T_17) @[Parameters.scala 54:69]
    node _requestDOI_T_19 = leq(requestDOI_uncommonBits_3, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestDOI_0_3 = and(_requestDOI_T_18, _requestDOI_T_19) @[Parameters.scala 56:50]
    node _requestDOI_uncommonBits_T_4 = or(out_5[0].d.bits.source, UInt<4>("h0")) @[Parameters.scala 52:29]
    node requestDOI_uncommonBits_4 = bits(_requestDOI_uncommonBits_T_4, 3, 0) @[Parameters.scala 52:64]
    node _requestDOI_T_20 = shr(out_5[0].d.bits.source, 4) @[Parameters.scala 54:10]
    node _requestDOI_T_21 = eq(_requestDOI_T_20, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestDOI_T_22 = leq(UInt<1>("h0"), requestDOI_uncommonBits_4) @[Parameters.scala 56:34]
    node _requestDOI_T_23 = and(_requestDOI_T_21, _requestDOI_T_22) @[Parameters.scala 54:69]
    node _requestDOI_T_24 = leq(requestDOI_uncommonBits_4, UInt<4>("hf")) @[Parameters.scala 57:20]
    node requestDOI_0_4 = and(_requestDOI_T_23, _requestDOI_T_24) @[Parameters.scala 56:50]
    node _beatsAI_decode_T = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsAI_decode_T_1 = dshl(_beatsAI_decode_T, in[0].a.bits.size) @[package.scala 235:71]
    node _beatsAI_decode_T_2 = bits(_beatsAI_decode_T_1, 5, 0) @[package.scala 235:76]
    node _beatsAI_decode_T_3 = not(_beatsAI_decode_T_2) @[package.scala 235:46]
    node beatsAI_decode = shr(_beatsAI_decode_T_3, 6) @[Edges.scala 219:59]
    node _beatsAI_opdata_T = bits(in[0].a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beatsAI_opdata = eq(_beatsAI_opdata_T, UInt<1>("h0")) @[Edges.scala 91:28]
    node beatsAI_0 = mux(beatsAI_opdata, beatsAI_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsAI_decode_T_4 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsAI_decode_T_5 = dshl(_beatsAI_decode_T_4, in[1].a.bits.size) @[package.scala 235:71]
    node _beatsAI_decode_T_6 = bits(_beatsAI_decode_T_5, 5, 0) @[package.scala 235:76]
    node _beatsAI_decode_T_7 = not(_beatsAI_decode_T_6) @[package.scala 235:46]
    node beatsAI_decode_1 = shr(_beatsAI_decode_T_7, 6) @[Edges.scala 219:59]
    node _beatsAI_opdata_T_1 = bits(in[1].a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beatsAI_opdata_1 = eq(_beatsAI_opdata_T_1, UInt<1>("h0")) @[Edges.scala 91:28]
    node beatsAI_1 = mux(beatsAI_opdata_1, beatsAI_decode_1, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsAI_decode_T_8 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsAI_decode_T_9 = dshl(_beatsAI_decode_T_8, in[2].a.bits.size) @[package.scala 235:71]
    node _beatsAI_decode_T_10 = bits(_beatsAI_decode_T_9, 5, 0) @[package.scala 235:76]
    node _beatsAI_decode_T_11 = not(_beatsAI_decode_T_10) @[package.scala 235:46]
    node beatsAI_decode_2 = shr(_beatsAI_decode_T_11, 6) @[Edges.scala 219:59]
    node _beatsAI_opdata_T_2 = bits(in[2].a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beatsAI_opdata_2 = eq(_beatsAI_opdata_T_2, UInt<1>("h0")) @[Edges.scala 91:28]
    node beatsAI_2 = mux(beatsAI_opdata_2, beatsAI_decode_2, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsAI_decode_T_12 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsAI_decode_T_13 = dshl(_beatsAI_decode_T_12, in[3].a.bits.size) @[package.scala 235:71]
    node _beatsAI_decode_T_14 = bits(_beatsAI_decode_T_13, 5, 0) @[package.scala 235:76]
    node _beatsAI_decode_T_15 = not(_beatsAI_decode_T_14) @[package.scala 235:46]
    node beatsAI_decode_3 = shr(_beatsAI_decode_T_15, 6) @[Edges.scala 219:59]
    node _beatsAI_opdata_T_3 = bits(in[3].a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beatsAI_opdata_3 = eq(_beatsAI_opdata_T_3, UInt<1>("h0")) @[Edges.scala 91:28]
    node beatsAI_3 = mux(beatsAI_opdata_3, beatsAI_decode_3, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsAI_decode_T_16 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsAI_decode_T_17 = dshl(_beatsAI_decode_T_16, in[4].a.bits.size) @[package.scala 235:71]
    node _beatsAI_decode_T_18 = bits(_beatsAI_decode_T_17, 5, 0) @[package.scala 235:76]
    node _beatsAI_decode_T_19 = not(_beatsAI_decode_T_18) @[package.scala 235:46]
    node beatsAI_decode_4 = shr(_beatsAI_decode_T_19, 6) @[Edges.scala 219:59]
    node _beatsAI_opdata_T_4 = bits(in[4].a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beatsAI_opdata_4 = eq(_beatsAI_opdata_T_4, UInt<1>("h0")) @[Edges.scala 91:28]
    node beatsAI_4 = mux(beatsAI_opdata_4, beatsAI_decode_4, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsBO_decode_T = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsBO_decode_T_1 = dshl(_beatsBO_decode_T, out_5[0].b.bits.size) @[package.scala 235:71]
    node _beatsBO_decode_T_2 = bits(_beatsBO_decode_T_1, 5, 0) @[package.scala 235:76]
    node _beatsBO_decode_T_3 = not(_beatsBO_decode_T_2) @[package.scala 235:46]
    node beatsBO_decode = shr(_beatsBO_decode_T_3, 6) @[Edges.scala 219:59]
    node _beatsBO_opdata_T = bits(out_5[0].b.bits.opcode, 2, 2) @[Edges.scala 96:37]
    node beatsBO_opdata = eq(_beatsBO_opdata_T, UInt<1>("h0")) @[Edges.scala 96:28]
    node beatsBO_0 = mux(beatsBO_opdata, beatsBO_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsCI_decode_T = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsCI_decode_T_1 = dshl(_beatsCI_decode_T, in[0].c.bits.size) @[package.scala 235:71]
    node _beatsCI_decode_T_2 = bits(_beatsCI_decode_T_1, 5, 0) @[package.scala 235:76]
    node _beatsCI_decode_T_3 = not(_beatsCI_decode_T_2) @[package.scala 235:46]
    node beatsCI_decode = shr(_beatsCI_decode_T_3, 6) @[Edges.scala 219:59]
    node beatsCI_opdata = bits(in[0].c.bits.opcode, 0, 0) @[Edges.scala 101:36]
    node beatsCI_0 = mux(beatsCI_opdata, beatsCI_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsCI_decode_T_4 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsCI_decode_T_5 = dshl(_beatsCI_decode_T_4, in[1].c.bits.size) @[package.scala 235:71]
    node _beatsCI_decode_T_6 = bits(_beatsCI_decode_T_5, 5, 0) @[package.scala 235:76]
    node _beatsCI_decode_T_7 = not(_beatsCI_decode_T_6) @[package.scala 235:46]
    node beatsCI_decode_1 = shr(_beatsCI_decode_T_7, 6) @[Edges.scala 219:59]
    node beatsCI_opdata_1 = bits(in[1].c.bits.opcode, 0, 0) @[Edges.scala 101:36]
    node beatsCI_1 = mux(beatsCI_opdata_1, beatsCI_decode_1, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsCI_decode_T_8 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsCI_decode_T_9 = dshl(_beatsCI_decode_T_8, in[2].c.bits.size) @[package.scala 235:71]
    node _beatsCI_decode_T_10 = bits(_beatsCI_decode_T_9, 5, 0) @[package.scala 235:76]
    node _beatsCI_decode_T_11 = not(_beatsCI_decode_T_10) @[package.scala 235:46]
    node beatsCI_decode_2 = shr(_beatsCI_decode_T_11, 6) @[Edges.scala 219:59]
    node beatsCI_opdata_2 = bits(in[2].c.bits.opcode, 0, 0) @[Edges.scala 101:36]
    node beatsCI_2 = mux(beatsCI_opdata_2, beatsCI_decode_2, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsCI_decode_T_12 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsCI_decode_T_13 = dshl(_beatsCI_decode_T_12, in[3].c.bits.size) @[package.scala 235:71]
    node _beatsCI_decode_T_14 = bits(_beatsCI_decode_T_13, 5, 0) @[package.scala 235:76]
    node _beatsCI_decode_T_15 = not(_beatsCI_decode_T_14) @[package.scala 235:46]
    node beatsCI_decode_3 = shr(_beatsCI_decode_T_15, 6) @[Edges.scala 219:59]
    node beatsCI_opdata_3 = bits(in[3].c.bits.opcode, 0, 0) @[Edges.scala 101:36]
    node beatsCI_3 = mux(beatsCI_opdata_3, beatsCI_decode_3, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsCI_decode_T_16 = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsCI_decode_T_17 = dshl(_beatsCI_decode_T_16, in[4].c.bits.size) @[package.scala 235:71]
    node _beatsCI_decode_T_18 = bits(_beatsCI_decode_T_17, 5, 0) @[package.scala 235:76]
    node _beatsCI_decode_T_19 = not(_beatsCI_decode_T_18) @[package.scala 235:46]
    node beatsCI_decode_4 = shr(_beatsCI_decode_T_19, 6) @[Edges.scala 219:59]
    node beatsCI_opdata_4 = bits(in[4].c.bits.opcode, 0, 0) @[Edges.scala 101:36]
    node beatsCI_4 = mux(beatsCI_opdata_4, beatsCI_decode_4, UInt<1>("h0")) @[Edges.scala 220:14]
    node _beatsDO_decode_T = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beatsDO_decode_T_1 = dshl(_beatsDO_decode_T, out_5[0].d.bits.size) @[package.scala 235:71]
    node _beatsDO_decode_T_2 = bits(_beatsDO_decode_T_1, 5, 0) @[package.scala 235:76]
    node _beatsDO_decode_T_3 = not(_beatsDO_decode_T_2) @[package.scala 235:46]
    node beatsDO_decode = shr(_beatsDO_decode_T_3, 6) @[Edges.scala 219:59]
    node beatsDO_opdata = bits(out_5[0].d.bits.opcode, 0, 0) @[Edges.scala 105:36]
    node beatsDO_0 = mux(beatsDO_opdata, beatsDO_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    wire portsAOI_filtered : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}[1] @[Xbar.scala 427:24]
    portsAOI_filtered[0].bits <= in[0].a.bits @[Xbar.scala 429:24]
    portsAOI_filtered[0].lateCancel <= in[0].a.lateCancel @[Xbar.scala 430:30]
    node _portsAOI_filtered_0_earlyValid_T = or(requestAIO_0_0, UInt<1>("h1")) @[Xbar.scala 431:64]
    node _portsAOI_filtered_0_earlyValid_T_1 = and(in[0].a.earlyValid, _portsAOI_filtered_0_earlyValid_T) @[Xbar.scala 431:50]
    portsAOI_filtered[0].earlyValid <= _portsAOI_filtered_0_earlyValid_T_1 @[Xbar.scala 431:30]
    in[0].a.ready <= portsAOI_filtered[0].ready @[Xbar.scala 433:17]
    wire portsAOI_filtered_1 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}[1] @[Xbar.scala 427:24]
    portsAOI_filtered_1[0].bits <= in[1].a.bits @[Xbar.scala 429:24]
    portsAOI_filtered_1[0].lateCancel <= in[1].a.lateCancel @[Xbar.scala 430:30]
    node _portsAOI_filtered_0_earlyValid_T_2 = or(requestAIO_1_0, UInt<1>("h1")) @[Xbar.scala 431:64]
    node _portsAOI_filtered_0_earlyValid_T_3 = and(in[1].a.earlyValid, _portsAOI_filtered_0_earlyValid_T_2) @[Xbar.scala 431:50]
    portsAOI_filtered_1[0].earlyValid <= _portsAOI_filtered_0_earlyValid_T_3 @[Xbar.scala 431:30]
    in[1].a.ready <= portsAOI_filtered_1[0].ready @[Xbar.scala 433:17]
    wire portsAOI_filtered_2 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}[1] @[Xbar.scala 427:24]
    portsAOI_filtered_2[0].bits <= in[2].a.bits @[Xbar.scala 429:24]
    portsAOI_filtered_2[0].lateCancel <= in[2].a.lateCancel @[Xbar.scala 430:30]
    node _portsAOI_filtered_0_earlyValid_T_4 = or(requestAIO_2_0, UInt<1>("h1")) @[Xbar.scala 431:64]
    node _portsAOI_filtered_0_earlyValid_T_5 = and(in[2].a.earlyValid, _portsAOI_filtered_0_earlyValid_T_4) @[Xbar.scala 431:50]
    portsAOI_filtered_2[0].earlyValid <= _portsAOI_filtered_0_earlyValid_T_5 @[Xbar.scala 431:30]
    in[2].a.ready <= portsAOI_filtered_2[0].ready @[Xbar.scala 433:17]
    wire portsAOI_filtered_3 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}[1] @[Xbar.scala 427:24]
    portsAOI_filtered_3[0].bits <= in[3].a.bits @[Xbar.scala 429:24]
    portsAOI_filtered_3[0].lateCancel <= in[3].a.lateCancel @[Xbar.scala 430:30]
    node _portsAOI_filtered_0_earlyValid_T_6 = or(requestAIO_3_0, UInt<1>("h1")) @[Xbar.scala 431:64]
    node _portsAOI_filtered_0_earlyValid_T_7 = and(in[3].a.earlyValid, _portsAOI_filtered_0_earlyValid_T_6) @[Xbar.scala 431:50]
    portsAOI_filtered_3[0].earlyValid <= _portsAOI_filtered_0_earlyValid_T_7 @[Xbar.scala 431:30]
    in[3].a.ready <= portsAOI_filtered_3[0].ready @[Xbar.scala 433:17]
    wire portsAOI_filtered_4 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>}[1] @[Xbar.scala 427:24]
    portsAOI_filtered_4[0].bits <= in[4].a.bits @[Xbar.scala 429:24]
    portsAOI_filtered_4[0].lateCancel <= in[4].a.lateCancel @[Xbar.scala 430:30]
    node _portsAOI_filtered_0_earlyValid_T_8 = or(requestAIO_4_0, UInt<1>("h1")) @[Xbar.scala 431:64]
    node _portsAOI_filtered_0_earlyValid_T_9 = and(in[4].a.earlyValid, _portsAOI_filtered_0_earlyValid_T_8) @[Xbar.scala 431:50]
    portsAOI_filtered_4[0].earlyValid <= _portsAOI_filtered_0_earlyValid_T_9 @[Xbar.scala 431:30]
    in[4].a.ready <= portsAOI_filtered_4[0].ready @[Xbar.scala 433:17]
    wire portsBIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}[5] @[Xbar.scala 179:24]
    portsBIO_filtered[0].bits.corrupt <= out_5[0].b.bits.corrupt @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.data <= out_5[0].b.bits.data @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.mask <= out_5[0].b.bits.mask @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.address <= out_5[0].b.bits.address @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.source <= out_5[0].b.bits.source @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.size <= out_5[0].b.bits.size @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.param <= out_5[0].b.bits.param @[Xbar.scala 181:24]
    portsBIO_filtered[0].bits.opcode <= out_5[0].b.bits.opcode @[Xbar.scala 181:24]
    node _portsBIO_filtered_0_valid_T = or(requestBOI_0_0, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsBIO_filtered_0_valid_T_1 = and(out_5[0].b.valid, _portsBIO_filtered_0_valid_T) @[Xbar.scala 182:40]
    portsBIO_filtered[0].valid <= _portsBIO_filtered_0_valid_T_1 @[Xbar.scala 182:25]
    portsBIO_filtered[1].bits.corrupt <= out_5[0].b.bits.corrupt @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.data <= out_5[0].b.bits.data @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.mask <= out_5[0].b.bits.mask @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.address <= out_5[0].b.bits.address @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.source <= out_5[0].b.bits.source @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.size <= out_5[0].b.bits.size @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.param <= out_5[0].b.bits.param @[Xbar.scala 181:24]
    portsBIO_filtered[1].bits.opcode <= out_5[0].b.bits.opcode @[Xbar.scala 181:24]
    node _portsBIO_filtered_1_valid_T = or(requestBOI_0_1, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsBIO_filtered_1_valid_T_1 = and(out_5[0].b.valid, _portsBIO_filtered_1_valid_T) @[Xbar.scala 182:40]
    portsBIO_filtered[1].valid <= _portsBIO_filtered_1_valid_T_1 @[Xbar.scala 182:25]
    portsBIO_filtered[2].bits.corrupt <= out_5[0].b.bits.corrupt @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.data <= out_5[0].b.bits.data @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.mask <= out_5[0].b.bits.mask @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.address <= out_5[0].b.bits.address @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.source <= out_5[0].b.bits.source @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.size <= out_5[0].b.bits.size @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.param <= out_5[0].b.bits.param @[Xbar.scala 181:24]
    portsBIO_filtered[2].bits.opcode <= out_5[0].b.bits.opcode @[Xbar.scala 181:24]
    node _portsBIO_filtered_2_valid_T = or(requestBOI_0_2, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsBIO_filtered_2_valid_T_1 = and(out_5[0].b.valid, _portsBIO_filtered_2_valid_T) @[Xbar.scala 182:40]
    portsBIO_filtered[2].valid <= _portsBIO_filtered_2_valid_T_1 @[Xbar.scala 182:25]
    portsBIO_filtered[3].bits.corrupt <= out_5[0].b.bits.corrupt @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.data <= out_5[0].b.bits.data @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.mask <= out_5[0].b.bits.mask @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.address <= out_5[0].b.bits.address @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.source <= out_5[0].b.bits.source @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.size <= out_5[0].b.bits.size @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.param <= out_5[0].b.bits.param @[Xbar.scala 181:24]
    portsBIO_filtered[3].bits.opcode <= out_5[0].b.bits.opcode @[Xbar.scala 181:24]
    node _portsBIO_filtered_3_valid_T = or(requestBOI_0_3, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsBIO_filtered_3_valid_T_1 = and(out_5[0].b.valid, _portsBIO_filtered_3_valid_T) @[Xbar.scala 182:40]
    portsBIO_filtered[3].valid <= _portsBIO_filtered_3_valid_T_1 @[Xbar.scala 182:25]
    portsBIO_filtered[4].bits.corrupt <= out_5[0].b.bits.corrupt @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.data <= out_5[0].b.bits.data @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.mask <= out_5[0].b.bits.mask @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.address <= out_5[0].b.bits.address @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.source <= out_5[0].b.bits.source @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.size <= out_5[0].b.bits.size @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.param <= out_5[0].b.bits.param @[Xbar.scala 181:24]
    portsBIO_filtered[4].bits.opcode <= out_5[0].b.bits.opcode @[Xbar.scala 181:24]
    node _portsBIO_filtered_4_valid_T = or(requestBOI_0_4, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsBIO_filtered_4_valid_T_1 = and(out_5[0].b.valid, _portsBIO_filtered_4_valid_T) @[Xbar.scala 182:40]
    portsBIO_filtered[4].valid <= _portsBIO_filtered_4_valid_T_1 @[Xbar.scala 182:25]
    node _portsBIO_out_0_b_ready_T = mux(requestBOI_0_0, portsBIO_filtered[0].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_1 = mux(requestBOI_0_1, portsBIO_filtered[1].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_2 = mux(requestBOI_0_2, portsBIO_filtered[2].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_3 = mux(requestBOI_0_3, portsBIO_filtered[3].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_4 = mux(requestBOI_0_4, portsBIO_filtered[4].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_5 = or(_portsBIO_out_0_b_ready_T, _portsBIO_out_0_b_ready_T_1) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_6 = or(_portsBIO_out_0_b_ready_T_5, _portsBIO_out_0_b_ready_T_2) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_7 = or(_portsBIO_out_0_b_ready_T_6, _portsBIO_out_0_b_ready_T_3) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_8 = or(_portsBIO_out_0_b_ready_T_7, _portsBIO_out_0_b_ready_T_4) @[Mux.scala 27:73]
    wire _portsBIO_out_0_b_ready_WIRE : UInt<1> @[Mux.scala 27:73]
    _portsBIO_out_0_b_ready_WIRE <= _portsBIO_out_0_b_ready_T_8 @[Mux.scala 27:73]
    out_5[0].b.ready <= _portsBIO_out_0_b_ready_WIRE @[Xbar.scala 184:17]
    wire portsCOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsCOI_filtered[0].bits <= in[0].c.bits @[Xbar.scala 181:24]
    node _portsCOI_filtered_0_valid_T = or(requestCIO_0_0, UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsCOI_filtered_0_valid_T_1 = and(in[0].c.valid, _portsCOI_filtered_0_valid_T) @[Xbar.scala 182:40]
    portsCOI_filtered[0].valid <= _portsCOI_filtered_0_valid_T_1 @[Xbar.scala 182:25]
    in[0].c.ready <= portsCOI_filtered[0].ready @[Xbar.scala 184:17]
    wire portsCOI_filtered_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsCOI_filtered_1[0].bits <= in[1].c.bits @[Xbar.scala 181:24]
    node _portsCOI_filtered_0_valid_T_2 = or(requestCIO_1_0, UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsCOI_filtered_0_valid_T_3 = and(in[1].c.valid, _portsCOI_filtered_0_valid_T_2) @[Xbar.scala 182:40]
    portsCOI_filtered_1[0].valid <= _portsCOI_filtered_0_valid_T_3 @[Xbar.scala 182:25]
    in[1].c.ready <= portsCOI_filtered_1[0].ready @[Xbar.scala 184:17]
    wire portsCOI_filtered_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsCOI_filtered_2[0].bits <= in[2].c.bits @[Xbar.scala 181:24]
    node _portsCOI_filtered_0_valid_T_4 = or(requestCIO_2_0, UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsCOI_filtered_0_valid_T_5 = and(in[2].c.valid, _portsCOI_filtered_0_valid_T_4) @[Xbar.scala 182:40]
    portsCOI_filtered_2[0].valid <= _portsCOI_filtered_0_valid_T_5 @[Xbar.scala 182:25]
    in[2].c.ready <= portsCOI_filtered_2[0].ready @[Xbar.scala 184:17]
    wire portsCOI_filtered_3 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsCOI_filtered_3[0].bits <= in[3].c.bits @[Xbar.scala 181:24]
    node _portsCOI_filtered_0_valid_T_6 = or(requestCIO_3_0, UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsCOI_filtered_0_valid_T_7 = and(in[3].c.valid, _portsCOI_filtered_0_valid_T_6) @[Xbar.scala 182:40]
    portsCOI_filtered_3[0].valid <= _portsCOI_filtered_0_valid_T_7 @[Xbar.scala 182:25]
    in[3].c.ready <= portsCOI_filtered_3[0].ready @[Xbar.scala 184:17]
    wire portsCOI_filtered_4 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsCOI_filtered_4[0].bits <= in[4].c.bits @[Xbar.scala 181:24]
    node _portsCOI_filtered_0_valid_T_8 = or(requestCIO_4_0, UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsCOI_filtered_0_valid_T_9 = and(in[4].c.valid, _portsCOI_filtered_0_valid_T_8) @[Xbar.scala 182:40]
    portsCOI_filtered_4[0].valid <= _portsCOI_filtered_0_valid_T_9 @[Xbar.scala 182:25]
    in[4].c.ready <= portsCOI_filtered_4[0].ready @[Xbar.scala 184:17]
    wire portsDIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}[5] @[Xbar.scala 179:24]
    portsDIO_filtered[0].bits.corrupt <= out_5[0].d.bits.corrupt @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.data <= out_5[0].d.bits.data @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.denied <= out_5[0].d.bits.denied @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.sink <= out_5[0].d.bits.sink @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.source <= out_5[0].d.bits.source @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.size <= out_5[0].d.bits.size @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.param <= out_5[0].d.bits.param @[Xbar.scala 181:24]
    portsDIO_filtered[0].bits.opcode <= out_5[0].d.bits.opcode @[Xbar.scala 181:24]
    node _portsDIO_filtered_0_valid_T = or(requestDOI_0_0, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsDIO_filtered_0_valid_T_1 = and(out_5[0].d.valid, _portsDIO_filtered_0_valid_T) @[Xbar.scala 182:40]
    portsDIO_filtered[0].valid <= _portsDIO_filtered_0_valid_T_1 @[Xbar.scala 182:25]
    portsDIO_filtered[1].bits.corrupt <= out_5[0].d.bits.corrupt @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.data <= out_5[0].d.bits.data @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.denied <= out_5[0].d.bits.denied @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.sink <= out_5[0].d.bits.sink @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.source <= out_5[0].d.bits.source @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.size <= out_5[0].d.bits.size @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.param <= out_5[0].d.bits.param @[Xbar.scala 181:24]
    portsDIO_filtered[1].bits.opcode <= out_5[0].d.bits.opcode @[Xbar.scala 181:24]
    node _portsDIO_filtered_1_valid_T = or(requestDOI_0_1, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsDIO_filtered_1_valid_T_1 = and(out_5[0].d.valid, _portsDIO_filtered_1_valid_T) @[Xbar.scala 182:40]
    portsDIO_filtered[1].valid <= _portsDIO_filtered_1_valid_T_1 @[Xbar.scala 182:25]
    portsDIO_filtered[2].bits.corrupt <= out_5[0].d.bits.corrupt @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.data <= out_5[0].d.bits.data @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.denied <= out_5[0].d.bits.denied @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.sink <= out_5[0].d.bits.sink @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.source <= out_5[0].d.bits.source @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.size <= out_5[0].d.bits.size @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.param <= out_5[0].d.bits.param @[Xbar.scala 181:24]
    portsDIO_filtered[2].bits.opcode <= out_5[0].d.bits.opcode @[Xbar.scala 181:24]
    node _portsDIO_filtered_2_valid_T = or(requestDOI_0_2, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsDIO_filtered_2_valid_T_1 = and(out_5[0].d.valid, _portsDIO_filtered_2_valid_T) @[Xbar.scala 182:40]
    portsDIO_filtered[2].valid <= _portsDIO_filtered_2_valid_T_1 @[Xbar.scala 182:25]
    portsDIO_filtered[3].bits.corrupt <= out_5[0].d.bits.corrupt @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.data <= out_5[0].d.bits.data @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.denied <= out_5[0].d.bits.denied @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.sink <= out_5[0].d.bits.sink @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.source <= out_5[0].d.bits.source @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.size <= out_5[0].d.bits.size @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.param <= out_5[0].d.bits.param @[Xbar.scala 181:24]
    portsDIO_filtered[3].bits.opcode <= out_5[0].d.bits.opcode @[Xbar.scala 181:24]
    node _portsDIO_filtered_3_valid_T = or(requestDOI_0_3, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsDIO_filtered_3_valid_T_1 = and(out_5[0].d.valid, _portsDIO_filtered_3_valid_T) @[Xbar.scala 182:40]
    portsDIO_filtered[3].valid <= _portsDIO_filtered_3_valid_T_1 @[Xbar.scala 182:25]
    portsDIO_filtered[4].bits.corrupt <= out_5[0].d.bits.corrupt @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.data <= out_5[0].d.bits.data @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.denied <= out_5[0].d.bits.denied @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.sink <= out_5[0].d.bits.sink @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.source <= out_5[0].d.bits.source @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.size <= out_5[0].d.bits.size @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.param <= out_5[0].d.bits.param @[Xbar.scala 181:24]
    portsDIO_filtered[4].bits.opcode <= out_5[0].d.bits.opcode @[Xbar.scala 181:24]
    node _portsDIO_filtered_4_valid_T = or(requestDOI_0_4, UInt<1>("h0")) @[Xbar.scala 182:54]
    node _portsDIO_filtered_4_valid_T_1 = and(out_5[0].d.valid, _portsDIO_filtered_4_valid_T) @[Xbar.scala 182:40]
    portsDIO_filtered[4].valid <= _portsDIO_filtered_4_valid_T_1 @[Xbar.scala 182:25]
    node _portsDIO_out_0_d_ready_T = mux(requestDOI_0_0, portsDIO_filtered[0].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_1 = mux(requestDOI_0_1, portsDIO_filtered[1].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_2 = mux(requestDOI_0_2, portsDIO_filtered[2].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_3 = mux(requestDOI_0_3, portsDIO_filtered[3].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_4 = mux(requestDOI_0_4, portsDIO_filtered[4].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_5 = or(_portsDIO_out_0_d_ready_T, _portsDIO_out_0_d_ready_T_1) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_6 = or(_portsDIO_out_0_d_ready_T_5, _portsDIO_out_0_d_ready_T_2) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_7 = or(_portsDIO_out_0_d_ready_T_6, _portsDIO_out_0_d_ready_T_3) @[Mux.scala 27:73]
    node _portsDIO_out_0_d_ready_T_8 = or(_portsDIO_out_0_d_ready_T_7, _portsDIO_out_0_d_ready_T_4) @[Mux.scala 27:73]
    wire _portsDIO_out_0_d_ready_WIRE : UInt<1> @[Mux.scala 27:73]
    _portsDIO_out_0_d_ready_WIRE <= _portsDIO_out_0_d_ready_T_8 @[Mux.scala 27:73]
    out_5[0].d.ready <= _portsDIO_out_0_d_ready_WIRE @[Xbar.scala 184:17]
    wire portsEOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsEOI_filtered[0].bits <= in[0].e.bits @[Xbar.scala 181:24]
    node _portsEOI_filtered_0_valid_T = or(UInt<1>("h0"), UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsEOI_filtered_0_valid_T_1 = and(in[0].e.valid, _portsEOI_filtered_0_valid_T) @[Xbar.scala 182:40]
    portsEOI_filtered[0].valid <= _portsEOI_filtered_0_valid_T_1 @[Xbar.scala 182:25]
    in[0].e.ready <= portsEOI_filtered[0].ready @[Xbar.scala 184:17]
    wire portsEOI_filtered_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsEOI_filtered_1[0].bits <= in[1].e.bits @[Xbar.scala 181:24]
    node _portsEOI_filtered_0_valid_T_2 = or(UInt<1>("h0"), UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsEOI_filtered_0_valid_T_3 = and(in[1].e.valid, _portsEOI_filtered_0_valid_T_2) @[Xbar.scala 182:40]
    portsEOI_filtered_1[0].valid <= _portsEOI_filtered_0_valid_T_3 @[Xbar.scala 182:25]
    in[1].e.ready <= portsEOI_filtered_1[0].ready @[Xbar.scala 184:17]
    wire portsEOI_filtered_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsEOI_filtered_2[0].bits <= in[2].e.bits @[Xbar.scala 181:24]
    node _portsEOI_filtered_0_valid_T_4 = or(UInt<1>("h0"), UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsEOI_filtered_0_valid_T_5 = and(in[2].e.valid, _portsEOI_filtered_0_valid_T_4) @[Xbar.scala 182:40]
    portsEOI_filtered_2[0].valid <= _portsEOI_filtered_0_valid_T_5 @[Xbar.scala 182:25]
    in[2].e.ready <= portsEOI_filtered_2[0].ready @[Xbar.scala 184:17]
    wire portsEOI_filtered_3 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsEOI_filtered_3[0].bits <= in[3].e.bits @[Xbar.scala 181:24]
    node _portsEOI_filtered_0_valid_T_6 = or(UInt<1>("h0"), UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsEOI_filtered_0_valid_T_7 = and(in[3].e.valid, _portsEOI_filtered_0_valid_T_6) @[Xbar.scala 182:40]
    portsEOI_filtered_3[0].valid <= _portsEOI_filtered_0_valid_T_7 @[Xbar.scala 182:25]
    in[3].e.ready <= portsEOI_filtered_3[0].ready @[Xbar.scala 184:17]
    wire portsEOI_filtered_4 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}}[1] @[Xbar.scala 179:24]
    portsEOI_filtered_4[0].bits <= in[4].e.bits @[Xbar.scala 181:24]
    node _portsEOI_filtered_0_valid_T_8 = or(UInt<1>("h0"), UInt<1>("h1")) @[Xbar.scala 182:54]
    node _portsEOI_filtered_0_valid_T_9 = and(in[4].e.valid, _portsEOI_filtered_0_valid_T_8) @[Xbar.scala 182:40]
    portsEOI_filtered_4[0].valid <= _portsEOI_filtered_0_valid_T_9 @[Xbar.scala 182:25]
    in[4].e.ready <= portsEOI_filtered_4[0].ready @[Xbar.scala 184:17]
    reg beatsLeft : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Arbiter.scala 88:30]
    node idle = eq(beatsLeft, UInt<1>("h0")) @[Arbiter.scala 89:28]
    node latch = and(idle, out_5[0].a.ready) @[Arbiter.scala 90:24]
    node _validQuals_T = eq(portsAOI_filtered[0].lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_0 = and(portsAOI_filtered[0].earlyValid, _validQuals_T) @[ReadyValidCancel.scala 21:38]
    node _validQuals_T_1 = eq(portsAOI_filtered_1[0].lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_1 = and(portsAOI_filtered_1[0].earlyValid, _validQuals_T_1) @[ReadyValidCancel.scala 21:38]
    node _validQuals_T_2 = eq(portsAOI_filtered_2[0].lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_2 = and(portsAOI_filtered_2[0].earlyValid, _validQuals_T_2) @[ReadyValidCancel.scala 21:38]
    node _validQuals_T_3 = eq(portsAOI_filtered_3[0].lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_3 = and(portsAOI_filtered_3[0].earlyValid, _validQuals_T_3) @[ReadyValidCancel.scala 21:38]
    node _validQuals_T_4 = eq(portsAOI_filtered_4[0].lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_4 = and(portsAOI_filtered_4[0].earlyValid, _validQuals_T_4) @[ReadyValidCancel.scala 21:38]
    node readys_lo = cat(portsAOI_filtered_1[0].earlyValid, portsAOI_filtered[0].earlyValid) @[Cat.scala 33:92]
    node readys_hi_hi = cat(portsAOI_filtered_4[0].earlyValid, portsAOI_filtered_3[0].earlyValid) @[Cat.scala 33:92]
    node readys_hi = cat(readys_hi_hi, portsAOI_filtered_2[0].earlyValid) @[Cat.scala 33:92]
    node _readys_T = cat(readys_hi, readys_lo) @[Cat.scala 33:92]
    node readys_valid = bits(_readys_T, 4, 0) @[Arbiter.scala 22:23]
    node _readys_T_1 = eq(readys_valid, _readys_T) @[Arbiter.scala 23:19]
    node _readys_T_2 = asUInt(reset) @[Arbiter.scala 23:12]
    node _readys_T_3 = eq(_readys_T_2, UInt<1>("h0")) @[Arbiter.scala 23:12]
    when _readys_T_3 : @[Arbiter.scala 23:12]
      node _readys_T_4 = eq(_readys_T_1, UInt<1>("h0")) @[Arbiter.scala 23:12]
      when _readys_T_4 : @[Arbiter.scala 23:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:23 assert (valid === valids)\n") : readys_printf @[Arbiter.scala 23:12]
      assert(clock, _readys_T_1, UInt<1>("h1"), "") : readys_assert @[Arbiter.scala 23:12]
    reg readys_mask : UInt<5>, clock with :
      reset => (reset, UInt<5>("h1f")) @[Arbiter.scala 24:23]
    node _readys_filter_T = not(readys_mask) @[Arbiter.scala 25:30]
    node _readys_filter_T_1 = and(readys_valid, _readys_filter_T) @[Arbiter.scala 25:28]
    node readys_filter = cat(_readys_filter_T_1, readys_valid) @[Cat.scala 33:92]
    node _readys_unready_T = shr(readys_filter, 1) @[package.scala 254:48]
    node _readys_unready_T_1 = or(readys_filter, _readys_unready_T) @[package.scala 254:43]
    node _readys_unready_T_2 = shr(_readys_unready_T_1, 2) @[package.scala 254:48]
    node _readys_unready_T_3 = or(_readys_unready_T_1, _readys_unready_T_2) @[package.scala 254:43]
    node _readys_unready_T_4 = shr(_readys_unready_T_3, 4) @[package.scala 254:48]
    node _readys_unready_T_5 = or(_readys_unready_T_3, _readys_unready_T_4) @[package.scala 254:43]
    node _readys_unready_T_6 = bits(_readys_unready_T_5, 9, 0) @[package.scala 255:17]
    node _readys_unready_T_7 = shr(_readys_unready_T_6, 1) @[Arbiter.scala 26:52]
    node _readys_unready_T_8 = shl(readys_mask, 5) @[Arbiter.scala 26:66]
    node readys_unready = or(_readys_unready_T_7, _readys_unready_T_8) @[Arbiter.scala 26:58]
    node _readys_readys_T = shr(readys_unready, 5) @[Arbiter.scala 27:29]
    node _readys_readys_T_1 = bits(readys_unready, 4, 0) @[Arbiter.scala 27:48]
    node _readys_readys_T_2 = and(_readys_readys_T, _readys_readys_T_1) @[Arbiter.scala 27:39]
    node readys_readys = not(_readys_readys_T_2) @[Arbiter.scala 27:18]
    node _readys_T_5 = orr(readys_valid) @[Arbiter.scala 28:27]
    node _readys_T_6 = and(latch, _readys_T_5) @[Arbiter.scala 28:18]
    when _readys_T_6 : @[Arbiter.scala 28:32]
      node _readys_mask_T = and(readys_readys, readys_valid) @[Arbiter.scala 29:29]
      node _readys_mask_T_1 = shl(_readys_mask_T, 1) @[package.scala 245:48]
      node _readys_mask_T_2 = bits(_readys_mask_T_1, 4, 0) @[package.scala 245:53]
      node _readys_mask_T_3 = or(_readys_mask_T, _readys_mask_T_2) @[package.scala 245:43]
      node _readys_mask_T_4 = shl(_readys_mask_T_3, 2) @[package.scala 245:48]
      node _readys_mask_T_5 = bits(_readys_mask_T_4, 4, 0) @[package.scala 245:53]
      node _readys_mask_T_6 = or(_readys_mask_T_3, _readys_mask_T_5) @[package.scala 245:43]
      node _readys_mask_T_7 = shl(_readys_mask_T_6, 4) @[package.scala 245:48]
      node _readys_mask_T_8 = bits(_readys_mask_T_7, 4, 0) @[package.scala 245:53]
      node _readys_mask_T_9 = or(_readys_mask_T_6, _readys_mask_T_8) @[package.scala 245:43]
      node _readys_mask_T_10 = bits(_readys_mask_T_9, 4, 0) @[package.scala 246:17]
      readys_mask <= _readys_mask_T_10 @[Arbiter.scala 29:12]
    node _readys_T_7 = bits(readys_readys, 4, 0) @[Arbiter.scala 31:11]
    node _readys_T_8 = bits(_readys_T_7, 0, 0) @[Arbiter.scala 96:86]
    node _readys_T_9 = bits(_readys_T_7, 1, 1) @[Arbiter.scala 96:86]
    node _readys_T_10 = bits(_readys_T_7, 2, 2) @[Arbiter.scala 96:86]
    node _readys_T_11 = bits(_readys_T_7, 3, 3) @[Arbiter.scala 96:86]
    node _readys_T_12 = bits(_readys_T_7, 4, 4) @[Arbiter.scala 96:86]
    wire readys : UInt<1>[5] @[Arbiter.scala 96:27]
    readys[0] <= _readys_T_8 @[Arbiter.scala 96:27]
    readys[1] <= _readys_T_9 @[Arbiter.scala 96:27]
    readys[2] <= _readys_T_10 @[Arbiter.scala 96:27]
    readys[3] <= _readys_T_11 @[Arbiter.scala 96:27]
    readys[4] <= _readys_T_12 @[Arbiter.scala 96:27]
    node _earlyWinner_T = and(readys[0], portsAOI_filtered[0].earlyValid) @[Arbiter.scala 98:79]
    node _earlyWinner_T_1 = and(readys[1], portsAOI_filtered_1[0].earlyValid) @[Arbiter.scala 98:79]
    node _earlyWinner_T_2 = and(readys[2], portsAOI_filtered_2[0].earlyValid) @[Arbiter.scala 98:79]
    node _earlyWinner_T_3 = and(readys[3], portsAOI_filtered_3[0].earlyValid) @[Arbiter.scala 98:79]
    node _earlyWinner_T_4 = and(readys[4], portsAOI_filtered_4[0].earlyValid) @[Arbiter.scala 98:79]
    wire earlyWinner : UInt<1>[5] @[Arbiter.scala 98:32]
    earlyWinner[0] <= _earlyWinner_T @[Arbiter.scala 98:32]
    earlyWinner[1] <= _earlyWinner_T_1 @[Arbiter.scala 98:32]
    earlyWinner[2] <= _earlyWinner_T_2 @[Arbiter.scala 98:32]
    earlyWinner[3] <= _earlyWinner_T_3 @[Arbiter.scala 98:32]
    earlyWinner[4] <= _earlyWinner_T_4 @[Arbiter.scala 98:32]
    node _winnerQual_T = and(readys[0], validQuals_0) @[Arbiter.scala 99:79]
    node _winnerQual_T_1 = and(readys[1], validQuals_1) @[Arbiter.scala 99:79]
    node _winnerQual_T_2 = and(readys[2], validQuals_2) @[Arbiter.scala 99:79]
    node _winnerQual_T_3 = and(readys[3], validQuals_3) @[Arbiter.scala 99:79]
    node _winnerQual_T_4 = and(readys[4], validQuals_4) @[Arbiter.scala 99:79]
    wire winnerQual : UInt<1>[5] @[Arbiter.scala 99:32]
    winnerQual[0] <= _winnerQual_T @[Arbiter.scala 99:32]
    winnerQual[1] <= _winnerQual_T_1 @[Arbiter.scala 99:32]
    winnerQual[2] <= _winnerQual_T_2 @[Arbiter.scala 99:32]
    winnerQual[3] <= _winnerQual_T_3 @[Arbiter.scala 99:32]
    winnerQual[4] <= _winnerQual_T_4 @[Arbiter.scala 99:32]
    node prefixOR_1 = or(UInt<1>("h0"), earlyWinner[0]) @[Arbiter.scala 105:53]
    node prefixOR_2 = or(prefixOR_1, earlyWinner[1]) @[Arbiter.scala 105:53]
    node prefixOR_3 = or(prefixOR_2, earlyWinner[2]) @[Arbiter.scala 105:53]
    node prefixOR_4 = or(prefixOR_3, earlyWinner[3]) @[Arbiter.scala 105:53]
    node _prefixOR_T = or(prefixOR_4, earlyWinner[4]) @[Arbiter.scala 105:53]
    node _T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_1 = eq(earlyWinner[0], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_2 = or(_T, _T_1) @[Arbiter.scala 106:64]
    node _T_3 = eq(prefixOR_1, UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_4 = eq(earlyWinner[1], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_5 = or(_T_3, _T_4) @[Arbiter.scala 106:64]
    node _T_6 = eq(prefixOR_2, UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_7 = eq(earlyWinner[2], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_8 = or(_T_6, _T_7) @[Arbiter.scala 106:64]
    node _T_9 = eq(prefixOR_3, UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_10 = eq(earlyWinner[3], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_11 = or(_T_9, _T_10) @[Arbiter.scala 106:64]
    node _T_12 = eq(prefixOR_4, UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_13 = eq(earlyWinner[4], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_14 = or(_T_12, _T_13) @[Arbiter.scala 106:64]
    node _T_15 = and(_T_2, _T_5) @[Arbiter.scala 106:82]
    node _T_16 = and(_T_15, _T_8) @[Arbiter.scala 106:82]
    node _T_17 = and(_T_16, _T_11) @[Arbiter.scala 106:82]
    node _T_18 = and(_T_17, _T_14) @[Arbiter.scala 106:82]
    node _T_19 = asUInt(reset) @[Arbiter.scala 106:13]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[Arbiter.scala 106:13]
    when _T_20 : @[Arbiter.scala 106:13]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[Arbiter.scala 106:13]
      when _T_21 : @[Arbiter.scala 106:13]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:106 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf @[Arbiter.scala 106:13]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert @[Arbiter.scala 106:13]
    node _T_22 = or(portsAOI_filtered[0].earlyValid, portsAOI_filtered_1[0].earlyValid) @[Arbiter.scala 108:36]
    node _T_23 = or(_T_22, portsAOI_filtered_2[0].earlyValid) @[Arbiter.scala 108:36]
    node _T_24 = or(_T_23, portsAOI_filtered_3[0].earlyValid) @[Arbiter.scala 108:36]
    node _T_25 = or(_T_24, portsAOI_filtered_4[0].earlyValid) @[Arbiter.scala 108:36]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[Arbiter.scala 108:15]
    node _T_27 = or(earlyWinner[0], earlyWinner[1]) @[Arbiter.scala 108:64]
    node _T_28 = or(_T_27, earlyWinner[2]) @[Arbiter.scala 108:64]
    node _T_29 = or(_T_28, earlyWinner[3]) @[Arbiter.scala 108:64]
    node _T_30 = or(_T_29, earlyWinner[4]) @[Arbiter.scala 108:64]
    node _T_31 = or(_T_26, _T_30) @[Arbiter.scala 108:41]
    node _T_32 = asUInt(reset) @[Arbiter.scala 108:14]
    node _T_33 = eq(_T_32, UInt<1>("h0")) @[Arbiter.scala 108:14]
    when _T_33 : @[Arbiter.scala 108:14]
      node _T_34 = eq(_T_31, UInt<1>("h0")) @[Arbiter.scala 108:14]
      when _T_34 : @[Arbiter.scala 108:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:108 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n") : printf_1 @[Arbiter.scala 108:14]
      assert(clock, _T_31, UInt<1>("h1"), "") : assert_1 @[Arbiter.scala 108:14]
    node _T_35 = or(validQuals_0, validQuals_1) @[Arbiter.scala 109:36]
    node _T_36 = or(_T_35, validQuals_2) @[Arbiter.scala 109:36]
    node _T_37 = or(_T_36, validQuals_3) @[Arbiter.scala 109:36]
    node _T_38 = or(_T_37, validQuals_4) @[Arbiter.scala 109:36]
    node _T_39 = eq(_T_38, UInt<1>("h0")) @[Arbiter.scala 109:15]
    node _T_40 = or(validQuals_0, validQuals_1) @[Arbiter.scala 109:64]
    node _T_41 = or(_T_40, validQuals_2) @[Arbiter.scala 109:64]
    node _T_42 = or(_T_41, validQuals_3) @[Arbiter.scala 109:64]
    node _T_43 = or(_T_42, validQuals_4) @[Arbiter.scala 109:64]
    node _T_44 = or(_T_39, _T_43) @[Arbiter.scala 109:41]
    node _T_45 = asUInt(reset) @[Arbiter.scala 109:14]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[Arbiter.scala 109:14]
    when _T_46 : @[Arbiter.scala 109:14]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[Arbiter.scala 109:14]
      when _T_47 : @[Arbiter.scala 109:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:109 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n") : printf_2 @[Arbiter.scala 109:14]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_2 @[Arbiter.scala 109:14]
    node maskedBeats_0 = mux(winnerQual[0], beatsAI_0, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node maskedBeats_1 = mux(winnerQual[1], beatsAI_1, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node maskedBeats_2 = mux(winnerQual[2], beatsAI_2, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node maskedBeats_3 = mux(winnerQual[3], beatsAI_3, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node maskedBeats_4 = mux(winnerQual[4], beatsAI_4, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node _initBeats_T = or(maskedBeats_0, maskedBeats_1) @[Arbiter.scala 113:44]
    node _initBeats_T_1 = or(_initBeats_T, maskedBeats_2) @[Arbiter.scala 113:44]
    node _initBeats_T_2 = or(_initBeats_T_1, maskedBeats_3) @[Arbiter.scala 113:44]
    node initBeats = or(_initBeats_T_2, maskedBeats_4) @[Arbiter.scala 113:44]
    node _beatsLeft_T = eq(out_5[0].a.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _beatsLeft_T_1 = and(out_5[0].a.earlyValid, _beatsLeft_T) @[ReadyValidCancel.scala 21:38]
    node _beatsLeft_T_2 = and(out_5[0].a.ready, _beatsLeft_T_1) @[ReadyValidCancel.scala 49:33]
    node _beatsLeft_T_3 = sub(beatsLeft, _beatsLeft_T_2) @[Arbiter.scala 114:52]
    node _beatsLeft_T_4 = tail(_beatsLeft_T_3, 1) @[Arbiter.scala 114:52]
    node _beatsLeft_T_5 = mux(latch, initBeats, _beatsLeft_T_4) @[Arbiter.scala 114:23]
    beatsLeft <= _beatsLeft_T_5 @[Arbiter.scala 114:17]
    wire _state_WIRE : UInt<1>[5] @[Arbiter.scala 117:34]
    _state_WIRE[0] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    _state_WIRE[1] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    _state_WIRE[2] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    _state_WIRE[3] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    _state_WIRE[4] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    reg state : UInt<1>[5], clock with :
      reset => (reset, _state_WIRE) @[Arbiter.scala 117:26]
    node muxStateEarly = mux(idle, earlyWinner, state) @[Arbiter.scala 118:30]
    node muxStateQual = mux(idle, winnerQual, state) @[Arbiter.scala 119:30]
    state <= muxStateQual @[Arbiter.scala 120:13]
    node allowed = mux(idle, readys, state) @[Arbiter.scala 122:24]
    node _filtered_0_ready_T = and(out_5[0].a.ready, allowed[0]) @[Arbiter.scala 124:31]
    portsAOI_filtered[0].ready <= _filtered_0_ready_T @[Arbiter.scala 124:17]
    node _filtered_0_ready_T_1 = and(out_5[0].a.ready, allowed[1]) @[Arbiter.scala 124:31]
    portsAOI_filtered_1[0].ready <= _filtered_0_ready_T_1 @[Arbiter.scala 124:17]
    node _filtered_0_ready_T_2 = and(out_5[0].a.ready, allowed[2]) @[Arbiter.scala 124:31]
    portsAOI_filtered_2[0].ready <= _filtered_0_ready_T_2 @[Arbiter.scala 124:17]
    node _filtered_0_ready_T_3 = and(out_5[0].a.ready, allowed[3]) @[Arbiter.scala 124:31]
    portsAOI_filtered_3[0].ready <= _filtered_0_ready_T_3 @[Arbiter.scala 124:17]
    node _filtered_0_ready_T_4 = and(out_5[0].a.ready, allowed[4]) @[Arbiter.scala 124:31]
    portsAOI_filtered_4[0].ready <= _filtered_0_ready_T_4 @[Arbiter.scala 124:17]
    node _out_0_a_earlyValid_T = or(portsAOI_filtered[0].earlyValid, portsAOI_filtered_1[0].earlyValid) @[Arbiter.scala 126:56]
    node _out_0_a_earlyValid_T_1 = or(_out_0_a_earlyValid_T, portsAOI_filtered_2[0].earlyValid) @[Arbiter.scala 126:56]
    node _out_0_a_earlyValid_T_2 = or(_out_0_a_earlyValid_T_1, portsAOI_filtered_3[0].earlyValid) @[Arbiter.scala 126:56]
    node _out_0_a_earlyValid_T_3 = or(_out_0_a_earlyValid_T_2, portsAOI_filtered_4[0].earlyValid) @[Arbiter.scala 126:56]
    node _out_0_a_earlyValid_T_4 = mux(state[0], portsAOI_filtered[0].earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_5 = mux(state[1], portsAOI_filtered_1[0].earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_6 = mux(state[2], portsAOI_filtered_2[0].earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_7 = mux(state[3], portsAOI_filtered_3[0].earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_8 = mux(state[4], portsAOI_filtered_4[0].earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_9 = or(_out_0_a_earlyValid_T_4, _out_0_a_earlyValid_T_5) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_10 = or(_out_0_a_earlyValid_T_9, _out_0_a_earlyValid_T_6) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_11 = or(_out_0_a_earlyValid_T_10, _out_0_a_earlyValid_T_7) @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_12 = or(_out_0_a_earlyValid_T_11, _out_0_a_earlyValid_T_8) @[Mux.scala 27:73]
    wire _out_0_a_earlyValid_WIRE : UInt<1> @[Mux.scala 27:73]
    _out_0_a_earlyValid_WIRE <= _out_0_a_earlyValid_T_12 @[Mux.scala 27:73]
    node _out_0_a_earlyValid_T_13 = mux(idle, _out_0_a_earlyValid_T_3, _out_0_a_earlyValid_WIRE) @[Arbiter.scala 126:29]
    out_5[0].a.earlyValid <= _out_0_a_earlyValid_T_13 @[Arbiter.scala 126:23]
    node _out_0_a_lateCancel_T = mux(muxStateEarly[0], portsAOI_filtered[0].lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_1 = mux(muxStateEarly[1], portsAOI_filtered_1[0].lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_2 = mux(muxStateEarly[2], portsAOI_filtered_2[0].lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_3 = mux(muxStateEarly[3], portsAOI_filtered_3[0].lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_4 = mux(muxStateEarly[4], portsAOI_filtered_4[0].lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_5 = or(_out_0_a_lateCancel_T, _out_0_a_lateCancel_T_1) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_6 = or(_out_0_a_lateCancel_T_5, _out_0_a_lateCancel_T_2) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_7 = or(_out_0_a_lateCancel_T_6, _out_0_a_lateCancel_T_3) @[Mux.scala 27:73]
    node _out_0_a_lateCancel_T_8 = or(_out_0_a_lateCancel_T_7, _out_0_a_lateCancel_T_4) @[Mux.scala 27:73]
    wire _out_0_a_lateCancel_WIRE : UInt<1> @[Mux.scala 27:73]
    _out_0_a_lateCancel_WIRE <= _out_0_a_lateCancel_T_8 @[Mux.scala 27:73]
    out_5[0].a.lateCancel <= _out_0_a_lateCancel_WIRE @[Arbiter.scala 127:23]
    wire _WIRE_31 : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>} @[Mux.scala 27:73]
    node _T_48 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_49 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_50 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_51 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_52 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_53 = or(_T_48, _T_49) @[Mux.scala 27:73]
    node _T_54 = or(_T_53, _T_50) @[Mux.scala 27:73]
    node _T_55 = or(_T_54, _T_51) @[Mux.scala 27:73]
    node _T_56 = or(_T_55, _T_52) @[Mux.scala 27:73]
    wire _WIRE_32 : UInt<1> @[Mux.scala 27:73]
    _WIRE_32 <= _T_56 @[Mux.scala 27:73]
    _WIRE_31.corrupt <= _WIRE_32 @[Mux.scala 27:73]
    node _T_57 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_58 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_59 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_60 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_61 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_62 = or(_T_57, _T_58) @[Mux.scala 27:73]
    node _T_63 = or(_T_62, _T_59) @[Mux.scala 27:73]
    node _T_64 = or(_T_63, _T_60) @[Mux.scala 27:73]
    node _T_65 = or(_T_64, _T_61) @[Mux.scala 27:73]
    wire _WIRE_33 : UInt<512> @[Mux.scala 27:73]
    _WIRE_33 <= _T_65 @[Mux.scala 27:73]
    _WIRE_31.data <= _WIRE_33 @[Mux.scala 27:73]
    node _T_66 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_67 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_68 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_69 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_70 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_71 = or(_T_66, _T_67) @[Mux.scala 27:73]
    node _T_72 = or(_T_71, _T_68) @[Mux.scala 27:73]
    node _T_73 = or(_T_72, _T_69) @[Mux.scala 27:73]
    node _T_74 = or(_T_73, _T_70) @[Mux.scala 27:73]
    wire _WIRE_34 : UInt<64> @[Mux.scala 27:73]
    _WIRE_34 <= _T_74 @[Mux.scala 27:73]
    _WIRE_31.mask <= _WIRE_34 @[Mux.scala 27:73]
    wire _WIRE_35 : { } @[Mux.scala 27:73]
    _WIRE_31.echo <= _WIRE_35 @[Mux.scala 27:73]
    wire _WIRE_36 : { } @[Mux.scala 27:73]
    _WIRE_31.user <= _WIRE_36 @[Mux.scala 27:73]
    node _T_75 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_76 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_77 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_78 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_79 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_80 = or(_T_75, _T_76) @[Mux.scala 27:73]
    node _T_81 = or(_T_80, _T_77) @[Mux.scala 27:73]
    node _T_82 = or(_T_81, _T_78) @[Mux.scala 27:73]
    node _T_83 = or(_T_82, _T_79) @[Mux.scala 27:73]
    wire _WIRE_37 : UInt<34> @[Mux.scala 27:73]
    _WIRE_37 <= _T_83 @[Mux.scala 27:73]
    _WIRE_31.address <= _WIRE_37 @[Mux.scala 27:73]
    node _T_84 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_85 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_86 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_87 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_88 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_89 = or(_T_84, _T_85) @[Mux.scala 27:73]
    node _T_90 = or(_T_89, _T_86) @[Mux.scala 27:73]
    node _T_91 = or(_T_90, _T_87) @[Mux.scala 27:73]
    node _T_92 = or(_T_91, _T_88) @[Mux.scala 27:73]
    wire _WIRE_38 : UInt<7> @[Mux.scala 27:73]
    _WIRE_38 <= _T_92 @[Mux.scala 27:73]
    _WIRE_31.source <= _WIRE_38 @[Mux.scala 27:73]
    node _T_93 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_94 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_95 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_96 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_97 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_98 = or(_T_93, _T_94) @[Mux.scala 27:73]
    node _T_99 = or(_T_98, _T_95) @[Mux.scala 27:73]
    node _T_100 = or(_T_99, _T_96) @[Mux.scala 27:73]
    node _T_101 = or(_T_100, _T_97) @[Mux.scala 27:73]
    wire _WIRE_39 : UInt<3> @[Mux.scala 27:73]
    _WIRE_39 <= _T_101 @[Mux.scala 27:73]
    _WIRE_31.size <= _WIRE_39 @[Mux.scala 27:73]
    node _T_102 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_103 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_104 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_105 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_106 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_107 = or(_T_102, _T_103) @[Mux.scala 27:73]
    node _T_108 = or(_T_107, _T_104) @[Mux.scala 27:73]
    node _T_109 = or(_T_108, _T_105) @[Mux.scala 27:73]
    node _T_110 = or(_T_109, _T_106) @[Mux.scala 27:73]
    wire _WIRE_40 : UInt<3> @[Mux.scala 27:73]
    _WIRE_40 <= _T_110 @[Mux.scala 27:73]
    _WIRE_31.param <= _WIRE_40 @[Mux.scala 27:73]
    node _T_111 = mux(muxStateEarly[0], portsAOI_filtered[0].bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_112 = mux(muxStateEarly[1], portsAOI_filtered_1[0].bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_113 = mux(muxStateEarly[2], portsAOI_filtered_2[0].bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_114 = mux(muxStateEarly[3], portsAOI_filtered_3[0].bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_115 = mux(muxStateEarly[4], portsAOI_filtered_4[0].bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_116 = or(_T_111, _T_112) @[Mux.scala 27:73]
    node _T_117 = or(_T_116, _T_113) @[Mux.scala 27:73]
    node _T_118 = or(_T_117, _T_114) @[Mux.scala 27:73]
    node _T_119 = or(_T_118, _T_115) @[Mux.scala 27:73]
    wire _WIRE_41 : UInt<3> @[Mux.scala 27:73]
    _WIRE_41 <= _T_119 @[Mux.scala 27:73]
    _WIRE_31.opcode <= _WIRE_41 @[Mux.scala 27:73]
    out_5[0].a.bits.corrupt <= _WIRE_31.corrupt @[BundleMap.scala 247:19]
    out_5[0].a.bits.data <= _WIRE_31.data @[BundleMap.scala 247:19]
    out_5[0].a.bits.mask <= _WIRE_31.mask @[BundleMap.scala 247:19]
    out_5[0].a.bits.address <= _WIRE_31.address @[BundleMap.scala 247:19]
    out_5[0].a.bits.source <= _WIRE_31.source @[BundleMap.scala 247:19]
    out_5[0].a.bits.size <= _WIRE_31.size @[BundleMap.scala 247:19]
    out_5[0].a.bits.param <= _WIRE_31.param @[BundleMap.scala 247:19]
    out_5[0].a.bits.opcode <= _WIRE_31.opcode @[BundleMap.scala 247:19]
    wire sink_ACancel : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_6 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T = eq(sink_ACancel.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_1 = and(sink_ACancel.earlyValid, _out_valid_T) @[ReadyValidCancel.scala 21:38]
    out_6.valid <= _out_valid_T_1 @[ReadyValidCancel.scala 54:15]
    out_6.bits <= sink_ACancel.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel.ready <= out_6.ready @[ReadyValidCancel.scala 56:11]
    out_5[0].c.bits.corrupt <= out_6.bits.corrupt @[BundleMap.scala 247:19]
    out_5[0].c.bits.data <= out_6.bits.data @[BundleMap.scala 247:19]
    out_5[0].c.bits.address <= out_6.bits.address @[BundleMap.scala 247:19]
    out_5[0].c.bits.source <= out_6.bits.source @[BundleMap.scala 247:19]
    out_5[0].c.bits.size <= out_6.bits.size @[BundleMap.scala 247:19]
    out_5[0].c.bits.param <= out_6.bits.param @[BundleMap.scala 247:19]
    out_5[0].c.bits.opcode <= out_6.bits.opcode @[BundleMap.scala 247:19]
    out_5[0].c.valid <= out_6.valid @[BundleMap.scala 247:19]
    out_6.ready <= out_5[0].c.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_1 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { sink : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_1.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_1.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_1.bits.sink is invalid @[Arbiter.scala 79:23]
    wire out_7 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_2 = eq(sink_ACancel_1.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_3 = and(sink_ACancel_1.earlyValid, _out_valid_T_2) @[ReadyValidCancel.scala 21:38]
    out_7.valid <= _out_valid_T_3 @[ReadyValidCancel.scala 54:15]
    out_7.bits <= sink_ACancel_1.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_1.ready <= out_7.ready @[ReadyValidCancel.scala 56:11]
    out_5[0].e.bits.sink <= out_7.bits.sink @[BundleMap.scala 247:19]
    out_5[0].e.valid <= out_7.valid @[BundleMap.scala 247:19]
    out_7.ready <= out_5[0].e.ready @[BundleMap.scala 247:19]
    portsCOI_filtered[0].ready <= UInt<1>("h0") @[Xbar.scala 407:73]
    portsCOI_filtered_1[0].ready <= UInt<1>("h0") @[Xbar.scala 407:73]
    portsCOI_filtered_2[0].ready <= UInt<1>("h0") @[Xbar.scala 407:73]
    portsCOI_filtered_3[0].ready <= UInt<1>("h0") @[Xbar.scala 407:73]
    portsCOI_filtered_4[0].ready <= UInt<1>("h0") @[Xbar.scala 407:73]
    portsEOI_filtered[0].ready <= UInt<1>("h0") @[Xbar.scala 408:73]
    portsEOI_filtered_1[0].ready <= UInt<1>("h0") @[Xbar.scala 408:73]
    portsEOI_filtered_2[0].ready <= UInt<1>("h0") @[Xbar.scala 408:73]
    portsEOI_filtered_3[0].ready <= UInt<1>("h0") @[Xbar.scala 408:73]
    portsEOI_filtered_4[0].ready <= UInt<1>("h0") @[Xbar.scala 408:73]
    wire sink_ACancel_2 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_2.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_2.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_2.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.mask is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel_2.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_8 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_4 = eq(sink_ACancel_2.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_5 = and(sink_ACancel_2.earlyValid, _out_valid_T_4) @[ReadyValidCancel.scala 21:38]
    out_8.valid <= _out_valid_T_5 @[ReadyValidCancel.scala 54:15]
    out_8.bits <= sink_ACancel_2.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_2.ready <= out_8.ready @[ReadyValidCancel.scala 56:11]
    in[0].b.bits.corrupt <= out_8.bits.corrupt @[BundleMap.scala 247:19]
    in[0].b.bits.data <= out_8.bits.data @[BundleMap.scala 247:19]
    in[0].b.bits.mask <= out_8.bits.mask @[BundleMap.scala 247:19]
    in[0].b.bits.address <= out_8.bits.address @[BundleMap.scala 247:19]
    in[0].b.bits.source <= out_8.bits.source @[BundleMap.scala 247:19]
    in[0].b.bits.size <= out_8.bits.size @[BundleMap.scala 247:19]
    in[0].b.bits.param <= out_8.bits.param @[BundleMap.scala 247:19]
    in[0].b.bits.opcode <= out_8.bits.opcode @[BundleMap.scala 247:19]
    in[0].b.valid <= out_8.valid @[BundleMap.scala 247:19]
    out_8.ready <= in[0].b.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_3 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out_9 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_9.earlyValid <= portsDIO_filtered[0].valid @[ReadyValidCancel.scala 69:20]
    out_9.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_9.bits <= portsDIO_filtered[0].bits @[ReadyValidCancel.scala 71:14]
    portsDIO_filtered[0].ready <= out_9.ready @[ReadyValidCancel.scala 72:14]
    sink_ACancel_3.bits.corrupt <= out_9.bits.corrupt @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.data <= out_9.bits.data @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.denied <= out_9.bits.denied @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.sink <= out_9.bits.sink @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.source <= out_9.bits.source @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.size <= out_9.bits.size @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.param <= out_9.bits.param @[BundleMap.scala 247:19]
    sink_ACancel_3.bits.opcode <= out_9.bits.opcode @[BundleMap.scala 247:19]
    sink_ACancel_3.lateCancel <= out_9.lateCancel @[BundleMap.scala 247:19]
    sink_ACancel_3.earlyValid <= out_9.earlyValid @[BundleMap.scala 247:19]
    out_9.ready <= sink_ACancel_3.ready @[BundleMap.scala 247:19]
    wire out_10 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_6 = eq(sink_ACancel_3.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_7 = and(sink_ACancel_3.earlyValid, _out_valid_T_6) @[ReadyValidCancel.scala 21:38]
    out_10.valid <= _out_valid_T_7 @[ReadyValidCancel.scala 54:15]
    out_10.bits <= sink_ACancel_3.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_3.ready <= out_10.ready @[ReadyValidCancel.scala 56:11]
    in[0].d.bits.corrupt <= out_10.bits.corrupt @[BundleMap.scala 247:19]
    in[0].d.bits.data <= out_10.bits.data @[BundleMap.scala 247:19]
    in[0].d.bits.denied <= out_10.bits.denied @[BundleMap.scala 247:19]
    in[0].d.bits.sink <= out_10.bits.sink @[BundleMap.scala 247:19]
    in[0].d.bits.source <= out_10.bits.source @[BundleMap.scala 247:19]
    in[0].d.bits.size <= out_10.bits.size @[BundleMap.scala 247:19]
    in[0].d.bits.param <= out_10.bits.param @[BundleMap.scala 247:19]
    in[0].d.bits.opcode <= out_10.bits.opcode @[BundleMap.scala 247:19]
    in[0].d.valid <= out_10.valid @[BundleMap.scala 247:19]
    out_10.ready <= in[0].d.ready @[BundleMap.scala 247:19]
    portsBIO_filtered[0].ready <= UInt<1>("h0") @[Xbar.scala 414:73]
    wire sink_ACancel_4 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_4.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_4.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_4.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.mask is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel_4.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_11 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_8 = eq(sink_ACancel_4.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_9 = and(sink_ACancel_4.earlyValid, _out_valid_T_8) @[ReadyValidCancel.scala 21:38]
    out_11.valid <= _out_valid_T_9 @[ReadyValidCancel.scala 54:15]
    out_11.bits <= sink_ACancel_4.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_4.ready <= out_11.ready @[ReadyValidCancel.scala 56:11]
    in[1].b.bits.corrupt <= out_11.bits.corrupt @[BundleMap.scala 247:19]
    in[1].b.bits.data <= out_11.bits.data @[BundleMap.scala 247:19]
    in[1].b.bits.mask <= out_11.bits.mask @[BundleMap.scala 247:19]
    in[1].b.bits.address <= out_11.bits.address @[BundleMap.scala 247:19]
    in[1].b.bits.source <= out_11.bits.source @[BundleMap.scala 247:19]
    in[1].b.bits.size <= out_11.bits.size @[BundleMap.scala 247:19]
    in[1].b.bits.param <= out_11.bits.param @[BundleMap.scala 247:19]
    in[1].b.bits.opcode <= out_11.bits.opcode @[BundleMap.scala 247:19]
    in[1].b.valid <= out_11.valid @[BundleMap.scala 247:19]
    out_11.ready <= in[1].b.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_5 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out_12 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_12.earlyValid <= portsDIO_filtered[1].valid @[ReadyValidCancel.scala 69:20]
    out_12.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_12.bits <= portsDIO_filtered[1].bits @[ReadyValidCancel.scala 71:14]
    portsDIO_filtered[1].ready <= out_12.ready @[ReadyValidCancel.scala 72:14]
    sink_ACancel_5.bits.corrupt <= out_12.bits.corrupt @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.data <= out_12.bits.data @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.denied <= out_12.bits.denied @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.sink <= out_12.bits.sink @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.source <= out_12.bits.source @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.size <= out_12.bits.size @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.param <= out_12.bits.param @[BundleMap.scala 247:19]
    sink_ACancel_5.bits.opcode <= out_12.bits.opcode @[BundleMap.scala 247:19]
    sink_ACancel_5.lateCancel <= out_12.lateCancel @[BundleMap.scala 247:19]
    sink_ACancel_5.earlyValid <= out_12.earlyValid @[BundleMap.scala 247:19]
    out_12.ready <= sink_ACancel_5.ready @[BundleMap.scala 247:19]
    wire out_13 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_10 = eq(sink_ACancel_5.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_11 = and(sink_ACancel_5.earlyValid, _out_valid_T_10) @[ReadyValidCancel.scala 21:38]
    out_13.valid <= _out_valid_T_11 @[ReadyValidCancel.scala 54:15]
    out_13.bits <= sink_ACancel_5.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_5.ready <= out_13.ready @[ReadyValidCancel.scala 56:11]
    in[1].d.bits.corrupt <= out_13.bits.corrupt @[BundleMap.scala 247:19]
    in[1].d.bits.data <= out_13.bits.data @[BundleMap.scala 247:19]
    in[1].d.bits.denied <= out_13.bits.denied @[BundleMap.scala 247:19]
    in[1].d.bits.sink <= out_13.bits.sink @[BundleMap.scala 247:19]
    in[1].d.bits.source <= out_13.bits.source @[BundleMap.scala 247:19]
    in[1].d.bits.size <= out_13.bits.size @[BundleMap.scala 247:19]
    in[1].d.bits.param <= out_13.bits.param @[BundleMap.scala 247:19]
    in[1].d.bits.opcode <= out_13.bits.opcode @[BundleMap.scala 247:19]
    in[1].d.valid <= out_13.valid @[BundleMap.scala 247:19]
    out_13.ready <= in[1].d.ready @[BundleMap.scala 247:19]
    portsBIO_filtered[1].ready <= UInt<1>("h0") @[Xbar.scala 414:73]
    wire sink_ACancel_6 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_6.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_6.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_6.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.mask is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel_6.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_14 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_12 = eq(sink_ACancel_6.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_13 = and(sink_ACancel_6.earlyValid, _out_valid_T_12) @[ReadyValidCancel.scala 21:38]
    out_14.valid <= _out_valid_T_13 @[ReadyValidCancel.scala 54:15]
    out_14.bits <= sink_ACancel_6.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_6.ready <= out_14.ready @[ReadyValidCancel.scala 56:11]
    in[2].b.bits.corrupt <= out_14.bits.corrupt @[BundleMap.scala 247:19]
    in[2].b.bits.data <= out_14.bits.data @[BundleMap.scala 247:19]
    in[2].b.bits.mask <= out_14.bits.mask @[BundleMap.scala 247:19]
    in[2].b.bits.address <= out_14.bits.address @[BundleMap.scala 247:19]
    in[2].b.bits.source <= out_14.bits.source @[BundleMap.scala 247:19]
    in[2].b.bits.size <= out_14.bits.size @[BundleMap.scala 247:19]
    in[2].b.bits.param <= out_14.bits.param @[BundleMap.scala 247:19]
    in[2].b.bits.opcode <= out_14.bits.opcode @[BundleMap.scala 247:19]
    in[2].b.valid <= out_14.valid @[BundleMap.scala 247:19]
    out_14.ready <= in[2].b.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_7 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out_15 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_15.earlyValid <= portsDIO_filtered[2].valid @[ReadyValidCancel.scala 69:20]
    out_15.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_15.bits <= portsDIO_filtered[2].bits @[ReadyValidCancel.scala 71:14]
    portsDIO_filtered[2].ready <= out_15.ready @[ReadyValidCancel.scala 72:14]
    sink_ACancel_7.bits.corrupt <= out_15.bits.corrupt @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.data <= out_15.bits.data @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.denied <= out_15.bits.denied @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.sink <= out_15.bits.sink @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.source <= out_15.bits.source @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.size <= out_15.bits.size @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.param <= out_15.bits.param @[BundleMap.scala 247:19]
    sink_ACancel_7.bits.opcode <= out_15.bits.opcode @[BundleMap.scala 247:19]
    sink_ACancel_7.lateCancel <= out_15.lateCancel @[BundleMap.scala 247:19]
    sink_ACancel_7.earlyValid <= out_15.earlyValid @[BundleMap.scala 247:19]
    out_15.ready <= sink_ACancel_7.ready @[BundleMap.scala 247:19]
    wire out_16 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_14 = eq(sink_ACancel_7.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_15 = and(sink_ACancel_7.earlyValid, _out_valid_T_14) @[ReadyValidCancel.scala 21:38]
    out_16.valid <= _out_valid_T_15 @[ReadyValidCancel.scala 54:15]
    out_16.bits <= sink_ACancel_7.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_7.ready <= out_16.ready @[ReadyValidCancel.scala 56:11]
    in[2].d.bits.corrupt <= out_16.bits.corrupt @[BundleMap.scala 247:19]
    in[2].d.bits.data <= out_16.bits.data @[BundleMap.scala 247:19]
    in[2].d.bits.denied <= out_16.bits.denied @[BundleMap.scala 247:19]
    in[2].d.bits.sink <= out_16.bits.sink @[BundleMap.scala 247:19]
    in[2].d.bits.source <= out_16.bits.source @[BundleMap.scala 247:19]
    in[2].d.bits.size <= out_16.bits.size @[BundleMap.scala 247:19]
    in[2].d.bits.param <= out_16.bits.param @[BundleMap.scala 247:19]
    in[2].d.bits.opcode <= out_16.bits.opcode @[BundleMap.scala 247:19]
    in[2].d.valid <= out_16.valid @[BundleMap.scala 247:19]
    out_16.ready <= in[2].d.ready @[BundleMap.scala 247:19]
    portsBIO_filtered[2].ready <= UInt<1>("h0") @[Xbar.scala 414:73]
    wire sink_ACancel_8 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_8.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_8.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_8.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.mask is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel_8.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_17 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_16 = eq(sink_ACancel_8.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_17 = and(sink_ACancel_8.earlyValid, _out_valid_T_16) @[ReadyValidCancel.scala 21:38]
    out_17.valid <= _out_valid_T_17 @[ReadyValidCancel.scala 54:15]
    out_17.bits <= sink_ACancel_8.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_8.ready <= out_17.ready @[ReadyValidCancel.scala 56:11]
    in[3].b.bits.corrupt <= out_17.bits.corrupt @[BundleMap.scala 247:19]
    in[3].b.bits.data <= out_17.bits.data @[BundleMap.scala 247:19]
    in[3].b.bits.mask <= out_17.bits.mask @[BundleMap.scala 247:19]
    in[3].b.bits.address <= out_17.bits.address @[BundleMap.scala 247:19]
    in[3].b.bits.source <= out_17.bits.source @[BundleMap.scala 247:19]
    in[3].b.bits.size <= out_17.bits.size @[BundleMap.scala 247:19]
    in[3].b.bits.param <= out_17.bits.param @[BundleMap.scala 247:19]
    in[3].b.bits.opcode <= out_17.bits.opcode @[BundleMap.scala 247:19]
    in[3].b.valid <= out_17.valid @[BundleMap.scala 247:19]
    out_17.ready <= in[3].b.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_9 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out_18 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_18.earlyValid <= portsDIO_filtered[3].valid @[ReadyValidCancel.scala 69:20]
    out_18.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_18.bits <= portsDIO_filtered[3].bits @[ReadyValidCancel.scala 71:14]
    portsDIO_filtered[3].ready <= out_18.ready @[ReadyValidCancel.scala 72:14]
    sink_ACancel_9.bits.corrupt <= out_18.bits.corrupt @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.data <= out_18.bits.data @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.denied <= out_18.bits.denied @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.sink <= out_18.bits.sink @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.source <= out_18.bits.source @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.size <= out_18.bits.size @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.param <= out_18.bits.param @[BundleMap.scala 247:19]
    sink_ACancel_9.bits.opcode <= out_18.bits.opcode @[BundleMap.scala 247:19]
    sink_ACancel_9.lateCancel <= out_18.lateCancel @[BundleMap.scala 247:19]
    sink_ACancel_9.earlyValid <= out_18.earlyValid @[BundleMap.scala 247:19]
    out_18.ready <= sink_ACancel_9.ready @[BundleMap.scala 247:19]
    wire out_19 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_18 = eq(sink_ACancel_9.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_19 = and(sink_ACancel_9.earlyValid, _out_valid_T_18) @[ReadyValidCancel.scala 21:38]
    out_19.valid <= _out_valid_T_19 @[ReadyValidCancel.scala 54:15]
    out_19.bits <= sink_ACancel_9.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_9.ready <= out_19.ready @[ReadyValidCancel.scala 56:11]
    in[3].d.bits.corrupt <= out_19.bits.corrupt @[BundleMap.scala 247:19]
    in[3].d.bits.data <= out_19.bits.data @[BundleMap.scala 247:19]
    in[3].d.bits.denied <= out_19.bits.denied @[BundleMap.scala 247:19]
    in[3].d.bits.sink <= out_19.bits.sink @[BundleMap.scala 247:19]
    in[3].d.bits.source <= out_19.bits.source @[BundleMap.scala 247:19]
    in[3].d.bits.size <= out_19.bits.size @[BundleMap.scala 247:19]
    in[3].d.bits.param <= out_19.bits.param @[BundleMap.scala 247:19]
    in[3].d.bits.opcode <= out_19.bits.opcode @[BundleMap.scala 247:19]
    in[3].d.valid <= out_19.valid @[BundleMap.scala 247:19]
    out_19.ready <= in[3].d.ready @[BundleMap.scala 247:19]
    portsBIO_filtered[3].ready <= UInt<1>("h0") @[Xbar.scala 414:73]
    wire sink_ACancel_10 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    sink_ACancel_10.earlyValid <= UInt<1>("h0") @[Arbiter.scala 77:23]
    sink_ACancel_10.lateCancel is invalid @[Arbiter.scala 78:23]
    sink_ACancel_10.bits.corrupt is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.data is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.mask is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.address is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.source is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.size is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.param is invalid @[Arbiter.scala 79:23]
    sink_ACancel_10.bits.opcode is invalid @[Arbiter.scala 79:23]
    wire out_20 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_20 = eq(sink_ACancel_10.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_21 = and(sink_ACancel_10.earlyValid, _out_valid_T_20) @[ReadyValidCancel.scala 21:38]
    out_20.valid <= _out_valid_T_21 @[ReadyValidCancel.scala 54:15]
    out_20.bits <= sink_ACancel_10.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_10.ready <= out_20.ready @[ReadyValidCancel.scala 56:11]
    in[4].b.bits.corrupt <= out_20.bits.corrupt @[BundleMap.scala 247:19]
    in[4].b.bits.data <= out_20.bits.data @[BundleMap.scala 247:19]
    in[4].b.bits.mask <= out_20.bits.mask @[BundleMap.scala 247:19]
    in[4].b.bits.address <= out_20.bits.address @[BundleMap.scala 247:19]
    in[4].b.bits.source <= out_20.bits.source @[BundleMap.scala 247:19]
    in[4].b.bits.size <= out_20.bits.size @[BundleMap.scala 247:19]
    in[4].b.bits.param <= out_20.bits.param @[BundleMap.scala 247:19]
    in[4].b.bits.opcode <= out_20.bits.opcode @[BundleMap.scala 247:19]
    in[4].b.valid <= out_20.valid @[BundleMap.scala 247:19]
    out_20.ready <= in[4].b.ready @[BundleMap.scala 247:19]
    wire sink_ACancel_11 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out_21 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_21.earlyValid <= portsDIO_filtered[4].valid @[ReadyValidCancel.scala 69:20]
    out_21.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_21.bits <= portsDIO_filtered[4].bits @[ReadyValidCancel.scala 71:14]
    portsDIO_filtered[4].ready <= out_21.ready @[ReadyValidCancel.scala 72:14]
    sink_ACancel_11.bits.corrupt <= out_21.bits.corrupt @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.data <= out_21.bits.data @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.denied <= out_21.bits.denied @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.sink <= out_21.bits.sink @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.source <= out_21.bits.source @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.size <= out_21.bits.size @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.param <= out_21.bits.param @[BundleMap.scala 247:19]
    sink_ACancel_11.bits.opcode <= out_21.bits.opcode @[BundleMap.scala 247:19]
    sink_ACancel_11.lateCancel <= out_21.lateCancel @[BundleMap.scala 247:19]
    sink_ACancel_11.earlyValid <= out_21.earlyValid @[BundleMap.scala 247:19]
    out_21.ready <= sink_ACancel_11.ready @[BundleMap.scala 247:19]
    wire out_22 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T_22 = eq(sink_ACancel_11.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_23 = and(sink_ACancel_11.earlyValid, _out_valid_T_22) @[ReadyValidCancel.scala 21:38]
    out_22.valid <= _out_valid_T_23 @[ReadyValidCancel.scala 54:15]
    out_22.bits <= sink_ACancel_11.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel_11.ready <= out_22.ready @[ReadyValidCancel.scala 56:11]
    in[4].d.bits.corrupt <= out_22.bits.corrupt @[BundleMap.scala 247:19]
    in[4].d.bits.data <= out_22.bits.data @[BundleMap.scala 247:19]
    in[4].d.bits.denied <= out_22.bits.denied @[BundleMap.scala 247:19]
    in[4].d.bits.sink <= out_22.bits.sink @[BundleMap.scala 247:19]
    in[4].d.bits.source <= out_22.bits.source @[BundleMap.scala 247:19]
    in[4].d.bits.size <= out_22.bits.size @[BundleMap.scala 247:19]
    in[4].d.bits.param <= out_22.bits.param @[BundleMap.scala 247:19]
    in[4].d.bits.opcode <= out_22.bits.opcode @[BundleMap.scala 247:19]
    in[4].d.valid <= out_22.valid @[BundleMap.scala 247:19]
    out_22.ready <= in[4].d.ready @[BundleMap.scala 247:19]
    portsBIO_filtered[4].ready <= UInt<1>("h0") @[Xbar.scala 414:73]
    wire x1_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Bundle_ACancel.scala 24:19]
    wire x1_out_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _x1_out_valid_T = eq(_WIRE.a.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _x1_out_valid_T_1 = and(_WIRE.a.earlyValid, _x1_out_valid_T) @[ReadyValidCancel.scala 21:38]
    x1_out_1.valid <= _x1_out_valid_T_1 @[ReadyValidCancel.scala 54:15]
    x1_out_1.bits <= _WIRE.a.bits @[ReadyValidCancel.scala 55:15]
    _WIRE.a.ready <= x1_out_1.ready @[ReadyValidCancel.scala 56:11]
    x1_out.a.bits.corrupt <= x1_out_1.bits.corrupt @[BundleMap.scala 247:19]
    x1_out.a.bits.data <= x1_out_1.bits.data @[BundleMap.scala 247:19]
    x1_out.a.bits.mask <= x1_out_1.bits.mask @[BundleMap.scala 247:19]
    x1_out.a.bits.address <= x1_out_1.bits.address @[BundleMap.scala 247:19]
    x1_out.a.bits.source <= x1_out_1.bits.source @[BundleMap.scala 247:19]
    x1_out.a.bits.size <= x1_out_1.bits.size @[BundleMap.scala 247:19]
    x1_out.a.bits.param <= x1_out_1.bits.param @[BundleMap.scala 247:19]
    x1_out.a.bits.opcode <= x1_out_1.bits.opcode @[BundleMap.scala 247:19]
    x1_out.a.valid <= x1_out_1.valid @[BundleMap.scala 247:19]
    x1_out_1.ready <= x1_out.a.ready @[BundleMap.scala 247:19]
    wire _x1_WIRE : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _x1_WIRE.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.source <= UInt<7>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _x1_WIRE.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _x1_WIRE_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _x1_WIRE_1.bits <= _x1_WIRE.bits @[Bundles.scala 259:61]
    _x1_WIRE_1.valid <= _x1_WIRE.valid @[Bundles.scala 259:61]
    _x1_WIRE_1.ready <= _x1_WIRE.ready @[Bundles.scala 259:61]
    _WIRE.b.bits.corrupt <= _x1_WIRE_1.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE.b.bits.data <= _x1_WIRE_1.bits.data @[BundleMap.scala 247:19]
    _WIRE.b.bits.mask <= _x1_WIRE_1.bits.mask @[BundleMap.scala 247:19]
    _WIRE.b.bits.address <= _x1_WIRE_1.bits.address @[BundleMap.scala 247:19]
    _WIRE.b.bits.source <= _x1_WIRE_1.bits.source @[BundleMap.scala 247:19]
    _WIRE.b.bits.size <= _x1_WIRE_1.bits.size @[BundleMap.scala 247:19]
    _WIRE.b.bits.param <= _x1_WIRE_1.bits.param @[BundleMap.scala 247:19]
    _WIRE.b.bits.opcode <= _x1_WIRE_1.bits.opcode @[BundleMap.scala 247:19]
    _WIRE.b.valid <= _x1_WIRE_1.valid @[BundleMap.scala 247:19]
    _x1_WIRE_1.ready <= _WIRE.b.ready @[BundleMap.scala 247:19]
    wire _x1_WIRE_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.source <= UInt<7>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _x1_WIRE_2.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _x1_WIRE_3 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _x1_WIRE_3.bits <= _x1_WIRE_2.bits @[Bundles.scala 260:61]
    _x1_WIRE_3.valid <= _x1_WIRE_2.valid @[Bundles.scala 260:61]
    _x1_WIRE_3.ready <= _x1_WIRE_2.ready @[Bundles.scala 260:61]
    _x1_WIRE_3.bits.corrupt <= _WIRE.c.bits.corrupt @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.data <= _WIRE.c.bits.data @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.address <= _WIRE.c.bits.address @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.source <= _WIRE.c.bits.source @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.size <= _WIRE.c.bits.size @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.param <= _WIRE.c.bits.param @[BundleMap.scala 247:19]
    _x1_WIRE_3.bits.opcode <= _WIRE.c.bits.opcode @[BundleMap.scala 247:19]
    _x1_WIRE_3.valid <= _WIRE.c.valid @[BundleMap.scala 247:19]
    _WIRE.c.ready <= _x1_WIRE_3.ready @[BundleMap.scala 247:19]
    _WIRE.d.bits.corrupt <= x1_out.d.bits.corrupt @[BundleMap.scala 247:19]
    _WIRE.d.bits.data <= x1_out.d.bits.data @[BundleMap.scala 247:19]
    _WIRE.d.bits.denied <= x1_out.d.bits.denied @[BundleMap.scala 247:19]
    _WIRE.d.bits.sink <= x1_out.d.bits.sink @[BundleMap.scala 247:19]
    _WIRE.d.bits.source <= x1_out.d.bits.source @[BundleMap.scala 247:19]
    _WIRE.d.bits.size <= x1_out.d.bits.size @[BundleMap.scala 247:19]
    _WIRE.d.bits.param <= x1_out.d.bits.param @[BundleMap.scala 247:19]
    _WIRE.d.bits.opcode <= x1_out.d.bits.opcode @[BundleMap.scala 247:19]
    _WIRE.d.valid <= x1_out.d.valid @[BundleMap.scala 247:19]
    x1_out.d.ready <= _WIRE.d.ready @[BundleMap.scala 247:19]
    wire _x1_WIRE_4 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _x1_WIRE_4.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _x1_WIRE_4.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _x1_WIRE_4.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _x1_WIRE_5 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _x1_WIRE_5.bits <= _x1_WIRE_4.bits @[Bundles.scala 262:61]
    _x1_WIRE_5.valid <= _x1_WIRE_4.valid @[Bundles.scala 262:61]
    _x1_WIRE_5.ready <= _x1_WIRE_4.ready @[Bundles.scala 262:61]
    _x1_WIRE_5.bits.sink <= _WIRE.e.bits.sink @[BundleMap.scala 247:19]
    _x1_WIRE_5.valid <= _WIRE.e.valid @[BundleMap.scala 247:19]
    _WIRE.e.ready <= _x1_WIRE_5.ready @[BundleMap.scala 247:19]
    x1 <= x1_out @[Xbar.scala 139:12]

  module ComposerAccSystem :
    input clock : Clock
    input reset : Reset
    output auto : { mem_out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}}
    output io : { flip cmd : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, resp : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    inst acc of ComposerAcc @[Accelerator.scala 145:23]
    acc.clock is invalid
    acc.reset is invalid
    acc.auto is invalid
    acc.io is invalid
    acc.clock <= clock
    acc.reset <= reset
    inst crossbarModule of TLXbar @[Accelerator.scala 147:34]
    crossbarModule.clock is invalid
    crossbarModule.reset is invalid
    crossbarModule.auto is invalid
    crossbarModule.clock <= clock
    crossbarModule.reset <= reset
    wire x1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    wire x1_1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_1 is invalid @[Nodes.scala 1215:84]
    x1 <- x1_1 @[Nodes.scala 1509:55]
    crossbarModule.auto.in_0 <- acc.auto.EnergyCalc_memory_endpoint_identity_out_0 @[LazyModule.scala 355:16]
    crossbarModule.auto.in_1 <- acc.auto.EnergyCalc_memory_endpoint_identity_out_1 @[LazyModule.scala 355:16]
    crossbarModule.auto.in_2 <- acc.auto.EnergyCalc_memory_endpoint_identity_out_2 @[LazyModule.scala 355:16]
    crossbarModule.auto.in_3 <- acc.auto.EnergyCalc_memory_endpoint_identity_out_3 @[LazyModule.scala 355:16]
    crossbarModule.auto.in_4 <- acc.auto.EnergyCalc_memory_endpoint_identity_out_4 @[LazyModule.scala 355:16]
    x1_1 <- crossbarModule.auto.out @[LazyModule.scala 353:16]
    auto.mem_out <- x1 @[LazyModule.scala 368:12]
    acc.io.cmd <= io.cmd @[Accelerator.scala 164:27]
    io.resp.bits <= acc.io.resp.bits @[Accelerator.scala 165:11]
    io.resp.valid <= acc.io.resp.valid @[Accelerator.scala 165:11]
    acc.io.resp.ready <= io.resp.ready @[Accelerator.scala 165:11]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_6 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_7 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_8 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.source <= x1.b.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.size <= x1.b.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_9 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_10 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.source <= x1.r.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.size <= x1.r.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module Queue_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_1 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_11 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_12 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_13 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.source <= x1.b.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.size <= x1.b.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_14 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_15 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.source <= x1.r.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.size <= x1.r.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module Queue_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<1>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, wen : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, wen : UInt<1>}}, count : UInt<1>}

    cmem ram : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, wen : UInt<1>} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module TLToAXI4 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    wire _sourceStall_WIRE : UInt<1>[66] @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[0] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[1] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[2] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[3] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[4] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[5] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[6] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[7] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[8] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[9] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[10] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[11] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[12] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[13] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[14] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[15] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[16] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[17] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[18] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[19] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[20] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[21] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[22] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[23] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[24] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[25] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[26] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[27] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[28] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[29] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[30] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[31] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[32] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[33] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[34] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[35] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[36] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[37] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[38] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[39] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[40] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[41] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[42] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[43] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[44] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[45] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[46] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[47] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[48] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[49] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[50] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[51] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[52] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[53] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[54] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[55] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[56] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[57] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[58] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[59] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[60] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[61] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[62] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[63] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[64] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    _sourceStall_WIRE[65] <= UInt<1>("h0") @[ToAXI4.scala 110:76]
    wire sourceStall : UInt<1>[66] @[ToAXI4.scala 110:36]
    sourceStall <= _sourceStall_WIRE @[ToAXI4.scala 110:36]
    wire _sourceTable_WIRE : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_1 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_1 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_2 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_2 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_3 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_3 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_4 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_4 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_5 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_5 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_6 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_6 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_7 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_7 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_8 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_8 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_9 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_9 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_10 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_10 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_11 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_11 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_12 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_12 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_13 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_13 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_14 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_14 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_15 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_15 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_16 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_16 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_17 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_17 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_18 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_18 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_19 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_19 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_20 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_20 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_21 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_21 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_22 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_22 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_23 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_23 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_24 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_24 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_25 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_25 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_26 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_26 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_27 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_27 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_28 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_28 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_29 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_29 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_30 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_30 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_31 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_31 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_32 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_32 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_33 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_33 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_34 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_34 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_35 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_35 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_36 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_36 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_37 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_37 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_38 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_38 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_39 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_39 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_40 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_40 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_41 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_41 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_42 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_42 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_43 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_43 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_44 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_44 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_45 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_45 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_46 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_46 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_47 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_47 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_48 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_48 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_49 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_49 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_50 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_50 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_51 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_51 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_52 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_52 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_53 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_53 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_54 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_54 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_55 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_55 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_56 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_56 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_57 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_57 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_58 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_58 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_59 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_59 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_60 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_60 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_61 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_61 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_62 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_62 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_63 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_63 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_64 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_64 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_65 : UInt<7> @[ToAXI4.scala 111:89]
    _sourceTable_WIRE_65 <= UInt<1>("h0") @[ToAXI4.scala 111:89]
    wire _sourceTable_WIRE_66 : UInt<7>[66] @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[0] <= _sourceTable_WIRE @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[1] <= _sourceTable_WIRE_1 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[2] <= _sourceTable_WIRE_2 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[3] <= _sourceTable_WIRE_3 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[4] <= _sourceTable_WIRE_4 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[5] <= _sourceTable_WIRE_5 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[6] <= _sourceTable_WIRE_6 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[7] <= _sourceTable_WIRE_7 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[8] <= _sourceTable_WIRE_8 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[9] <= _sourceTable_WIRE_9 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[10] <= _sourceTable_WIRE_10 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[11] <= _sourceTable_WIRE_11 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[12] <= _sourceTable_WIRE_12 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[13] <= _sourceTable_WIRE_13 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[14] <= _sourceTable_WIRE_14 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[15] <= _sourceTable_WIRE_15 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[16] <= _sourceTable_WIRE_16 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[17] <= _sourceTable_WIRE_17 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[18] <= _sourceTable_WIRE_18 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[19] <= _sourceTable_WIRE_19 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[20] <= _sourceTable_WIRE_20 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[21] <= _sourceTable_WIRE_21 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[22] <= _sourceTable_WIRE_22 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[23] <= _sourceTable_WIRE_23 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[24] <= _sourceTable_WIRE_24 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[25] <= _sourceTable_WIRE_25 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[26] <= _sourceTable_WIRE_26 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[27] <= _sourceTable_WIRE_27 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[28] <= _sourceTable_WIRE_28 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[29] <= _sourceTable_WIRE_29 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[30] <= _sourceTable_WIRE_30 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[31] <= _sourceTable_WIRE_31 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[32] <= _sourceTable_WIRE_32 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[33] <= _sourceTable_WIRE_33 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[34] <= _sourceTable_WIRE_34 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[35] <= _sourceTable_WIRE_35 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[36] <= _sourceTable_WIRE_36 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[37] <= _sourceTable_WIRE_37 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[38] <= _sourceTable_WIRE_38 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[39] <= _sourceTable_WIRE_39 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[40] <= _sourceTable_WIRE_40 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[41] <= _sourceTable_WIRE_41 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[42] <= _sourceTable_WIRE_42 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[43] <= _sourceTable_WIRE_43 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[44] <= _sourceTable_WIRE_44 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[45] <= _sourceTable_WIRE_45 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[46] <= _sourceTable_WIRE_46 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[47] <= _sourceTable_WIRE_47 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[48] <= _sourceTable_WIRE_48 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[49] <= _sourceTable_WIRE_49 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[50] <= _sourceTable_WIRE_50 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[51] <= _sourceTable_WIRE_51 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[52] <= _sourceTable_WIRE_52 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[53] <= _sourceTable_WIRE_53 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[54] <= _sourceTable_WIRE_54 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[55] <= _sourceTable_WIRE_55 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[56] <= _sourceTable_WIRE_56 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[57] <= _sourceTable_WIRE_57 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[58] <= _sourceTable_WIRE_58 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[59] <= _sourceTable_WIRE_59 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[60] <= _sourceTable_WIRE_60 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[61] <= _sourceTable_WIRE_61 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[62] <= _sourceTable_WIRE_62 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[63] <= _sourceTable_WIRE_63 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[64] <= _sourceTable_WIRE_64 @[ToAXI4.scala 111:76]
    _sourceTable_WIRE_66[65] <= _sourceTable_WIRE_65 @[ToAXI4.scala 111:76]
    wire sourceTable : UInt<7>[66] @[ToAXI4.scala 111:36]
    sourceTable <= _sourceTable_WIRE_66 @[ToAXI4.scala 111:36]
    wire _idStall_WIRE : UInt<1>[66] @[ToAXI4.scala 112:67]
    _idStall_WIRE[0] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[1] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[2] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[3] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[4] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[5] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[6] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[7] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[8] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[9] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[10] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[11] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[12] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[13] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[14] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[15] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[16] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[17] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[18] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[19] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[20] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[21] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[22] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[23] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[24] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[25] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[26] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[27] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[28] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[29] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[30] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[31] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[32] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[33] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[34] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[35] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[36] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[37] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[38] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[39] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[40] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[41] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[42] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[43] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[44] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[45] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[46] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[47] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[48] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[49] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[50] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[51] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[52] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[53] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[54] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[55] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[56] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[57] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[58] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[59] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[60] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[61] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[62] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[63] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[64] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    _idStall_WIRE[65] <= UInt<1>("h0") @[ToAXI4.scala 112:67]
    wire idStall : UInt<1>[66] @[ToAXI4.scala 112:32]
    idStall <= _idStall_WIRE @[ToAXI4.scala 112:32]
    sourceStall[0] <= idStall[0] @[ToAXI4.scala 118:39]
    sourceTable[0] <= UInt<1>("h0") @[ToAXI4.scala 119:39]
    sourceStall[1] <= idStall[1] @[ToAXI4.scala 118:39]
    sourceTable[1] <= UInt<1>("h1") @[ToAXI4.scala 119:39]
    sourceStall[2] <= idStall[2] @[ToAXI4.scala 118:39]
    sourceTable[2] <= UInt<2>("h2") @[ToAXI4.scala 119:39]
    sourceStall[3] <= idStall[3] @[ToAXI4.scala 118:39]
    sourceTable[3] <= UInt<2>("h3") @[ToAXI4.scala 119:39]
    sourceStall[4] <= idStall[4] @[ToAXI4.scala 118:39]
    sourceTable[4] <= UInt<3>("h4") @[ToAXI4.scala 119:39]
    sourceStall[5] <= idStall[5] @[ToAXI4.scala 118:39]
    sourceTable[5] <= UInt<3>("h5") @[ToAXI4.scala 119:39]
    sourceStall[6] <= idStall[6] @[ToAXI4.scala 118:39]
    sourceTable[6] <= UInt<3>("h6") @[ToAXI4.scala 119:39]
    sourceStall[7] <= idStall[7] @[ToAXI4.scala 118:39]
    sourceTable[7] <= UInt<3>("h7") @[ToAXI4.scala 119:39]
    sourceStall[8] <= idStall[8] @[ToAXI4.scala 118:39]
    sourceTable[8] <= UInt<4>("h8") @[ToAXI4.scala 119:39]
    sourceStall[9] <= idStall[9] @[ToAXI4.scala 118:39]
    sourceTable[9] <= UInt<4>("h9") @[ToAXI4.scala 119:39]
    sourceStall[10] <= idStall[10] @[ToAXI4.scala 118:39]
    sourceTable[10] <= UInt<4>("ha") @[ToAXI4.scala 119:39]
    sourceStall[11] <= idStall[11] @[ToAXI4.scala 118:39]
    sourceTable[11] <= UInt<4>("hb") @[ToAXI4.scala 119:39]
    sourceStall[12] <= idStall[12] @[ToAXI4.scala 118:39]
    sourceTable[12] <= UInt<4>("hc") @[ToAXI4.scala 119:39]
    sourceStall[13] <= idStall[13] @[ToAXI4.scala 118:39]
    sourceTable[13] <= UInt<4>("hd") @[ToAXI4.scala 119:39]
    sourceStall[14] <= idStall[14] @[ToAXI4.scala 118:39]
    sourceTable[14] <= UInt<4>("he") @[ToAXI4.scala 119:39]
    sourceStall[15] <= idStall[15] @[ToAXI4.scala 118:39]
    sourceTable[15] <= UInt<4>("hf") @[ToAXI4.scala 119:39]
    sourceStall[16] <= idStall[16] @[ToAXI4.scala 118:39]
    sourceTable[16] <= UInt<5>("h10") @[ToAXI4.scala 119:39]
    sourceStall[17] <= idStall[17] @[ToAXI4.scala 118:39]
    sourceTable[17] <= UInt<5>("h11") @[ToAXI4.scala 119:39]
    sourceStall[18] <= idStall[18] @[ToAXI4.scala 118:39]
    sourceTable[18] <= UInt<5>("h12") @[ToAXI4.scala 119:39]
    sourceStall[19] <= idStall[19] @[ToAXI4.scala 118:39]
    sourceTable[19] <= UInt<5>("h13") @[ToAXI4.scala 119:39]
    sourceStall[20] <= idStall[20] @[ToAXI4.scala 118:39]
    sourceTable[20] <= UInt<5>("h14") @[ToAXI4.scala 119:39]
    sourceStall[21] <= idStall[21] @[ToAXI4.scala 118:39]
    sourceTable[21] <= UInt<5>("h15") @[ToAXI4.scala 119:39]
    sourceStall[22] <= idStall[22] @[ToAXI4.scala 118:39]
    sourceTable[22] <= UInt<5>("h16") @[ToAXI4.scala 119:39]
    sourceStall[23] <= idStall[23] @[ToAXI4.scala 118:39]
    sourceTable[23] <= UInt<5>("h17") @[ToAXI4.scala 119:39]
    sourceStall[24] <= idStall[24] @[ToAXI4.scala 118:39]
    sourceTable[24] <= UInt<5>("h18") @[ToAXI4.scala 119:39]
    sourceStall[25] <= idStall[25] @[ToAXI4.scala 118:39]
    sourceTable[25] <= UInt<5>("h19") @[ToAXI4.scala 119:39]
    sourceStall[26] <= idStall[26] @[ToAXI4.scala 118:39]
    sourceTable[26] <= UInt<5>("h1a") @[ToAXI4.scala 119:39]
    sourceStall[27] <= idStall[27] @[ToAXI4.scala 118:39]
    sourceTable[27] <= UInt<5>("h1b") @[ToAXI4.scala 119:39]
    sourceStall[28] <= idStall[28] @[ToAXI4.scala 118:39]
    sourceTable[28] <= UInt<5>("h1c") @[ToAXI4.scala 119:39]
    sourceStall[29] <= idStall[29] @[ToAXI4.scala 118:39]
    sourceTable[29] <= UInt<5>("h1d") @[ToAXI4.scala 119:39]
    sourceStall[30] <= idStall[30] @[ToAXI4.scala 118:39]
    sourceTable[30] <= UInt<5>("h1e") @[ToAXI4.scala 119:39]
    sourceStall[31] <= idStall[31] @[ToAXI4.scala 118:39]
    sourceTable[31] <= UInt<5>("h1f") @[ToAXI4.scala 119:39]
    sourceStall[32] <= idStall[32] @[ToAXI4.scala 118:39]
    sourceTable[32] <= UInt<6>("h20") @[ToAXI4.scala 119:39]
    sourceStall[33] <= idStall[33] @[ToAXI4.scala 118:39]
    sourceTable[33] <= UInt<6>("h21") @[ToAXI4.scala 119:39]
    sourceStall[34] <= idStall[34] @[ToAXI4.scala 118:39]
    sourceTable[34] <= UInt<6>("h22") @[ToAXI4.scala 119:39]
    sourceStall[35] <= idStall[35] @[ToAXI4.scala 118:39]
    sourceTable[35] <= UInt<6>("h23") @[ToAXI4.scala 119:39]
    sourceStall[36] <= idStall[36] @[ToAXI4.scala 118:39]
    sourceTable[36] <= UInt<6>("h24") @[ToAXI4.scala 119:39]
    sourceStall[37] <= idStall[37] @[ToAXI4.scala 118:39]
    sourceTable[37] <= UInt<6>("h25") @[ToAXI4.scala 119:39]
    sourceStall[38] <= idStall[38] @[ToAXI4.scala 118:39]
    sourceTable[38] <= UInt<6>("h26") @[ToAXI4.scala 119:39]
    sourceStall[39] <= idStall[39] @[ToAXI4.scala 118:39]
    sourceTable[39] <= UInt<6>("h27") @[ToAXI4.scala 119:39]
    sourceStall[40] <= idStall[40] @[ToAXI4.scala 118:39]
    sourceTable[40] <= UInt<6>("h28") @[ToAXI4.scala 119:39]
    sourceStall[41] <= idStall[41] @[ToAXI4.scala 118:39]
    sourceTable[41] <= UInt<6>("h29") @[ToAXI4.scala 119:39]
    sourceStall[42] <= idStall[42] @[ToAXI4.scala 118:39]
    sourceTable[42] <= UInt<6>("h2a") @[ToAXI4.scala 119:39]
    sourceStall[43] <= idStall[43] @[ToAXI4.scala 118:39]
    sourceTable[43] <= UInt<6>("h2b") @[ToAXI4.scala 119:39]
    sourceStall[44] <= idStall[44] @[ToAXI4.scala 118:39]
    sourceTable[44] <= UInt<6>("h2c") @[ToAXI4.scala 119:39]
    sourceStall[45] <= idStall[45] @[ToAXI4.scala 118:39]
    sourceTable[45] <= UInt<6>("h2d") @[ToAXI4.scala 119:39]
    sourceStall[46] <= idStall[46] @[ToAXI4.scala 118:39]
    sourceTable[46] <= UInt<6>("h2e") @[ToAXI4.scala 119:39]
    sourceStall[47] <= idStall[47] @[ToAXI4.scala 118:39]
    sourceTable[47] <= UInt<6>("h2f") @[ToAXI4.scala 119:39]
    sourceStall[48] <= idStall[48] @[ToAXI4.scala 118:39]
    sourceTable[48] <= UInt<6>("h30") @[ToAXI4.scala 119:39]
    sourceStall[49] <= idStall[49] @[ToAXI4.scala 118:39]
    sourceTable[49] <= UInt<6>("h31") @[ToAXI4.scala 119:39]
    sourceStall[50] <= idStall[50] @[ToAXI4.scala 118:39]
    sourceTable[50] <= UInt<6>("h32") @[ToAXI4.scala 119:39]
    sourceStall[51] <= idStall[51] @[ToAXI4.scala 118:39]
    sourceTable[51] <= UInt<6>("h33") @[ToAXI4.scala 119:39]
    sourceStall[52] <= idStall[52] @[ToAXI4.scala 118:39]
    sourceTable[52] <= UInt<6>("h34") @[ToAXI4.scala 119:39]
    sourceStall[53] <= idStall[53] @[ToAXI4.scala 118:39]
    sourceTable[53] <= UInt<6>("h35") @[ToAXI4.scala 119:39]
    sourceStall[54] <= idStall[54] @[ToAXI4.scala 118:39]
    sourceTable[54] <= UInt<6>("h36") @[ToAXI4.scala 119:39]
    sourceStall[55] <= idStall[55] @[ToAXI4.scala 118:39]
    sourceTable[55] <= UInt<6>("h37") @[ToAXI4.scala 119:39]
    sourceStall[56] <= idStall[56] @[ToAXI4.scala 118:39]
    sourceTable[56] <= UInt<6>("h38") @[ToAXI4.scala 119:39]
    sourceStall[57] <= idStall[57] @[ToAXI4.scala 118:39]
    sourceTable[57] <= UInt<6>("h39") @[ToAXI4.scala 119:39]
    sourceStall[58] <= idStall[58] @[ToAXI4.scala 118:39]
    sourceTable[58] <= UInt<6>("h3a") @[ToAXI4.scala 119:39]
    sourceStall[59] <= idStall[59] @[ToAXI4.scala 118:39]
    sourceTable[59] <= UInt<6>("h3b") @[ToAXI4.scala 119:39]
    sourceStall[60] <= idStall[60] @[ToAXI4.scala 118:39]
    sourceTable[60] <= UInt<6>("h3c") @[ToAXI4.scala 119:39]
    sourceStall[61] <= idStall[61] @[ToAXI4.scala 118:39]
    sourceTable[61] <= UInt<6>("h3d") @[ToAXI4.scala 119:39]
    sourceStall[62] <= idStall[62] @[ToAXI4.scala 118:39]
    sourceTable[62] <= UInt<6>("h3e") @[ToAXI4.scala 119:39]
    sourceStall[63] <= idStall[63] @[ToAXI4.scala 118:39]
    sourceTable[63] <= UInt<6>("h3f") @[ToAXI4.scala 119:39]
    sourceStall[64] <= idStall[64] @[ToAXI4.scala 118:39]
    sourceTable[64] <= UInt<7>("h40") @[ToAXI4.scala 119:39]
    sourceStall[65] <= idStall[65] @[ToAXI4.scala 118:39]
    sourceTable[65] <= UInt<7>("h41") @[ToAXI4.scala 119:39]
    node _a_isPut_opdata_T = bits(bundleIn_0.a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node a_isPut = eq(_a_isPut_opdata_T, UInt<1>("h0")) @[Edges.scala 91:28]
    node _T = and(bundleIn_0.a.ready, bundleIn_0.a.valid) @[Decoupled.scala 51:35]
    node _beats1_decode_T = asUInt(asSInt(UInt<6>("h3f"))) @[package.scala 235:64]
    node _beats1_decode_T_1 = dshl(_beats1_decode_T, bundleIn_0.a.bits.size) @[package.scala 235:71]
    node _beats1_decode_T_2 = bits(_beats1_decode_T_1, 5, 0) @[package.scala 235:76]
    node _beats1_decode_T_3 = not(_beats1_decode_T_2) @[package.scala 235:46]
    node beats1_decode = shr(_beats1_decode_T_3, 6) @[Edges.scala 219:59]
    node _beats1_opdata_T = bits(bundleIn_0.a.bits.opcode, 2, 2) @[Edges.scala 91:37]
    node beats1_opdata = eq(_beats1_opdata_T, UInt<1>("h0")) @[Edges.scala 91:28]
    node beats1 = mux(beats1_opdata, beats1_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    reg counter : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Edges.scala 228:27]
    node _counter1_T = sub(counter, UInt<1>("h1")) @[Edges.scala 229:28]
    node counter1 = tail(_counter1_T, 1) @[Edges.scala 229:28]
    node a_first = eq(counter, UInt<1>("h0")) @[Edges.scala 230:25]
    node _last_T = eq(counter, UInt<1>("h1")) @[Edges.scala 231:25]
    node _last_T_1 = eq(beats1, UInt<1>("h0")) @[Edges.scala 231:47]
    node a_last = or(_last_T, _last_T_1) @[Edges.scala 231:37]
    node done = and(a_last, _T) @[Edges.scala 232:22]
    node _count_T = not(counter1) @[Edges.scala 233:27]
    node count = and(beats1, _count_T) @[Edges.scala 233:25]
    when _T : @[Edges.scala 234:17]
      node _counter_T = mux(a_first, beats1, counter1) @[Edges.scala 235:21]
      counter <= _counter_T @[Edges.scala 235:15]
    wire out_arw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, wen : UInt<1>}} @[ToAXI4.scala 150:25]
    wire out_w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[ToAXI4.scala 151:23]
    inst deq of Queue_16 @[Decoupled.scala 375:21]
    deq.clock <= clock
    deq.reset <= reset
    deq.io.enq.valid <= out_w.valid @[Decoupled.scala 377:22]
    deq.io.enq.bits.last <= out_w.bits.last @[Decoupled.scala 378:21]
    deq.io.enq.bits.strb <= out_w.bits.strb @[Decoupled.scala 378:21]
    deq.io.enq.bits.data <= out_w.bits.data @[Decoupled.scala 378:21]
    out_w.ready <= deq.io.enq.ready @[Decoupled.scala 379:17]
    wire irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    irr.bits <= deq.io.deq.bits @[Decoupled.scala 415:14]
    irr.valid <= deq.io.deq.valid @[Decoupled.scala 416:15]
    deq.io.deq.ready <= irr.ready @[Decoupled.scala 417:15]
    x1.w.bits.last <= irr.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= irr.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= irr.bits.data @[BundleMap.scala 247:19]
    x1.w.valid <= irr.valid @[BundleMap.scala 247:19]
    irr.ready <= x1.w.ready @[BundleMap.scala 247:19]
    inst queue_arw_deq of Queue_17 @[Decoupled.scala 375:21]
    queue_arw_deq.clock <= clock
    queue_arw_deq.reset <= reset
    queue_arw_deq.io.enq.valid <= out_arw.valid @[Decoupled.scala 377:22]
    queue_arw_deq.io.enq.bits.wen <= out_arw.bits.wen @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.echo.tl_state.source <= out_arw.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.echo.tl_state.size <= out_arw.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.qos <= out_arw.bits.qos @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.prot <= out_arw.bits.prot @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.cache <= out_arw.bits.cache @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.lock <= out_arw.bits.lock @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.burst <= out_arw.bits.burst @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.size <= out_arw.bits.size @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.len <= out_arw.bits.len @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.addr <= out_arw.bits.addr @[Decoupled.scala 378:21]
    queue_arw_deq.io.enq.bits.id <= out_arw.bits.id @[Decoupled.scala 378:21]
    out_arw.ready <= queue_arw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire queue_arw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, wen : UInt<1>}} @[Decoupled.scala 414:19]
    queue_arw.bits <= queue_arw_deq.io.deq.bits @[Decoupled.scala 415:14]
    queue_arw.valid <= queue_arw_deq.io.deq.valid @[Decoupled.scala 416:15]
    queue_arw_deq.io.deq.ready <= queue_arw.ready @[Decoupled.scala 417:15]
    x1.ar.bits.echo <= queue_arw.bits.echo @[ToAXI4.scala 156:19]
    x1.ar.bits.user <= queue_arw.bits.user @[ToAXI4.scala 156:19]
    x1.ar.bits.qos <= queue_arw.bits.qos @[ToAXI4.scala 156:19]
    x1.ar.bits.prot <= queue_arw.bits.prot @[ToAXI4.scala 156:19]
    x1.ar.bits.cache <= queue_arw.bits.cache @[ToAXI4.scala 156:19]
    x1.ar.bits.lock <= queue_arw.bits.lock @[ToAXI4.scala 156:19]
    x1.ar.bits.burst <= queue_arw.bits.burst @[ToAXI4.scala 156:19]
    x1.ar.bits.size <= queue_arw.bits.size @[ToAXI4.scala 156:19]
    x1.ar.bits.len <= queue_arw.bits.len @[ToAXI4.scala 156:19]
    x1.ar.bits.addr <= queue_arw.bits.addr @[ToAXI4.scala 156:19]
    x1.ar.bits.id <= queue_arw.bits.id @[ToAXI4.scala 156:19]
    x1.aw.bits.echo <= queue_arw.bits.echo @[ToAXI4.scala 157:19]
    x1.aw.bits.user <= queue_arw.bits.user @[ToAXI4.scala 157:19]
    x1.aw.bits.qos <= queue_arw.bits.qos @[ToAXI4.scala 157:19]
    x1.aw.bits.prot <= queue_arw.bits.prot @[ToAXI4.scala 157:19]
    x1.aw.bits.cache <= queue_arw.bits.cache @[ToAXI4.scala 157:19]
    x1.aw.bits.lock <= queue_arw.bits.lock @[ToAXI4.scala 157:19]
    x1.aw.bits.burst <= queue_arw.bits.burst @[ToAXI4.scala 157:19]
    x1.aw.bits.size <= queue_arw.bits.size @[ToAXI4.scala 157:19]
    x1.aw.bits.len <= queue_arw.bits.len @[ToAXI4.scala 157:19]
    x1.aw.bits.addr <= queue_arw.bits.addr @[ToAXI4.scala 157:19]
    x1.aw.bits.id <= queue_arw.bits.id @[ToAXI4.scala 157:19]
    node _x1_ar_valid_T = eq(queue_arw.bits.wen, UInt<1>("h0")) @[ToAXI4.scala 158:42]
    node _x1_ar_valid_T_1 = and(queue_arw.valid, _x1_ar_valid_T) @[ToAXI4.scala 158:39]
    x1.ar.valid <= _x1_ar_valid_T_1 @[ToAXI4.scala 158:20]
    node _x1_aw_valid_T = and(queue_arw.valid, queue_arw.bits.wen) @[ToAXI4.scala 159:39]
    x1.aw.valid <= _x1_aw_valid_T @[ToAXI4.scala 159:20]
    node _queue_arw_ready_T = mux(queue_arw.bits.wen, x1.aw.ready, x1.ar.ready) @[ToAXI4.scala 160:29]
    queue_arw.ready <= _queue_arw_ready_T @[ToAXI4.scala 160:23]
    reg doneAW : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 164:30]
    node _T_1 = and(bundleIn_0.a.ready, bundleIn_0.a.valid) @[Decoupled.scala 51:35]
    when _T_1 : @[ToAXI4.scala 165:26]
      node _doneAW_T = eq(a_last, UInt<1>("h0")) @[ToAXI4.scala 165:38]
      doneAW <= _doneAW_T @[ToAXI4.scala 165:35]
    out_arw.bits.wen <= a_isPut @[ToAXI4.scala 168:17]
    out_arw.bits.id <= sourceTable[bundleIn_0.a.bits.source] @[ToAXI4.scala 169:17]
    out_arw.bits.addr <= bundleIn_0.a.bits.address @[ToAXI4.scala 170:17]
    node _out_arw_bits_len_T = asUInt(asSInt(UInt<14>("h3fff"))) @[package.scala 235:64]
    node _out_arw_bits_len_T_1 = dshl(_out_arw_bits_len_T, bundleIn_0.a.bits.size) @[package.scala 235:71]
    node _out_arw_bits_len_T_2 = bits(_out_arw_bits_len_T_1, 13, 0) @[package.scala 235:76]
    node _out_arw_bits_len_T_3 = not(_out_arw_bits_len_T_2) @[package.scala 235:46]
    node _out_arw_bits_len_T_4 = shr(_out_arw_bits_len_T_3, 6) @[ToAXI4.scala 171:84]
    out_arw.bits.len <= _out_arw_bits_len_T_4 @[ToAXI4.scala 171:17]
    node _out_arw_bits_size_T = geq(bundleIn_0.a.bits.size, UInt<3>("h6")) @[ToAXI4.scala 172:31]
    node _out_arw_bits_size_T_1 = mux(_out_arw_bits_size_T, UInt<3>("h6"), bundleIn_0.a.bits.size) @[ToAXI4.scala 172:23]
    out_arw.bits.size <= _out_arw_bits_size_T_1 @[ToAXI4.scala 172:17]
    out_arw.bits.burst <= UInt<2>("h1") @[ToAXI4.scala 173:17]
    out_arw.bits.lock <= UInt<1>("h0") @[ToAXI4.scala 174:17]
    out_arw.bits.cache <= UInt<1>("h0") @[ToAXI4.scala 175:17]
    out_arw.bits.prot <= UInt<3>("h1") @[ToAXI4.scala 176:17]
    out_arw.bits.qos <= UInt<1>("h0") @[ToAXI4.scala 177:17]
    out_arw.bits.echo.tl_state.size <= UInt<1>("h0") @[ToAXI4.scala 23:14]
    out_arw.bits.echo.tl_state.source <= UInt<1>("h0") @[ToAXI4.scala 24:14]
    out_arw.bits.echo.tl_state.source <= bundleIn_0.a.bits.source @[ToAXI4.scala 181:22]
    out_arw.bits.echo.tl_state.size <= bundleIn_0.a.bits.size @[ToAXI4.scala 182:22]
    node stall = and(sourceStall[bundleIn_0.a.bits.source], a_first) @[ToAXI4.scala 198:49]
    node _bundleIn_0_a_ready_T = eq(stall, UInt<1>("h0")) @[ToAXI4.scala 199:21]
    node _bundleIn_0_a_ready_T_1 = or(doneAW, out_arw.ready) @[ToAXI4.scala 199:52]
    node _bundleIn_0_a_ready_T_2 = and(_bundleIn_0_a_ready_T_1, out_w.ready) @[ToAXI4.scala 199:70]
    node _bundleIn_0_a_ready_T_3 = mux(a_isPut, _bundleIn_0_a_ready_T_2, out_arw.ready) @[ToAXI4.scala 199:34]
    node _bundleIn_0_a_ready_T_4 = and(_bundleIn_0_a_ready_T, _bundleIn_0_a_ready_T_3) @[ToAXI4.scala 199:28]
    bundleIn_0.a.ready <= _bundleIn_0_a_ready_T_4 @[ToAXI4.scala 199:18]
    node _out_arw_valid_T = eq(stall, UInt<1>("h0")) @[ToAXI4.scala 200:24]
    node _out_arw_valid_T_1 = and(_out_arw_valid_T, bundleIn_0.a.valid) @[ToAXI4.scala 200:31]
    node _out_arw_valid_T_2 = eq(doneAW, UInt<1>("h0")) @[ToAXI4.scala 200:61]
    node _out_arw_valid_T_3 = and(_out_arw_valid_T_2, out_w.ready) @[ToAXI4.scala 200:69]
    node _out_arw_valid_T_4 = mux(a_isPut, _out_arw_valid_T_3, UInt<1>("h1")) @[ToAXI4.scala 200:51]
    node _out_arw_valid_T_5 = and(_out_arw_valid_T_1, _out_arw_valid_T_4) @[ToAXI4.scala 200:45]
    out_arw.valid <= _out_arw_valid_T_5 @[ToAXI4.scala 200:21]
    node _out_w_valid_T = eq(stall, UInt<1>("h0")) @[ToAXI4.scala 202:22]
    node _out_w_valid_T_1 = and(_out_w_valid_T, bundleIn_0.a.valid) @[ToAXI4.scala 202:29]
    node _out_w_valid_T_2 = and(_out_w_valid_T_1, a_isPut) @[ToAXI4.scala 202:43]
    node _out_w_valid_T_3 = or(doneAW, out_arw.ready) @[ToAXI4.scala 202:65]
    node _out_w_valid_T_4 = and(_out_w_valid_T_2, _out_w_valid_T_3) @[ToAXI4.scala 202:54]
    out_w.valid <= _out_w_valid_T_4 @[ToAXI4.scala 202:19]
    out_w.bits.data <= bundleIn_0.a.bits.data @[ToAXI4.scala 203:23]
    out_w.bits.strb <= bundleIn_0.a.bits.mask @[ToAXI4.scala 204:23]
    out_w.bits.last <= a_last @[ToAXI4.scala 205:23]
    reg r_holds_d : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 209:30]
    node _T_2 = and(x1.r.ready, x1.r.valid) @[Decoupled.scala 51:35]
    when _T_2 : @[ToAXI4.scala 210:27]
      node _r_holds_d_T = eq(x1.r.bits.last, UInt<1>("h0")) @[ToAXI4.scala 210:42]
      r_holds_d <= _r_holds_d_T @[ToAXI4.scala 210:39]
    reg b_delay : UInt<3>, clock with :
      reset => (UInt<1>("h0"), b_delay) @[ToAXI4.scala 212:24]
    node _T_3 = eq(x1.b.ready, UInt<1>("h0")) @[ToAXI4.scala 213:28]
    node _T_4 = and(x1.b.valid, _T_3) @[ToAXI4.scala 213:25]
    when _T_4 : @[ToAXI4.scala 213:42]
      node _b_delay_T = add(b_delay, UInt<1>("h1")) @[ToAXI4.scala 214:28]
      node _b_delay_T_1 = tail(_b_delay_T, 1) @[ToAXI4.scala 214:28]
      b_delay <= _b_delay_T_1 @[ToAXI4.scala 214:17]
    else :
      b_delay <= UInt<1>("h0") @[ToAXI4.scala 216:17]
    node _r_wins_T = neq(b_delay, UInt<3>("h7")) @[ToAXI4.scala 218:44]
    node _r_wins_T_1 = and(x1.r.valid, _r_wins_T) @[ToAXI4.scala 218:33]
    node r_wins = or(_r_wins_T_1, r_holds_d) @[ToAXI4.scala 218:53]
    node _x1_r_ready_T = and(bundleIn_0.d.ready, r_wins) @[ToAXI4.scala 220:33]
    x1.r.ready <= _x1_r_ready_T @[ToAXI4.scala 220:19]
    node _x1_b_ready_T = eq(r_wins, UInt<1>("h0")) @[ToAXI4.scala 221:36]
    node _x1_b_ready_T_1 = and(bundleIn_0.d.ready, _x1_b_ready_T) @[ToAXI4.scala 221:33]
    x1.b.ready <= _x1_b_ready_T_1 @[ToAXI4.scala 221:19]
    node _bundleIn_0_d_valid_T = mux(r_wins, x1.r.valid, x1.b.valid) @[ToAXI4.scala 222:24]
    bundleIn_0.d.valid <= _bundleIn_0_d_valid_T @[ToAXI4.scala 222:18]
    reg r_first : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[ToAXI4.scala 227:28]
    node _T_5 = and(x1.r.ready, x1.r.valid) @[Decoupled.scala 51:35]
    when _T_5 : @[ToAXI4.scala 228:27]
      r_first <= x1.r.bits.last @[ToAXI4.scala 228:37]
    node _r_denied_T = eq(x1.r.bits.resp, UInt<2>("h3")) @[ToAXI4.scala 229:39]
    reg r_denied_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_denied_r) @[Reg.scala 19:16]
    when r_first : @[Reg.scala 20:18]
      r_denied_r <= _r_denied_T @[Reg.scala 20:22]
    node r_denied = mux(r_first, _r_denied_T, r_denied_r) @[package.scala 80:42]
    node r_corrupt = neq(x1.r.bits.resp, UInt<2>("h0")) @[ToAXI4.scala 230:39]
    node b_denied = neq(x1.b.bits.resp, UInt<2>("h0")) @[ToAXI4.scala 231:39]
    node _r_d_T = or(r_corrupt, r_denied) @[ToAXI4.scala 233:96]
    wire r_d : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 771:17]
    r_d is invalid @[Edges.scala 771:17]
    r_d.opcode <= UInt<1>("h1") @[Edges.scala 772:15]
    r_d.param <= UInt<1>("h0") @[Edges.scala 773:15]
    r_d.size <= x1.r.bits.echo.tl_state.size @[Edges.scala 774:15]
    r_d.source <= x1.r.bits.echo.tl_state.source @[Edges.scala 775:15]
    r_d.sink <= UInt<1>("h0") @[Edges.scala 776:15]
    r_d.denied <= r_denied @[Edges.scala 777:15]
    r_d.data <= UInt<1>("h0") @[Edges.scala 778:15]
    r_d.corrupt <= _r_d_T @[Edges.scala 779:15]
    wire b_d : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>} @[Edges.scala 755:17]
    b_d is invalid @[Edges.scala 755:17]
    b_d.opcode <= UInt<1>("h0") @[Edges.scala 756:15]
    b_d.param <= UInt<1>("h0") @[Edges.scala 757:15]
    b_d.size <= x1.b.bits.echo.tl_state.size @[Edges.scala 758:15]
    b_d.source <= x1.b.bits.echo.tl_state.source @[Edges.scala 759:15]
    b_d.sink <= UInt<1>("h0") @[Edges.scala 760:15]
    b_d.denied <= b_denied @[Edges.scala 761:15]
    b_d.data <= UInt<1>("h0") @[Edges.scala 762:15]
    b_d.corrupt <= UInt<1>("h0") @[Edges.scala 763:15]
    node _bundleIn_0_d_bits_T = mux(r_wins, r_d, b_d) @[ToAXI4.scala 240:23]
    bundleIn_0.d.bits.corrupt <= _bundleIn_0_d_bits_T.corrupt @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.data <= _bundleIn_0_d_bits_T.data @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.denied <= _bundleIn_0_d_bits_T.denied @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.sink <= _bundleIn_0_d_bits_T.sink @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.source <= _bundleIn_0_d_bits_T.source @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.size <= _bundleIn_0_d_bits_T.size @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.param <= _bundleIn_0_d_bits_T.param @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.opcode <= _bundleIn_0_d_bits_T.opcode @[ToAXI4.scala 240:17]
    bundleIn_0.d.bits.data <= x1.r.bits.data @[ToAXI4.scala 241:22]
    node a_sel_shiftAmount = bits(out_arw.bits.id, 6, 0) @[OneHot.scala 63:49]
    node _a_sel_T = dshl(UInt<1>("h1"), a_sel_shiftAmount) @[OneHot.scala 64:12]
    node _a_sel_T_1 = bits(_a_sel_T, 65, 0) @[OneHot.scala 64:27]
    node a_sel_0 = bits(_a_sel_T_1, 0, 0) @[ToAXI4.scala 245:58]
    node a_sel_1 = bits(_a_sel_T_1, 1, 1) @[ToAXI4.scala 245:58]
    node a_sel_2 = bits(_a_sel_T_1, 2, 2) @[ToAXI4.scala 245:58]
    node a_sel_3 = bits(_a_sel_T_1, 3, 3) @[ToAXI4.scala 245:58]
    node a_sel_4 = bits(_a_sel_T_1, 4, 4) @[ToAXI4.scala 245:58]
    node a_sel_5 = bits(_a_sel_T_1, 5, 5) @[ToAXI4.scala 245:58]
    node a_sel_6 = bits(_a_sel_T_1, 6, 6) @[ToAXI4.scala 245:58]
    node a_sel_7 = bits(_a_sel_T_1, 7, 7) @[ToAXI4.scala 245:58]
    node a_sel_8 = bits(_a_sel_T_1, 8, 8) @[ToAXI4.scala 245:58]
    node a_sel_9 = bits(_a_sel_T_1, 9, 9) @[ToAXI4.scala 245:58]
    node a_sel_10 = bits(_a_sel_T_1, 10, 10) @[ToAXI4.scala 245:58]
    node a_sel_11 = bits(_a_sel_T_1, 11, 11) @[ToAXI4.scala 245:58]
    node a_sel_12 = bits(_a_sel_T_1, 12, 12) @[ToAXI4.scala 245:58]
    node a_sel_13 = bits(_a_sel_T_1, 13, 13) @[ToAXI4.scala 245:58]
    node a_sel_14 = bits(_a_sel_T_1, 14, 14) @[ToAXI4.scala 245:58]
    node a_sel_15 = bits(_a_sel_T_1, 15, 15) @[ToAXI4.scala 245:58]
    node a_sel_16 = bits(_a_sel_T_1, 16, 16) @[ToAXI4.scala 245:58]
    node a_sel_17 = bits(_a_sel_T_1, 17, 17) @[ToAXI4.scala 245:58]
    node a_sel_18 = bits(_a_sel_T_1, 18, 18) @[ToAXI4.scala 245:58]
    node a_sel_19 = bits(_a_sel_T_1, 19, 19) @[ToAXI4.scala 245:58]
    node a_sel_20 = bits(_a_sel_T_1, 20, 20) @[ToAXI4.scala 245:58]
    node a_sel_21 = bits(_a_sel_T_1, 21, 21) @[ToAXI4.scala 245:58]
    node a_sel_22 = bits(_a_sel_T_1, 22, 22) @[ToAXI4.scala 245:58]
    node a_sel_23 = bits(_a_sel_T_1, 23, 23) @[ToAXI4.scala 245:58]
    node a_sel_24 = bits(_a_sel_T_1, 24, 24) @[ToAXI4.scala 245:58]
    node a_sel_25 = bits(_a_sel_T_1, 25, 25) @[ToAXI4.scala 245:58]
    node a_sel_26 = bits(_a_sel_T_1, 26, 26) @[ToAXI4.scala 245:58]
    node a_sel_27 = bits(_a_sel_T_1, 27, 27) @[ToAXI4.scala 245:58]
    node a_sel_28 = bits(_a_sel_T_1, 28, 28) @[ToAXI4.scala 245:58]
    node a_sel_29 = bits(_a_sel_T_1, 29, 29) @[ToAXI4.scala 245:58]
    node a_sel_30 = bits(_a_sel_T_1, 30, 30) @[ToAXI4.scala 245:58]
    node a_sel_31 = bits(_a_sel_T_1, 31, 31) @[ToAXI4.scala 245:58]
    node a_sel_32 = bits(_a_sel_T_1, 32, 32) @[ToAXI4.scala 245:58]
    node a_sel_33 = bits(_a_sel_T_1, 33, 33) @[ToAXI4.scala 245:58]
    node a_sel_34 = bits(_a_sel_T_1, 34, 34) @[ToAXI4.scala 245:58]
    node a_sel_35 = bits(_a_sel_T_1, 35, 35) @[ToAXI4.scala 245:58]
    node a_sel_36 = bits(_a_sel_T_1, 36, 36) @[ToAXI4.scala 245:58]
    node a_sel_37 = bits(_a_sel_T_1, 37, 37) @[ToAXI4.scala 245:58]
    node a_sel_38 = bits(_a_sel_T_1, 38, 38) @[ToAXI4.scala 245:58]
    node a_sel_39 = bits(_a_sel_T_1, 39, 39) @[ToAXI4.scala 245:58]
    node a_sel_40 = bits(_a_sel_T_1, 40, 40) @[ToAXI4.scala 245:58]
    node a_sel_41 = bits(_a_sel_T_1, 41, 41) @[ToAXI4.scala 245:58]
    node a_sel_42 = bits(_a_sel_T_1, 42, 42) @[ToAXI4.scala 245:58]
    node a_sel_43 = bits(_a_sel_T_1, 43, 43) @[ToAXI4.scala 245:58]
    node a_sel_44 = bits(_a_sel_T_1, 44, 44) @[ToAXI4.scala 245:58]
    node a_sel_45 = bits(_a_sel_T_1, 45, 45) @[ToAXI4.scala 245:58]
    node a_sel_46 = bits(_a_sel_T_1, 46, 46) @[ToAXI4.scala 245:58]
    node a_sel_47 = bits(_a_sel_T_1, 47, 47) @[ToAXI4.scala 245:58]
    node a_sel_48 = bits(_a_sel_T_1, 48, 48) @[ToAXI4.scala 245:58]
    node a_sel_49 = bits(_a_sel_T_1, 49, 49) @[ToAXI4.scala 245:58]
    node a_sel_50 = bits(_a_sel_T_1, 50, 50) @[ToAXI4.scala 245:58]
    node a_sel_51 = bits(_a_sel_T_1, 51, 51) @[ToAXI4.scala 245:58]
    node a_sel_52 = bits(_a_sel_T_1, 52, 52) @[ToAXI4.scala 245:58]
    node a_sel_53 = bits(_a_sel_T_1, 53, 53) @[ToAXI4.scala 245:58]
    node a_sel_54 = bits(_a_sel_T_1, 54, 54) @[ToAXI4.scala 245:58]
    node a_sel_55 = bits(_a_sel_T_1, 55, 55) @[ToAXI4.scala 245:58]
    node a_sel_56 = bits(_a_sel_T_1, 56, 56) @[ToAXI4.scala 245:58]
    node a_sel_57 = bits(_a_sel_T_1, 57, 57) @[ToAXI4.scala 245:58]
    node a_sel_58 = bits(_a_sel_T_1, 58, 58) @[ToAXI4.scala 245:58]
    node a_sel_59 = bits(_a_sel_T_1, 59, 59) @[ToAXI4.scala 245:58]
    node a_sel_60 = bits(_a_sel_T_1, 60, 60) @[ToAXI4.scala 245:58]
    node a_sel_61 = bits(_a_sel_T_1, 61, 61) @[ToAXI4.scala 245:58]
    node a_sel_62 = bits(_a_sel_T_1, 62, 62) @[ToAXI4.scala 245:58]
    node a_sel_63 = bits(_a_sel_T_1, 63, 63) @[ToAXI4.scala 245:58]
    node a_sel_64 = bits(_a_sel_T_1, 64, 64) @[ToAXI4.scala 245:58]
    node a_sel_65 = bits(_a_sel_T_1, 65, 65) @[ToAXI4.scala 245:58]
    node _d_sel_T = mux(r_wins, x1.r.bits.id, x1.b.bits.id) @[ToAXI4.scala 246:31]
    node d_sel_shiftAmount = bits(_d_sel_T, 6, 0) @[OneHot.scala 63:49]
    node _d_sel_T_1 = dshl(UInt<1>("h1"), d_sel_shiftAmount) @[OneHot.scala 64:12]
    node _d_sel_T_2 = bits(_d_sel_T_1, 65, 0) @[OneHot.scala 64:27]
    node d_sel_0 = bits(_d_sel_T_2, 0, 0) @[ToAXI4.scala 246:93]
    node d_sel_1 = bits(_d_sel_T_2, 1, 1) @[ToAXI4.scala 246:93]
    node d_sel_2 = bits(_d_sel_T_2, 2, 2) @[ToAXI4.scala 246:93]
    node d_sel_3 = bits(_d_sel_T_2, 3, 3) @[ToAXI4.scala 246:93]
    node d_sel_4 = bits(_d_sel_T_2, 4, 4) @[ToAXI4.scala 246:93]
    node d_sel_5 = bits(_d_sel_T_2, 5, 5) @[ToAXI4.scala 246:93]
    node d_sel_6 = bits(_d_sel_T_2, 6, 6) @[ToAXI4.scala 246:93]
    node d_sel_7 = bits(_d_sel_T_2, 7, 7) @[ToAXI4.scala 246:93]
    node d_sel_8 = bits(_d_sel_T_2, 8, 8) @[ToAXI4.scala 246:93]
    node d_sel_9 = bits(_d_sel_T_2, 9, 9) @[ToAXI4.scala 246:93]
    node d_sel_10 = bits(_d_sel_T_2, 10, 10) @[ToAXI4.scala 246:93]
    node d_sel_11 = bits(_d_sel_T_2, 11, 11) @[ToAXI4.scala 246:93]
    node d_sel_12 = bits(_d_sel_T_2, 12, 12) @[ToAXI4.scala 246:93]
    node d_sel_13 = bits(_d_sel_T_2, 13, 13) @[ToAXI4.scala 246:93]
    node d_sel_14 = bits(_d_sel_T_2, 14, 14) @[ToAXI4.scala 246:93]
    node d_sel_15 = bits(_d_sel_T_2, 15, 15) @[ToAXI4.scala 246:93]
    node d_sel_16 = bits(_d_sel_T_2, 16, 16) @[ToAXI4.scala 246:93]
    node d_sel_17 = bits(_d_sel_T_2, 17, 17) @[ToAXI4.scala 246:93]
    node d_sel_18 = bits(_d_sel_T_2, 18, 18) @[ToAXI4.scala 246:93]
    node d_sel_19 = bits(_d_sel_T_2, 19, 19) @[ToAXI4.scala 246:93]
    node d_sel_20 = bits(_d_sel_T_2, 20, 20) @[ToAXI4.scala 246:93]
    node d_sel_21 = bits(_d_sel_T_2, 21, 21) @[ToAXI4.scala 246:93]
    node d_sel_22 = bits(_d_sel_T_2, 22, 22) @[ToAXI4.scala 246:93]
    node d_sel_23 = bits(_d_sel_T_2, 23, 23) @[ToAXI4.scala 246:93]
    node d_sel_24 = bits(_d_sel_T_2, 24, 24) @[ToAXI4.scala 246:93]
    node d_sel_25 = bits(_d_sel_T_2, 25, 25) @[ToAXI4.scala 246:93]
    node d_sel_26 = bits(_d_sel_T_2, 26, 26) @[ToAXI4.scala 246:93]
    node d_sel_27 = bits(_d_sel_T_2, 27, 27) @[ToAXI4.scala 246:93]
    node d_sel_28 = bits(_d_sel_T_2, 28, 28) @[ToAXI4.scala 246:93]
    node d_sel_29 = bits(_d_sel_T_2, 29, 29) @[ToAXI4.scala 246:93]
    node d_sel_30 = bits(_d_sel_T_2, 30, 30) @[ToAXI4.scala 246:93]
    node d_sel_31 = bits(_d_sel_T_2, 31, 31) @[ToAXI4.scala 246:93]
    node d_sel_32 = bits(_d_sel_T_2, 32, 32) @[ToAXI4.scala 246:93]
    node d_sel_33 = bits(_d_sel_T_2, 33, 33) @[ToAXI4.scala 246:93]
    node d_sel_34 = bits(_d_sel_T_2, 34, 34) @[ToAXI4.scala 246:93]
    node d_sel_35 = bits(_d_sel_T_2, 35, 35) @[ToAXI4.scala 246:93]
    node d_sel_36 = bits(_d_sel_T_2, 36, 36) @[ToAXI4.scala 246:93]
    node d_sel_37 = bits(_d_sel_T_2, 37, 37) @[ToAXI4.scala 246:93]
    node d_sel_38 = bits(_d_sel_T_2, 38, 38) @[ToAXI4.scala 246:93]
    node d_sel_39 = bits(_d_sel_T_2, 39, 39) @[ToAXI4.scala 246:93]
    node d_sel_40 = bits(_d_sel_T_2, 40, 40) @[ToAXI4.scala 246:93]
    node d_sel_41 = bits(_d_sel_T_2, 41, 41) @[ToAXI4.scala 246:93]
    node d_sel_42 = bits(_d_sel_T_2, 42, 42) @[ToAXI4.scala 246:93]
    node d_sel_43 = bits(_d_sel_T_2, 43, 43) @[ToAXI4.scala 246:93]
    node d_sel_44 = bits(_d_sel_T_2, 44, 44) @[ToAXI4.scala 246:93]
    node d_sel_45 = bits(_d_sel_T_2, 45, 45) @[ToAXI4.scala 246:93]
    node d_sel_46 = bits(_d_sel_T_2, 46, 46) @[ToAXI4.scala 246:93]
    node d_sel_47 = bits(_d_sel_T_2, 47, 47) @[ToAXI4.scala 246:93]
    node d_sel_48 = bits(_d_sel_T_2, 48, 48) @[ToAXI4.scala 246:93]
    node d_sel_49 = bits(_d_sel_T_2, 49, 49) @[ToAXI4.scala 246:93]
    node d_sel_50 = bits(_d_sel_T_2, 50, 50) @[ToAXI4.scala 246:93]
    node d_sel_51 = bits(_d_sel_T_2, 51, 51) @[ToAXI4.scala 246:93]
    node d_sel_52 = bits(_d_sel_T_2, 52, 52) @[ToAXI4.scala 246:93]
    node d_sel_53 = bits(_d_sel_T_2, 53, 53) @[ToAXI4.scala 246:93]
    node d_sel_54 = bits(_d_sel_T_2, 54, 54) @[ToAXI4.scala 246:93]
    node d_sel_55 = bits(_d_sel_T_2, 55, 55) @[ToAXI4.scala 246:93]
    node d_sel_56 = bits(_d_sel_T_2, 56, 56) @[ToAXI4.scala 246:93]
    node d_sel_57 = bits(_d_sel_T_2, 57, 57) @[ToAXI4.scala 246:93]
    node d_sel_58 = bits(_d_sel_T_2, 58, 58) @[ToAXI4.scala 246:93]
    node d_sel_59 = bits(_d_sel_T_2, 59, 59) @[ToAXI4.scala 246:93]
    node d_sel_60 = bits(_d_sel_T_2, 60, 60) @[ToAXI4.scala 246:93]
    node d_sel_61 = bits(_d_sel_T_2, 61, 61) @[ToAXI4.scala 246:93]
    node d_sel_62 = bits(_d_sel_T_2, 62, 62) @[ToAXI4.scala 246:93]
    node d_sel_63 = bits(_d_sel_T_2, 63, 63) @[ToAXI4.scala 246:93]
    node d_sel_64 = bits(_d_sel_T_2, 64, 64) @[ToAXI4.scala 246:93]
    node d_sel_65 = bits(_d_sel_T_2, 65, 65) @[ToAXI4.scala 246:93]
    node d_last = mux(r_wins, x1.r.bits.last, UInt<1>("h1")) @[ToAXI4.scala 247:23]
    reg count_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write) @[ToAXI4.scala 258:24]
    node idle = eq(count_1, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc = and(a_sel_0, _inc_T) @[ToAXI4.scala 261:22]
    node _dec_T = and(d_sel_0, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_1 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec = and(_dec_T, _dec_T_1) @[ToAXI4.scala 262:32]
    node _count_T_1 = add(count_1, inc) @[ToAXI4.scala 263:24]
    node _count_T_2 = tail(_count_T_1, 1) @[ToAXI4.scala 263:24]
    node _count_T_3 = sub(_count_T_2, dec) @[ToAXI4.scala 263:37]
    node _count_T_4 = tail(_count_T_3, 1) @[ToAXI4.scala 263:37]
    count_1 <= _count_T_4 @[ToAXI4.scala 263:15]
    node _T_6 = eq(dec, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_7 = neq(count_1, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_8 = or(_T_6, _T_7) @[ToAXI4.scala 265:22]
    node _T_9 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_10 : @[ToAXI4.scala 265:16]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_11 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf @[ToAXI4.scala 265:16]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert @[ToAXI4.scala 265:16]
    node _T_12 = eq(inc, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_13 = neq(count_1, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_14 = or(_T_12, _T_13) @[ToAXI4.scala 266:22]
    node _T_15 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_16 : @[ToAXI4.scala 266:16]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_17 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_1 @[ToAXI4.scala 266:16]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_1 @[ToAXI4.scala 266:16]
    when inc : @[ToAXI4.scala 268:20]
      write <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_0_T = eq(idle, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_0_T_1 = and(_idStall_0_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_0_T_2 = eq(count_1, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_0_T_3 = or(_idStall_0_T_1, _idStall_0_T_2) @[ToAXI4.scala 271:34]
    idStall[0] <= _idStall_0_T_3 @[ToAXI4.scala 271:11]
    reg count_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_1) @[ToAXI4.scala 258:24]
    node idle_1 = eq(count_2, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_1 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_1 = and(a_sel_1, _inc_T_1) @[ToAXI4.scala 261:22]
    node _dec_T_2 = and(d_sel_1, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_3 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_1 = and(_dec_T_2, _dec_T_3) @[ToAXI4.scala 262:32]
    node _count_T_5 = add(count_2, inc_1) @[ToAXI4.scala 263:24]
    node _count_T_6 = tail(_count_T_5, 1) @[ToAXI4.scala 263:24]
    node _count_T_7 = sub(_count_T_6, dec_1) @[ToAXI4.scala 263:37]
    node _count_T_8 = tail(_count_T_7, 1) @[ToAXI4.scala 263:37]
    count_2 <= _count_T_8 @[ToAXI4.scala 263:15]
    node _T_18 = eq(dec_1, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_19 = neq(count_2, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_20 = or(_T_18, _T_19) @[ToAXI4.scala 265:22]
    node _T_21 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_22 : @[ToAXI4.scala 265:16]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_23 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_2 @[ToAXI4.scala 265:16]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_2 @[ToAXI4.scala 265:16]
    node _T_24 = eq(inc_1, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_25 = neq(count_2, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_26 = or(_T_24, _T_25) @[ToAXI4.scala 266:22]
    node _T_27 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_28 : @[ToAXI4.scala 266:16]
      node _T_29 = eq(_T_26, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_29 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_3 @[ToAXI4.scala 266:16]
      assert(clock, _T_26, UInt<1>("h1"), "") : assert_3 @[ToAXI4.scala 266:16]
    when inc_1 : @[ToAXI4.scala 268:20]
      write_1 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_1_T = eq(idle_1, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_1_T_1 = and(_idStall_1_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_1_T_2 = eq(count_2, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_1_T_3 = or(_idStall_1_T_1, _idStall_1_T_2) @[ToAXI4.scala 271:34]
    idStall[1] <= _idStall_1_T_3 @[ToAXI4.scala 271:11]
    reg count_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_2) @[ToAXI4.scala 258:24]
    node idle_2 = eq(count_3, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_2 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_2 = and(a_sel_2, _inc_T_2) @[ToAXI4.scala 261:22]
    node _dec_T_4 = and(d_sel_2, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_5 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_2 = and(_dec_T_4, _dec_T_5) @[ToAXI4.scala 262:32]
    node _count_T_9 = add(count_3, inc_2) @[ToAXI4.scala 263:24]
    node _count_T_10 = tail(_count_T_9, 1) @[ToAXI4.scala 263:24]
    node _count_T_11 = sub(_count_T_10, dec_2) @[ToAXI4.scala 263:37]
    node _count_T_12 = tail(_count_T_11, 1) @[ToAXI4.scala 263:37]
    count_3 <= _count_T_12 @[ToAXI4.scala 263:15]
    node _T_30 = eq(dec_2, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_31 = neq(count_3, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_32 = or(_T_30, _T_31) @[ToAXI4.scala 265:22]
    node _T_33 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_34 : @[ToAXI4.scala 265:16]
      node _T_35 = eq(_T_32, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_35 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_4 @[ToAXI4.scala 265:16]
      assert(clock, _T_32, UInt<1>("h1"), "") : assert_4 @[ToAXI4.scala 265:16]
    node _T_36 = eq(inc_2, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_37 = neq(count_3, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_38 = or(_T_36, _T_37) @[ToAXI4.scala 266:22]
    node _T_39 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_40 : @[ToAXI4.scala 266:16]
      node _T_41 = eq(_T_38, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_41 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_5 @[ToAXI4.scala 266:16]
      assert(clock, _T_38, UInt<1>("h1"), "") : assert_5 @[ToAXI4.scala 266:16]
    when inc_2 : @[ToAXI4.scala 268:20]
      write_2 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_2_T = eq(idle_2, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_2_T_1 = and(_idStall_2_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_2_T_2 = eq(count_3, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_2_T_3 = or(_idStall_2_T_1, _idStall_2_T_2) @[ToAXI4.scala 271:34]
    idStall[2] <= _idStall_2_T_3 @[ToAXI4.scala 271:11]
    reg count_4 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_3) @[ToAXI4.scala 258:24]
    node idle_3 = eq(count_4, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_3 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_3 = and(a_sel_3, _inc_T_3) @[ToAXI4.scala 261:22]
    node _dec_T_6 = and(d_sel_3, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_7 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_3 = and(_dec_T_6, _dec_T_7) @[ToAXI4.scala 262:32]
    node _count_T_13 = add(count_4, inc_3) @[ToAXI4.scala 263:24]
    node _count_T_14 = tail(_count_T_13, 1) @[ToAXI4.scala 263:24]
    node _count_T_15 = sub(_count_T_14, dec_3) @[ToAXI4.scala 263:37]
    node _count_T_16 = tail(_count_T_15, 1) @[ToAXI4.scala 263:37]
    count_4 <= _count_T_16 @[ToAXI4.scala 263:15]
    node _T_42 = eq(dec_3, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_43 = neq(count_4, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_44 = or(_T_42, _T_43) @[ToAXI4.scala 265:22]
    node _T_45 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_46 : @[ToAXI4.scala 265:16]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_47 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_6 @[ToAXI4.scala 265:16]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_6 @[ToAXI4.scala 265:16]
    node _T_48 = eq(inc_3, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_49 = neq(count_4, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_50 = or(_T_48, _T_49) @[ToAXI4.scala 266:22]
    node _T_51 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_52 = eq(_T_51, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_52 : @[ToAXI4.scala 266:16]
      node _T_53 = eq(_T_50, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_53 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_7 @[ToAXI4.scala 266:16]
      assert(clock, _T_50, UInt<1>("h1"), "") : assert_7 @[ToAXI4.scala 266:16]
    when inc_3 : @[ToAXI4.scala 268:20]
      write_3 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_3_T = eq(idle_3, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_3_T_1 = and(_idStall_3_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_3_T_2 = eq(count_4, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_3_T_3 = or(_idStall_3_T_1, _idStall_3_T_2) @[ToAXI4.scala 271:34]
    idStall[3] <= _idStall_3_T_3 @[ToAXI4.scala 271:11]
    reg count_5 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_4 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_4) @[ToAXI4.scala 258:24]
    node idle_4 = eq(count_5, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_4 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_4 = and(a_sel_4, _inc_T_4) @[ToAXI4.scala 261:22]
    node _dec_T_8 = and(d_sel_4, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_9 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_4 = and(_dec_T_8, _dec_T_9) @[ToAXI4.scala 262:32]
    node _count_T_17 = add(count_5, inc_4) @[ToAXI4.scala 263:24]
    node _count_T_18 = tail(_count_T_17, 1) @[ToAXI4.scala 263:24]
    node _count_T_19 = sub(_count_T_18, dec_4) @[ToAXI4.scala 263:37]
    node _count_T_20 = tail(_count_T_19, 1) @[ToAXI4.scala 263:37]
    count_5 <= _count_T_20 @[ToAXI4.scala 263:15]
    node _T_54 = eq(dec_4, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_55 = neq(count_5, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_56 = or(_T_54, _T_55) @[ToAXI4.scala 265:22]
    node _T_57 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_58 : @[ToAXI4.scala 265:16]
      node _T_59 = eq(_T_56, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_59 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_8 @[ToAXI4.scala 265:16]
      assert(clock, _T_56, UInt<1>("h1"), "") : assert_8 @[ToAXI4.scala 265:16]
    node _T_60 = eq(inc_4, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_61 = neq(count_5, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_62 = or(_T_60, _T_61) @[ToAXI4.scala 266:22]
    node _T_63 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_64 = eq(_T_63, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_64 : @[ToAXI4.scala 266:16]
      node _T_65 = eq(_T_62, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_65 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_9 @[ToAXI4.scala 266:16]
      assert(clock, _T_62, UInt<1>("h1"), "") : assert_9 @[ToAXI4.scala 266:16]
    when inc_4 : @[ToAXI4.scala 268:20]
      write_4 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_4_T = eq(idle_4, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_4_T_1 = and(_idStall_4_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_4_T_2 = eq(count_5, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_4_T_3 = or(_idStall_4_T_1, _idStall_4_T_2) @[ToAXI4.scala 271:34]
    idStall[4] <= _idStall_4_T_3 @[ToAXI4.scala 271:11]
    reg count_6 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_5 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_5) @[ToAXI4.scala 258:24]
    node idle_5 = eq(count_6, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_5 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_5 = and(a_sel_5, _inc_T_5) @[ToAXI4.scala 261:22]
    node _dec_T_10 = and(d_sel_5, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_11 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_5 = and(_dec_T_10, _dec_T_11) @[ToAXI4.scala 262:32]
    node _count_T_21 = add(count_6, inc_5) @[ToAXI4.scala 263:24]
    node _count_T_22 = tail(_count_T_21, 1) @[ToAXI4.scala 263:24]
    node _count_T_23 = sub(_count_T_22, dec_5) @[ToAXI4.scala 263:37]
    node _count_T_24 = tail(_count_T_23, 1) @[ToAXI4.scala 263:37]
    count_6 <= _count_T_24 @[ToAXI4.scala 263:15]
    node _T_66 = eq(dec_5, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_67 = neq(count_6, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_68 = or(_T_66, _T_67) @[ToAXI4.scala 265:22]
    node _T_69 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_70 = eq(_T_69, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_70 : @[ToAXI4.scala 265:16]
      node _T_71 = eq(_T_68, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_71 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_10 @[ToAXI4.scala 265:16]
      assert(clock, _T_68, UInt<1>("h1"), "") : assert_10 @[ToAXI4.scala 265:16]
    node _T_72 = eq(inc_5, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_73 = neq(count_6, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_74 = or(_T_72, _T_73) @[ToAXI4.scala 266:22]
    node _T_75 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_76 = eq(_T_75, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_76 : @[ToAXI4.scala 266:16]
      node _T_77 = eq(_T_74, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_77 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_11 @[ToAXI4.scala 266:16]
      assert(clock, _T_74, UInt<1>("h1"), "") : assert_11 @[ToAXI4.scala 266:16]
    when inc_5 : @[ToAXI4.scala 268:20]
      write_5 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_5_T = eq(idle_5, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_5_T_1 = and(_idStall_5_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_5_T_2 = eq(count_6, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_5_T_3 = or(_idStall_5_T_1, _idStall_5_T_2) @[ToAXI4.scala 271:34]
    idStall[5] <= _idStall_5_T_3 @[ToAXI4.scala 271:11]
    reg count_7 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_6 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_6) @[ToAXI4.scala 258:24]
    node idle_6 = eq(count_7, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_6 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_6 = and(a_sel_6, _inc_T_6) @[ToAXI4.scala 261:22]
    node _dec_T_12 = and(d_sel_6, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_13 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_6 = and(_dec_T_12, _dec_T_13) @[ToAXI4.scala 262:32]
    node _count_T_25 = add(count_7, inc_6) @[ToAXI4.scala 263:24]
    node _count_T_26 = tail(_count_T_25, 1) @[ToAXI4.scala 263:24]
    node _count_T_27 = sub(_count_T_26, dec_6) @[ToAXI4.scala 263:37]
    node _count_T_28 = tail(_count_T_27, 1) @[ToAXI4.scala 263:37]
    count_7 <= _count_T_28 @[ToAXI4.scala 263:15]
    node _T_78 = eq(dec_6, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_79 = neq(count_7, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_80 = or(_T_78, _T_79) @[ToAXI4.scala 265:22]
    node _T_81 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_82 = eq(_T_81, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_82 : @[ToAXI4.scala 265:16]
      node _T_83 = eq(_T_80, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_83 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_12 @[ToAXI4.scala 265:16]
      assert(clock, _T_80, UInt<1>("h1"), "") : assert_12 @[ToAXI4.scala 265:16]
    node _T_84 = eq(inc_6, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_85 = neq(count_7, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_86 = or(_T_84, _T_85) @[ToAXI4.scala 266:22]
    node _T_87 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_88 = eq(_T_87, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_88 : @[ToAXI4.scala 266:16]
      node _T_89 = eq(_T_86, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_89 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_13 @[ToAXI4.scala 266:16]
      assert(clock, _T_86, UInt<1>("h1"), "") : assert_13 @[ToAXI4.scala 266:16]
    when inc_6 : @[ToAXI4.scala 268:20]
      write_6 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_6_T = eq(idle_6, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_6_T_1 = and(_idStall_6_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_6_T_2 = eq(count_7, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_6_T_3 = or(_idStall_6_T_1, _idStall_6_T_2) @[ToAXI4.scala 271:34]
    idStall[6] <= _idStall_6_T_3 @[ToAXI4.scala 271:11]
    reg count_8 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_7) @[ToAXI4.scala 258:24]
    node idle_7 = eq(count_8, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_7 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_7 = and(a_sel_7, _inc_T_7) @[ToAXI4.scala 261:22]
    node _dec_T_14 = and(d_sel_7, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_15 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_7 = and(_dec_T_14, _dec_T_15) @[ToAXI4.scala 262:32]
    node _count_T_29 = add(count_8, inc_7) @[ToAXI4.scala 263:24]
    node _count_T_30 = tail(_count_T_29, 1) @[ToAXI4.scala 263:24]
    node _count_T_31 = sub(_count_T_30, dec_7) @[ToAXI4.scala 263:37]
    node _count_T_32 = tail(_count_T_31, 1) @[ToAXI4.scala 263:37]
    count_8 <= _count_T_32 @[ToAXI4.scala 263:15]
    node _T_90 = eq(dec_7, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_91 = neq(count_8, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_92 = or(_T_90, _T_91) @[ToAXI4.scala 265:22]
    node _T_93 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_94 = eq(_T_93, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_94 : @[ToAXI4.scala 265:16]
      node _T_95 = eq(_T_92, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_95 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_14 @[ToAXI4.scala 265:16]
      assert(clock, _T_92, UInt<1>("h1"), "") : assert_14 @[ToAXI4.scala 265:16]
    node _T_96 = eq(inc_7, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_97 = neq(count_8, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_98 = or(_T_96, _T_97) @[ToAXI4.scala 266:22]
    node _T_99 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_100 = eq(_T_99, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_100 : @[ToAXI4.scala 266:16]
      node _T_101 = eq(_T_98, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_101 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_15 @[ToAXI4.scala 266:16]
      assert(clock, _T_98, UInt<1>("h1"), "") : assert_15 @[ToAXI4.scala 266:16]
    when inc_7 : @[ToAXI4.scala 268:20]
      write_7 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_7_T = eq(idle_7, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_7_T_1 = and(_idStall_7_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_7_T_2 = eq(count_8, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_7_T_3 = or(_idStall_7_T_1, _idStall_7_T_2) @[ToAXI4.scala 271:34]
    idStall[7] <= _idStall_7_T_3 @[ToAXI4.scala 271:11]
    reg count_9 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_8 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_8) @[ToAXI4.scala 258:24]
    node idle_8 = eq(count_9, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_8 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_8 = and(a_sel_8, _inc_T_8) @[ToAXI4.scala 261:22]
    node _dec_T_16 = and(d_sel_8, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_17 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_8 = and(_dec_T_16, _dec_T_17) @[ToAXI4.scala 262:32]
    node _count_T_33 = add(count_9, inc_8) @[ToAXI4.scala 263:24]
    node _count_T_34 = tail(_count_T_33, 1) @[ToAXI4.scala 263:24]
    node _count_T_35 = sub(_count_T_34, dec_8) @[ToAXI4.scala 263:37]
    node _count_T_36 = tail(_count_T_35, 1) @[ToAXI4.scala 263:37]
    count_9 <= _count_T_36 @[ToAXI4.scala 263:15]
    node _T_102 = eq(dec_8, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_103 = neq(count_9, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_104 = or(_T_102, _T_103) @[ToAXI4.scala 265:22]
    node _T_105 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_106 = eq(_T_105, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_106 : @[ToAXI4.scala 265:16]
      node _T_107 = eq(_T_104, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_107 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_16 @[ToAXI4.scala 265:16]
      assert(clock, _T_104, UInt<1>("h1"), "") : assert_16 @[ToAXI4.scala 265:16]
    node _T_108 = eq(inc_8, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_109 = neq(count_9, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_110 = or(_T_108, _T_109) @[ToAXI4.scala 266:22]
    node _T_111 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_112 = eq(_T_111, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_112 : @[ToAXI4.scala 266:16]
      node _T_113 = eq(_T_110, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_113 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_17 @[ToAXI4.scala 266:16]
      assert(clock, _T_110, UInt<1>("h1"), "") : assert_17 @[ToAXI4.scala 266:16]
    when inc_8 : @[ToAXI4.scala 268:20]
      write_8 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_8_T = eq(idle_8, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_8_T_1 = and(_idStall_8_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_8_T_2 = eq(count_9, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_8_T_3 = or(_idStall_8_T_1, _idStall_8_T_2) @[ToAXI4.scala 271:34]
    idStall[8] <= _idStall_8_T_3 @[ToAXI4.scala 271:11]
    reg count_10 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_9) @[ToAXI4.scala 258:24]
    node idle_9 = eq(count_10, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_9 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_9 = and(a_sel_9, _inc_T_9) @[ToAXI4.scala 261:22]
    node _dec_T_18 = and(d_sel_9, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_19 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_9 = and(_dec_T_18, _dec_T_19) @[ToAXI4.scala 262:32]
    node _count_T_37 = add(count_10, inc_9) @[ToAXI4.scala 263:24]
    node _count_T_38 = tail(_count_T_37, 1) @[ToAXI4.scala 263:24]
    node _count_T_39 = sub(_count_T_38, dec_9) @[ToAXI4.scala 263:37]
    node _count_T_40 = tail(_count_T_39, 1) @[ToAXI4.scala 263:37]
    count_10 <= _count_T_40 @[ToAXI4.scala 263:15]
    node _T_114 = eq(dec_9, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_115 = neq(count_10, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_116 = or(_T_114, _T_115) @[ToAXI4.scala 265:22]
    node _T_117 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_118 = eq(_T_117, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_118 : @[ToAXI4.scala 265:16]
      node _T_119 = eq(_T_116, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_119 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_18 @[ToAXI4.scala 265:16]
      assert(clock, _T_116, UInt<1>("h1"), "") : assert_18 @[ToAXI4.scala 265:16]
    node _T_120 = eq(inc_9, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_121 = neq(count_10, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_122 = or(_T_120, _T_121) @[ToAXI4.scala 266:22]
    node _T_123 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_124 = eq(_T_123, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_124 : @[ToAXI4.scala 266:16]
      node _T_125 = eq(_T_122, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_125 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_19 @[ToAXI4.scala 266:16]
      assert(clock, _T_122, UInt<1>("h1"), "") : assert_19 @[ToAXI4.scala 266:16]
    when inc_9 : @[ToAXI4.scala 268:20]
      write_9 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_9_T = eq(idle_9, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_9_T_1 = and(_idStall_9_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_9_T_2 = eq(count_10, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_9_T_3 = or(_idStall_9_T_1, _idStall_9_T_2) @[ToAXI4.scala 271:34]
    idStall[9] <= _idStall_9_T_3 @[ToAXI4.scala 271:11]
    reg count_11 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_10) @[ToAXI4.scala 258:24]
    node idle_10 = eq(count_11, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_10 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_10 = and(a_sel_10, _inc_T_10) @[ToAXI4.scala 261:22]
    node _dec_T_20 = and(d_sel_10, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_21 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_10 = and(_dec_T_20, _dec_T_21) @[ToAXI4.scala 262:32]
    node _count_T_41 = add(count_11, inc_10) @[ToAXI4.scala 263:24]
    node _count_T_42 = tail(_count_T_41, 1) @[ToAXI4.scala 263:24]
    node _count_T_43 = sub(_count_T_42, dec_10) @[ToAXI4.scala 263:37]
    node _count_T_44 = tail(_count_T_43, 1) @[ToAXI4.scala 263:37]
    count_11 <= _count_T_44 @[ToAXI4.scala 263:15]
    node _T_126 = eq(dec_10, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_127 = neq(count_11, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_128 = or(_T_126, _T_127) @[ToAXI4.scala 265:22]
    node _T_129 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_130 = eq(_T_129, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_130 : @[ToAXI4.scala 265:16]
      node _T_131 = eq(_T_128, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_131 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_20 @[ToAXI4.scala 265:16]
      assert(clock, _T_128, UInt<1>("h1"), "") : assert_20 @[ToAXI4.scala 265:16]
    node _T_132 = eq(inc_10, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_133 = neq(count_11, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_134 = or(_T_132, _T_133) @[ToAXI4.scala 266:22]
    node _T_135 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_136 = eq(_T_135, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_136 : @[ToAXI4.scala 266:16]
      node _T_137 = eq(_T_134, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_137 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_21 @[ToAXI4.scala 266:16]
      assert(clock, _T_134, UInt<1>("h1"), "") : assert_21 @[ToAXI4.scala 266:16]
    when inc_10 : @[ToAXI4.scala 268:20]
      write_10 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_10_T = eq(idle_10, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_10_T_1 = and(_idStall_10_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_10_T_2 = eq(count_11, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_10_T_3 = or(_idStall_10_T_1, _idStall_10_T_2) @[ToAXI4.scala 271:34]
    idStall[10] <= _idStall_10_T_3 @[ToAXI4.scala 271:11]
    reg count_12 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_11 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_11) @[ToAXI4.scala 258:24]
    node idle_11 = eq(count_12, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_11 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_11 = and(a_sel_11, _inc_T_11) @[ToAXI4.scala 261:22]
    node _dec_T_22 = and(d_sel_11, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_23 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_11 = and(_dec_T_22, _dec_T_23) @[ToAXI4.scala 262:32]
    node _count_T_45 = add(count_12, inc_11) @[ToAXI4.scala 263:24]
    node _count_T_46 = tail(_count_T_45, 1) @[ToAXI4.scala 263:24]
    node _count_T_47 = sub(_count_T_46, dec_11) @[ToAXI4.scala 263:37]
    node _count_T_48 = tail(_count_T_47, 1) @[ToAXI4.scala 263:37]
    count_12 <= _count_T_48 @[ToAXI4.scala 263:15]
    node _T_138 = eq(dec_11, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_139 = neq(count_12, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_140 = or(_T_138, _T_139) @[ToAXI4.scala 265:22]
    node _T_141 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_142 = eq(_T_141, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_142 : @[ToAXI4.scala 265:16]
      node _T_143 = eq(_T_140, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_143 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_22 @[ToAXI4.scala 265:16]
      assert(clock, _T_140, UInt<1>("h1"), "") : assert_22 @[ToAXI4.scala 265:16]
    node _T_144 = eq(inc_11, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_145 = neq(count_12, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_146 = or(_T_144, _T_145) @[ToAXI4.scala 266:22]
    node _T_147 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_148 = eq(_T_147, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_148 : @[ToAXI4.scala 266:16]
      node _T_149 = eq(_T_146, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_149 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_23 @[ToAXI4.scala 266:16]
      assert(clock, _T_146, UInt<1>("h1"), "") : assert_23 @[ToAXI4.scala 266:16]
    when inc_11 : @[ToAXI4.scala 268:20]
      write_11 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_11_T = eq(idle_11, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_11_T_1 = and(_idStall_11_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_11_T_2 = eq(count_12, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_11_T_3 = or(_idStall_11_T_1, _idStall_11_T_2) @[ToAXI4.scala 271:34]
    idStall[11] <= _idStall_11_T_3 @[ToAXI4.scala 271:11]
    reg count_13 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_12 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_12) @[ToAXI4.scala 258:24]
    node idle_12 = eq(count_13, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_12 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_12 = and(a_sel_12, _inc_T_12) @[ToAXI4.scala 261:22]
    node _dec_T_24 = and(d_sel_12, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_25 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_12 = and(_dec_T_24, _dec_T_25) @[ToAXI4.scala 262:32]
    node _count_T_49 = add(count_13, inc_12) @[ToAXI4.scala 263:24]
    node _count_T_50 = tail(_count_T_49, 1) @[ToAXI4.scala 263:24]
    node _count_T_51 = sub(_count_T_50, dec_12) @[ToAXI4.scala 263:37]
    node _count_T_52 = tail(_count_T_51, 1) @[ToAXI4.scala 263:37]
    count_13 <= _count_T_52 @[ToAXI4.scala 263:15]
    node _T_150 = eq(dec_12, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_151 = neq(count_13, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_152 = or(_T_150, _T_151) @[ToAXI4.scala 265:22]
    node _T_153 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_154 = eq(_T_153, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_154 : @[ToAXI4.scala 265:16]
      node _T_155 = eq(_T_152, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_155 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_24 @[ToAXI4.scala 265:16]
      assert(clock, _T_152, UInt<1>("h1"), "") : assert_24 @[ToAXI4.scala 265:16]
    node _T_156 = eq(inc_12, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_157 = neq(count_13, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_158 = or(_T_156, _T_157) @[ToAXI4.scala 266:22]
    node _T_159 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_160 = eq(_T_159, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_160 : @[ToAXI4.scala 266:16]
      node _T_161 = eq(_T_158, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_161 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_25 @[ToAXI4.scala 266:16]
      assert(clock, _T_158, UInt<1>("h1"), "") : assert_25 @[ToAXI4.scala 266:16]
    when inc_12 : @[ToAXI4.scala 268:20]
      write_12 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_12_T = eq(idle_12, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_12_T_1 = and(_idStall_12_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_12_T_2 = eq(count_13, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_12_T_3 = or(_idStall_12_T_1, _idStall_12_T_2) @[ToAXI4.scala 271:34]
    idStall[12] <= _idStall_12_T_3 @[ToAXI4.scala 271:11]
    reg count_14 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_13 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_13) @[ToAXI4.scala 258:24]
    node idle_13 = eq(count_14, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_13 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_13 = and(a_sel_13, _inc_T_13) @[ToAXI4.scala 261:22]
    node _dec_T_26 = and(d_sel_13, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_27 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_13 = and(_dec_T_26, _dec_T_27) @[ToAXI4.scala 262:32]
    node _count_T_53 = add(count_14, inc_13) @[ToAXI4.scala 263:24]
    node _count_T_54 = tail(_count_T_53, 1) @[ToAXI4.scala 263:24]
    node _count_T_55 = sub(_count_T_54, dec_13) @[ToAXI4.scala 263:37]
    node _count_T_56 = tail(_count_T_55, 1) @[ToAXI4.scala 263:37]
    count_14 <= _count_T_56 @[ToAXI4.scala 263:15]
    node _T_162 = eq(dec_13, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_163 = neq(count_14, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_164 = or(_T_162, _T_163) @[ToAXI4.scala 265:22]
    node _T_165 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_166 = eq(_T_165, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_166 : @[ToAXI4.scala 265:16]
      node _T_167 = eq(_T_164, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_167 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_26 @[ToAXI4.scala 265:16]
      assert(clock, _T_164, UInt<1>("h1"), "") : assert_26 @[ToAXI4.scala 265:16]
    node _T_168 = eq(inc_13, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_169 = neq(count_14, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_170 = or(_T_168, _T_169) @[ToAXI4.scala 266:22]
    node _T_171 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_172 = eq(_T_171, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_172 : @[ToAXI4.scala 266:16]
      node _T_173 = eq(_T_170, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_173 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_27 @[ToAXI4.scala 266:16]
      assert(clock, _T_170, UInt<1>("h1"), "") : assert_27 @[ToAXI4.scala 266:16]
    when inc_13 : @[ToAXI4.scala 268:20]
      write_13 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_13_T = eq(idle_13, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_13_T_1 = and(_idStall_13_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_13_T_2 = eq(count_14, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_13_T_3 = or(_idStall_13_T_1, _idStall_13_T_2) @[ToAXI4.scala 271:34]
    idStall[13] <= _idStall_13_T_3 @[ToAXI4.scala 271:11]
    reg count_15 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_14 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_14) @[ToAXI4.scala 258:24]
    node idle_14 = eq(count_15, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_14 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_14 = and(a_sel_14, _inc_T_14) @[ToAXI4.scala 261:22]
    node _dec_T_28 = and(d_sel_14, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_29 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_14 = and(_dec_T_28, _dec_T_29) @[ToAXI4.scala 262:32]
    node _count_T_57 = add(count_15, inc_14) @[ToAXI4.scala 263:24]
    node _count_T_58 = tail(_count_T_57, 1) @[ToAXI4.scala 263:24]
    node _count_T_59 = sub(_count_T_58, dec_14) @[ToAXI4.scala 263:37]
    node _count_T_60 = tail(_count_T_59, 1) @[ToAXI4.scala 263:37]
    count_15 <= _count_T_60 @[ToAXI4.scala 263:15]
    node _T_174 = eq(dec_14, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_175 = neq(count_15, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_176 = or(_T_174, _T_175) @[ToAXI4.scala 265:22]
    node _T_177 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_178 = eq(_T_177, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_178 : @[ToAXI4.scala 265:16]
      node _T_179 = eq(_T_176, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_179 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_28 @[ToAXI4.scala 265:16]
      assert(clock, _T_176, UInt<1>("h1"), "") : assert_28 @[ToAXI4.scala 265:16]
    node _T_180 = eq(inc_14, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_181 = neq(count_15, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_182 = or(_T_180, _T_181) @[ToAXI4.scala 266:22]
    node _T_183 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_184 = eq(_T_183, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_184 : @[ToAXI4.scala 266:16]
      node _T_185 = eq(_T_182, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_185 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_29 @[ToAXI4.scala 266:16]
      assert(clock, _T_182, UInt<1>("h1"), "") : assert_29 @[ToAXI4.scala 266:16]
    when inc_14 : @[ToAXI4.scala 268:20]
      write_14 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_14_T = eq(idle_14, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_14_T_1 = and(_idStall_14_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_14_T_2 = eq(count_15, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_14_T_3 = or(_idStall_14_T_1, _idStall_14_T_2) @[ToAXI4.scala 271:34]
    idStall[14] <= _idStall_14_T_3 @[ToAXI4.scala 271:11]
    reg count_16 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_15 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_15) @[ToAXI4.scala 258:24]
    node idle_15 = eq(count_16, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_15 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_15 = and(a_sel_15, _inc_T_15) @[ToAXI4.scala 261:22]
    node _dec_T_30 = and(d_sel_15, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_31 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_15 = and(_dec_T_30, _dec_T_31) @[ToAXI4.scala 262:32]
    node _count_T_61 = add(count_16, inc_15) @[ToAXI4.scala 263:24]
    node _count_T_62 = tail(_count_T_61, 1) @[ToAXI4.scala 263:24]
    node _count_T_63 = sub(_count_T_62, dec_15) @[ToAXI4.scala 263:37]
    node _count_T_64 = tail(_count_T_63, 1) @[ToAXI4.scala 263:37]
    count_16 <= _count_T_64 @[ToAXI4.scala 263:15]
    node _T_186 = eq(dec_15, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_187 = neq(count_16, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_188 = or(_T_186, _T_187) @[ToAXI4.scala 265:22]
    node _T_189 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_190 = eq(_T_189, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_190 : @[ToAXI4.scala 265:16]
      node _T_191 = eq(_T_188, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_191 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_30 @[ToAXI4.scala 265:16]
      assert(clock, _T_188, UInt<1>("h1"), "") : assert_30 @[ToAXI4.scala 265:16]
    node _T_192 = eq(inc_15, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_193 = neq(count_16, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_194 = or(_T_192, _T_193) @[ToAXI4.scala 266:22]
    node _T_195 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_196 = eq(_T_195, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_196 : @[ToAXI4.scala 266:16]
      node _T_197 = eq(_T_194, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_197 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_31 @[ToAXI4.scala 266:16]
      assert(clock, _T_194, UInt<1>("h1"), "") : assert_31 @[ToAXI4.scala 266:16]
    when inc_15 : @[ToAXI4.scala 268:20]
      write_15 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_15_T = eq(idle_15, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_15_T_1 = and(_idStall_15_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_15_T_2 = eq(count_16, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_15_T_3 = or(_idStall_15_T_1, _idStall_15_T_2) @[ToAXI4.scala 271:34]
    idStall[15] <= _idStall_15_T_3 @[ToAXI4.scala 271:11]
    reg count_17 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_16 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_16) @[ToAXI4.scala 258:24]
    node idle_16 = eq(count_17, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_16 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_16 = and(a_sel_16, _inc_T_16) @[ToAXI4.scala 261:22]
    node _dec_T_32 = and(d_sel_16, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_33 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_16 = and(_dec_T_32, _dec_T_33) @[ToAXI4.scala 262:32]
    node _count_T_65 = add(count_17, inc_16) @[ToAXI4.scala 263:24]
    node _count_T_66 = tail(_count_T_65, 1) @[ToAXI4.scala 263:24]
    node _count_T_67 = sub(_count_T_66, dec_16) @[ToAXI4.scala 263:37]
    node _count_T_68 = tail(_count_T_67, 1) @[ToAXI4.scala 263:37]
    count_17 <= _count_T_68 @[ToAXI4.scala 263:15]
    node _T_198 = eq(dec_16, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_199 = neq(count_17, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_200 = or(_T_198, _T_199) @[ToAXI4.scala 265:22]
    node _T_201 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_202 = eq(_T_201, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_202 : @[ToAXI4.scala 265:16]
      node _T_203 = eq(_T_200, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_203 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_32 @[ToAXI4.scala 265:16]
      assert(clock, _T_200, UInt<1>("h1"), "") : assert_32 @[ToAXI4.scala 265:16]
    node _T_204 = eq(inc_16, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_205 = neq(count_17, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_206 = or(_T_204, _T_205) @[ToAXI4.scala 266:22]
    node _T_207 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_208 = eq(_T_207, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_208 : @[ToAXI4.scala 266:16]
      node _T_209 = eq(_T_206, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_209 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_33 @[ToAXI4.scala 266:16]
      assert(clock, _T_206, UInt<1>("h1"), "") : assert_33 @[ToAXI4.scala 266:16]
    when inc_16 : @[ToAXI4.scala 268:20]
      write_16 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_16_T = eq(idle_16, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_16_T_1 = and(_idStall_16_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_16_T_2 = eq(count_17, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_16_T_3 = or(_idStall_16_T_1, _idStall_16_T_2) @[ToAXI4.scala 271:34]
    idStall[16] <= _idStall_16_T_3 @[ToAXI4.scala 271:11]
    reg count_18 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_17 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_17) @[ToAXI4.scala 258:24]
    node idle_17 = eq(count_18, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_17 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_17 = and(a_sel_17, _inc_T_17) @[ToAXI4.scala 261:22]
    node _dec_T_34 = and(d_sel_17, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_35 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_17 = and(_dec_T_34, _dec_T_35) @[ToAXI4.scala 262:32]
    node _count_T_69 = add(count_18, inc_17) @[ToAXI4.scala 263:24]
    node _count_T_70 = tail(_count_T_69, 1) @[ToAXI4.scala 263:24]
    node _count_T_71 = sub(_count_T_70, dec_17) @[ToAXI4.scala 263:37]
    node _count_T_72 = tail(_count_T_71, 1) @[ToAXI4.scala 263:37]
    count_18 <= _count_T_72 @[ToAXI4.scala 263:15]
    node _T_210 = eq(dec_17, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_211 = neq(count_18, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_212 = or(_T_210, _T_211) @[ToAXI4.scala 265:22]
    node _T_213 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_214 = eq(_T_213, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_214 : @[ToAXI4.scala 265:16]
      node _T_215 = eq(_T_212, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_215 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_34 @[ToAXI4.scala 265:16]
      assert(clock, _T_212, UInt<1>("h1"), "") : assert_34 @[ToAXI4.scala 265:16]
    node _T_216 = eq(inc_17, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_217 = neq(count_18, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_218 = or(_T_216, _T_217) @[ToAXI4.scala 266:22]
    node _T_219 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_220 = eq(_T_219, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_220 : @[ToAXI4.scala 266:16]
      node _T_221 = eq(_T_218, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_221 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_35 @[ToAXI4.scala 266:16]
      assert(clock, _T_218, UInt<1>("h1"), "") : assert_35 @[ToAXI4.scala 266:16]
    when inc_17 : @[ToAXI4.scala 268:20]
      write_17 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_17_T = eq(idle_17, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_17_T_1 = and(_idStall_17_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_17_T_2 = eq(count_18, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_17_T_3 = or(_idStall_17_T_1, _idStall_17_T_2) @[ToAXI4.scala 271:34]
    idStall[17] <= _idStall_17_T_3 @[ToAXI4.scala 271:11]
    reg count_19 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_18 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_18) @[ToAXI4.scala 258:24]
    node idle_18 = eq(count_19, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_18 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_18 = and(a_sel_18, _inc_T_18) @[ToAXI4.scala 261:22]
    node _dec_T_36 = and(d_sel_18, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_37 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_18 = and(_dec_T_36, _dec_T_37) @[ToAXI4.scala 262:32]
    node _count_T_73 = add(count_19, inc_18) @[ToAXI4.scala 263:24]
    node _count_T_74 = tail(_count_T_73, 1) @[ToAXI4.scala 263:24]
    node _count_T_75 = sub(_count_T_74, dec_18) @[ToAXI4.scala 263:37]
    node _count_T_76 = tail(_count_T_75, 1) @[ToAXI4.scala 263:37]
    count_19 <= _count_T_76 @[ToAXI4.scala 263:15]
    node _T_222 = eq(dec_18, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_223 = neq(count_19, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_224 = or(_T_222, _T_223) @[ToAXI4.scala 265:22]
    node _T_225 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_226 = eq(_T_225, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_226 : @[ToAXI4.scala 265:16]
      node _T_227 = eq(_T_224, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_227 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_36 @[ToAXI4.scala 265:16]
      assert(clock, _T_224, UInt<1>("h1"), "") : assert_36 @[ToAXI4.scala 265:16]
    node _T_228 = eq(inc_18, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_229 = neq(count_19, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_230 = or(_T_228, _T_229) @[ToAXI4.scala 266:22]
    node _T_231 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_232 = eq(_T_231, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_232 : @[ToAXI4.scala 266:16]
      node _T_233 = eq(_T_230, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_233 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_37 @[ToAXI4.scala 266:16]
      assert(clock, _T_230, UInt<1>("h1"), "") : assert_37 @[ToAXI4.scala 266:16]
    when inc_18 : @[ToAXI4.scala 268:20]
      write_18 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_18_T = eq(idle_18, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_18_T_1 = and(_idStall_18_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_18_T_2 = eq(count_19, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_18_T_3 = or(_idStall_18_T_1, _idStall_18_T_2) @[ToAXI4.scala 271:34]
    idStall[18] <= _idStall_18_T_3 @[ToAXI4.scala 271:11]
    reg count_20 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_19 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_19) @[ToAXI4.scala 258:24]
    node idle_19 = eq(count_20, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_19 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_19 = and(a_sel_19, _inc_T_19) @[ToAXI4.scala 261:22]
    node _dec_T_38 = and(d_sel_19, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_39 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_19 = and(_dec_T_38, _dec_T_39) @[ToAXI4.scala 262:32]
    node _count_T_77 = add(count_20, inc_19) @[ToAXI4.scala 263:24]
    node _count_T_78 = tail(_count_T_77, 1) @[ToAXI4.scala 263:24]
    node _count_T_79 = sub(_count_T_78, dec_19) @[ToAXI4.scala 263:37]
    node _count_T_80 = tail(_count_T_79, 1) @[ToAXI4.scala 263:37]
    count_20 <= _count_T_80 @[ToAXI4.scala 263:15]
    node _T_234 = eq(dec_19, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_235 = neq(count_20, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_236 = or(_T_234, _T_235) @[ToAXI4.scala 265:22]
    node _T_237 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_238 = eq(_T_237, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_238 : @[ToAXI4.scala 265:16]
      node _T_239 = eq(_T_236, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_239 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_38 @[ToAXI4.scala 265:16]
      assert(clock, _T_236, UInt<1>("h1"), "") : assert_38 @[ToAXI4.scala 265:16]
    node _T_240 = eq(inc_19, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_241 = neq(count_20, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_242 = or(_T_240, _T_241) @[ToAXI4.scala 266:22]
    node _T_243 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_244 = eq(_T_243, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_244 : @[ToAXI4.scala 266:16]
      node _T_245 = eq(_T_242, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_245 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_39 @[ToAXI4.scala 266:16]
      assert(clock, _T_242, UInt<1>("h1"), "") : assert_39 @[ToAXI4.scala 266:16]
    when inc_19 : @[ToAXI4.scala 268:20]
      write_19 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_19_T = eq(idle_19, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_19_T_1 = and(_idStall_19_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_19_T_2 = eq(count_20, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_19_T_3 = or(_idStall_19_T_1, _idStall_19_T_2) @[ToAXI4.scala 271:34]
    idStall[19] <= _idStall_19_T_3 @[ToAXI4.scala 271:11]
    reg count_21 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_20 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_20) @[ToAXI4.scala 258:24]
    node idle_20 = eq(count_21, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_20 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_20 = and(a_sel_20, _inc_T_20) @[ToAXI4.scala 261:22]
    node _dec_T_40 = and(d_sel_20, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_41 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_20 = and(_dec_T_40, _dec_T_41) @[ToAXI4.scala 262:32]
    node _count_T_81 = add(count_21, inc_20) @[ToAXI4.scala 263:24]
    node _count_T_82 = tail(_count_T_81, 1) @[ToAXI4.scala 263:24]
    node _count_T_83 = sub(_count_T_82, dec_20) @[ToAXI4.scala 263:37]
    node _count_T_84 = tail(_count_T_83, 1) @[ToAXI4.scala 263:37]
    count_21 <= _count_T_84 @[ToAXI4.scala 263:15]
    node _T_246 = eq(dec_20, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_247 = neq(count_21, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_248 = or(_T_246, _T_247) @[ToAXI4.scala 265:22]
    node _T_249 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_250 = eq(_T_249, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_250 : @[ToAXI4.scala 265:16]
      node _T_251 = eq(_T_248, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_251 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_40 @[ToAXI4.scala 265:16]
      assert(clock, _T_248, UInt<1>("h1"), "") : assert_40 @[ToAXI4.scala 265:16]
    node _T_252 = eq(inc_20, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_253 = neq(count_21, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_254 = or(_T_252, _T_253) @[ToAXI4.scala 266:22]
    node _T_255 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_256 = eq(_T_255, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_256 : @[ToAXI4.scala 266:16]
      node _T_257 = eq(_T_254, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_257 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_41 @[ToAXI4.scala 266:16]
      assert(clock, _T_254, UInt<1>("h1"), "") : assert_41 @[ToAXI4.scala 266:16]
    when inc_20 : @[ToAXI4.scala 268:20]
      write_20 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_20_T = eq(idle_20, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_20_T_1 = and(_idStall_20_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_20_T_2 = eq(count_21, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_20_T_3 = or(_idStall_20_T_1, _idStall_20_T_2) @[ToAXI4.scala 271:34]
    idStall[20] <= _idStall_20_T_3 @[ToAXI4.scala 271:11]
    reg count_22 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_21 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_21) @[ToAXI4.scala 258:24]
    node idle_21 = eq(count_22, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_21 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_21 = and(a_sel_21, _inc_T_21) @[ToAXI4.scala 261:22]
    node _dec_T_42 = and(d_sel_21, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_43 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_21 = and(_dec_T_42, _dec_T_43) @[ToAXI4.scala 262:32]
    node _count_T_85 = add(count_22, inc_21) @[ToAXI4.scala 263:24]
    node _count_T_86 = tail(_count_T_85, 1) @[ToAXI4.scala 263:24]
    node _count_T_87 = sub(_count_T_86, dec_21) @[ToAXI4.scala 263:37]
    node _count_T_88 = tail(_count_T_87, 1) @[ToAXI4.scala 263:37]
    count_22 <= _count_T_88 @[ToAXI4.scala 263:15]
    node _T_258 = eq(dec_21, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_259 = neq(count_22, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_260 = or(_T_258, _T_259) @[ToAXI4.scala 265:22]
    node _T_261 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_262 = eq(_T_261, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_262 : @[ToAXI4.scala 265:16]
      node _T_263 = eq(_T_260, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_263 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_42 @[ToAXI4.scala 265:16]
      assert(clock, _T_260, UInt<1>("h1"), "") : assert_42 @[ToAXI4.scala 265:16]
    node _T_264 = eq(inc_21, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_265 = neq(count_22, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_266 = or(_T_264, _T_265) @[ToAXI4.scala 266:22]
    node _T_267 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_268 = eq(_T_267, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_268 : @[ToAXI4.scala 266:16]
      node _T_269 = eq(_T_266, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_269 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_43 @[ToAXI4.scala 266:16]
      assert(clock, _T_266, UInt<1>("h1"), "") : assert_43 @[ToAXI4.scala 266:16]
    when inc_21 : @[ToAXI4.scala 268:20]
      write_21 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_21_T = eq(idle_21, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_21_T_1 = and(_idStall_21_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_21_T_2 = eq(count_22, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_21_T_3 = or(_idStall_21_T_1, _idStall_21_T_2) @[ToAXI4.scala 271:34]
    idStall[21] <= _idStall_21_T_3 @[ToAXI4.scala 271:11]
    reg count_23 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_22 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_22) @[ToAXI4.scala 258:24]
    node idle_22 = eq(count_23, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_22 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_22 = and(a_sel_22, _inc_T_22) @[ToAXI4.scala 261:22]
    node _dec_T_44 = and(d_sel_22, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_45 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_22 = and(_dec_T_44, _dec_T_45) @[ToAXI4.scala 262:32]
    node _count_T_89 = add(count_23, inc_22) @[ToAXI4.scala 263:24]
    node _count_T_90 = tail(_count_T_89, 1) @[ToAXI4.scala 263:24]
    node _count_T_91 = sub(_count_T_90, dec_22) @[ToAXI4.scala 263:37]
    node _count_T_92 = tail(_count_T_91, 1) @[ToAXI4.scala 263:37]
    count_23 <= _count_T_92 @[ToAXI4.scala 263:15]
    node _T_270 = eq(dec_22, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_271 = neq(count_23, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_272 = or(_T_270, _T_271) @[ToAXI4.scala 265:22]
    node _T_273 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_274 = eq(_T_273, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_274 : @[ToAXI4.scala 265:16]
      node _T_275 = eq(_T_272, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_275 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_44 @[ToAXI4.scala 265:16]
      assert(clock, _T_272, UInt<1>("h1"), "") : assert_44 @[ToAXI4.scala 265:16]
    node _T_276 = eq(inc_22, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_277 = neq(count_23, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_278 = or(_T_276, _T_277) @[ToAXI4.scala 266:22]
    node _T_279 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_280 = eq(_T_279, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_280 : @[ToAXI4.scala 266:16]
      node _T_281 = eq(_T_278, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_281 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_45 @[ToAXI4.scala 266:16]
      assert(clock, _T_278, UInt<1>("h1"), "") : assert_45 @[ToAXI4.scala 266:16]
    when inc_22 : @[ToAXI4.scala 268:20]
      write_22 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_22_T = eq(idle_22, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_22_T_1 = and(_idStall_22_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_22_T_2 = eq(count_23, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_22_T_3 = or(_idStall_22_T_1, _idStall_22_T_2) @[ToAXI4.scala 271:34]
    idStall[22] <= _idStall_22_T_3 @[ToAXI4.scala 271:11]
    reg count_24 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_23 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_23) @[ToAXI4.scala 258:24]
    node idle_23 = eq(count_24, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_23 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_23 = and(a_sel_23, _inc_T_23) @[ToAXI4.scala 261:22]
    node _dec_T_46 = and(d_sel_23, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_47 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_23 = and(_dec_T_46, _dec_T_47) @[ToAXI4.scala 262:32]
    node _count_T_93 = add(count_24, inc_23) @[ToAXI4.scala 263:24]
    node _count_T_94 = tail(_count_T_93, 1) @[ToAXI4.scala 263:24]
    node _count_T_95 = sub(_count_T_94, dec_23) @[ToAXI4.scala 263:37]
    node _count_T_96 = tail(_count_T_95, 1) @[ToAXI4.scala 263:37]
    count_24 <= _count_T_96 @[ToAXI4.scala 263:15]
    node _T_282 = eq(dec_23, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_283 = neq(count_24, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_284 = or(_T_282, _T_283) @[ToAXI4.scala 265:22]
    node _T_285 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_286 = eq(_T_285, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_286 : @[ToAXI4.scala 265:16]
      node _T_287 = eq(_T_284, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_287 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_46 @[ToAXI4.scala 265:16]
      assert(clock, _T_284, UInt<1>("h1"), "") : assert_46 @[ToAXI4.scala 265:16]
    node _T_288 = eq(inc_23, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_289 = neq(count_24, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_290 = or(_T_288, _T_289) @[ToAXI4.scala 266:22]
    node _T_291 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_292 = eq(_T_291, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_292 : @[ToAXI4.scala 266:16]
      node _T_293 = eq(_T_290, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_293 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_47 @[ToAXI4.scala 266:16]
      assert(clock, _T_290, UInt<1>("h1"), "") : assert_47 @[ToAXI4.scala 266:16]
    when inc_23 : @[ToAXI4.scala 268:20]
      write_23 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_23_T = eq(idle_23, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_23_T_1 = and(_idStall_23_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_23_T_2 = eq(count_24, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_23_T_3 = or(_idStall_23_T_1, _idStall_23_T_2) @[ToAXI4.scala 271:34]
    idStall[23] <= _idStall_23_T_3 @[ToAXI4.scala 271:11]
    reg count_25 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_24 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_24) @[ToAXI4.scala 258:24]
    node idle_24 = eq(count_25, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_24 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_24 = and(a_sel_24, _inc_T_24) @[ToAXI4.scala 261:22]
    node _dec_T_48 = and(d_sel_24, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_49 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_24 = and(_dec_T_48, _dec_T_49) @[ToAXI4.scala 262:32]
    node _count_T_97 = add(count_25, inc_24) @[ToAXI4.scala 263:24]
    node _count_T_98 = tail(_count_T_97, 1) @[ToAXI4.scala 263:24]
    node _count_T_99 = sub(_count_T_98, dec_24) @[ToAXI4.scala 263:37]
    node _count_T_100 = tail(_count_T_99, 1) @[ToAXI4.scala 263:37]
    count_25 <= _count_T_100 @[ToAXI4.scala 263:15]
    node _T_294 = eq(dec_24, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_295 = neq(count_25, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_296 = or(_T_294, _T_295) @[ToAXI4.scala 265:22]
    node _T_297 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_298 = eq(_T_297, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_298 : @[ToAXI4.scala 265:16]
      node _T_299 = eq(_T_296, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_299 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_48 @[ToAXI4.scala 265:16]
      assert(clock, _T_296, UInt<1>("h1"), "") : assert_48 @[ToAXI4.scala 265:16]
    node _T_300 = eq(inc_24, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_301 = neq(count_25, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_302 = or(_T_300, _T_301) @[ToAXI4.scala 266:22]
    node _T_303 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_304 = eq(_T_303, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_304 : @[ToAXI4.scala 266:16]
      node _T_305 = eq(_T_302, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_305 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_49 @[ToAXI4.scala 266:16]
      assert(clock, _T_302, UInt<1>("h1"), "") : assert_49 @[ToAXI4.scala 266:16]
    when inc_24 : @[ToAXI4.scala 268:20]
      write_24 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_24_T = eq(idle_24, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_24_T_1 = and(_idStall_24_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_24_T_2 = eq(count_25, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_24_T_3 = or(_idStall_24_T_1, _idStall_24_T_2) @[ToAXI4.scala 271:34]
    idStall[24] <= _idStall_24_T_3 @[ToAXI4.scala 271:11]
    reg count_26 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_25 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_25) @[ToAXI4.scala 258:24]
    node idle_25 = eq(count_26, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_25 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_25 = and(a_sel_25, _inc_T_25) @[ToAXI4.scala 261:22]
    node _dec_T_50 = and(d_sel_25, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_51 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_25 = and(_dec_T_50, _dec_T_51) @[ToAXI4.scala 262:32]
    node _count_T_101 = add(count_26, inc_25) @[ToAXI4.scala 263:24]
    node _count_T_102 = tail(_count_T_101, 1) @[ToAXI4.scala 263:24]
    node _count_T_103 = sub(_count_T_102, dec_25) @[ToAXI4.scala 263:37]
    node _count_T_104 = tail(_count_T_103, 1) @[ToAXI4.scala 263:37]
    count_26 <= _count_T_104 @[ToAXI4.scala 263:15]
    node _T_306 = eq(dec_25, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_307 = neq(count_26, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_308 = or(_T_306, _T_307) @[ToAXI4.scala 265:22]
    node _T_309 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_310 = eq(_T_309, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_310 : @[ToAXI4.scala 265:16]
      node _T_311 = eq(_T_308, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_311 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_50 @[ToAXI4.scala 265:16]
      assert(clock, _T_308, UInt<1>("h1"), "") : assert_50 @[ToAXI4.scala 265:16]
    node _T_312 = eq(inc_25, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_313 = neq(count_26, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_314 = or(_T_312, _T_313) @[ToAXI4.scala 266:22]
    node _T_315 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_316 = eq(_T_315, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_316 : @[ToAXI4.scala 266:16]
      node _T_317 = eq(_T_314, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_317 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_51 @[ToAXI4.scala 266:16]
      assert(clock, _T_314, UInt<1>("h1"), "") : assert_51 @[ToAXI4.scala 266:16]
    when inc_25 : @[ToAXI4.scala 268:20]
      write_25 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_25_T = eq(idle_25, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_25_T_1 = and(_idStall_25_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_25_T_2 = eq(count_26, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_25_T_3 = or(_idStall_25_T_1, _idStall_25_T_2) @[ToAXI4.scala 271:34]
    idStall[25] <= _idStall_25_T_3 @[ToAXI4.scala 271:11]
    reg count_27 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_26 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_26) @[ToAXI4.scala 258:24]
    node idle_26 = eq(count_27, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_26 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_26 = and(a_sel_26, _inc_T_26) @[ToAXI4.scala 261:22]
    node _dec_T_52 = and(d_sel_26, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_53 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_26 = and(_dec_T_52, _dec_T_53) @[ToAXI4.scala 262:32]
    node _count_T_105 = add(count_27, inc_26) @[ToAXI4.scala 263:24]
    node _count_T_106 = tail(_count_T_105, 1) @[ToAXI4.scala 263:24]
    node _count_T_107 = sub(_count_T_106, dec_26) @[ToAXI4.scala 263:37]
    node _count_T_108 = tail(_count_T_107, 1) @[ToAXI4.scala 263:37]
    count_27 <= _count_T_108 @[ToAXI4.scala 263:15]
    node _T_318 = eq(dec_26, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_319 = neq(count_27, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_320 = or(_T_318, _T_319) @[ToAXI4.scala 265:22]
    node _T_321 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_322 = eq(_T_321, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_322 : @[ToAXI4.scala 265:16]
      node _T_323 = eq(_T_320, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_323 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_52 @[ToAXI4.scala 265:16]
      assert(clock, _T_320, UInt<1>("h1"), "") : assert_52 @[ToAXI4.scala 265:16]
    node _T_324 = eq(inc_26, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_325 = neq(count_27, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_326 = or(_T_324, _T_325) @[ToAXI4.scala 266:22]
    node _T_327 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_328 = eq(_T_327, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_328 : @[ToAXI4.scala 266:16]
      node _T_329 = eq(_T_326, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_329 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_53 @[ToAXI4.scala 266:16]
      assert(clock, _T_326, UInt<1>("h1"), "") : assert_53 @[ToAXI4.scala 266:16]
    when inc_26 : @[ToAXI4.scala 268:20]
      write_26 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_26_T = eq(idle_26, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_26_T_1 = and(_idStall_26_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_26_T_2 = eq(count_27, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_26_T_3 = or(_idStall_26_T_1, _idStall_26_T_2) @[ToAXI4.scala 271:34]
    idStall[26] <= _idStall_26_T_3 @[ToAXI4.scala 271:11]
    reg count_28 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_27 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_27) @[ToAXI4.scala 258:24]
    node idle_27 = eq(count_28, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_27 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_27 = and(a_sel_27, _inc_T_27) @[ToAXI4.scala 261:22]
    node _dec_T_54 = and(d_sel_27, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_55 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_27 = and(_dec_T_54, _dec_T_55) @[ToAXI4.scala 262:32]
    node _count_T_109 = add(count_28, inc_27) @[ToAXI4.scala 263:24]
    node _count_T_110 = tail(_count_T_109, 1) @[ToAXI4.scala 263:24]
    node _count_T_111 = sub(_count_T_110, dec_27) @[ToAXI4.scala 263:37]
    node _count_T_112 = tail(_count_T_111, 1) @[ToAXI4.scala 263:37]
    count_28 <= _count_T_112 @[ToAXI4.scala 263:15]
    node _T_330 = eq(dec_27, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_331 = neq(count_28, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_332 = or(_T_330, _T_331) @[ToAXI4.scala 265:22]
    node _T_333 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_334 = eq(_T_333, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_334 : @[ToAXI4.scala 265:16]
      node _T_335 = eq(_T_332, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_335 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_54 @[ToAXI4.scala 265:16]
      assert(clock, _T_332, UInt<1>("h1"), "") : assert_54 @[ToAXI4.scala 265:16]
    node _T_336 = eq(inc_27, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_337 = neq(count_28, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_338 = or(_T_336, _T_337) @[ToAXI4.scala 266:22]
    node _T_339 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_340 = eq(_T_339, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_340 : @[ToAXI4.scala 266:16]
      node _T_341 = eq(_T_338, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_341 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_55 @[ToAXI4.scala 266:16]
      assert(clock, _T_338, UInt<1>("h1"), "") : assert_55 @[ToAXI4.scala 266:16]
    when inc_27 : @[ToAXI4.scala 268:20]
      write_27 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_27_T = eq(idle_27, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_27_T_1 = and(_idStall_27_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_27_T_2 = eq(count_28, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_27_T_3 = or(_idStall_27_T_1, _idStall_27_T_2) @[ToAXI4.scala 271:34]
    idStall[27] <= _idStall_27_T_3 @[ToAXI4.scala 271:11]
    reg count_29 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_28 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_28) @[ToAXI4.scala 258:24]
    node idle_28 = eq(count_29, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_28 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_28 = and(a_sel_28, _inc_T_28) @[ToAXI4.scala 261:22]
    node _dec_T_56 = and(d_sel_28, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_57 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_28 = and(_dec_T_56, _dec_T_57) @[ToAXI4.scala 262:32]
    node _count_T_113 = add(count_29, inc_28) @[ToAXI4.scala 263:24]
    node _count_T_114 = tail(_count_T_113, 1) @[ToAXI4.scala 263:24]
    node _count_T_115 = sub(_count_T_114, dec_28) @[ToAXI4.scala 263:37]
    node _count_T_116 = tail(_count_T_115, 1) @[ToAXI4.scala 263:37]
    count_29 <= _count_T_116 @[ToAXI4.scala 263:15]
    node _T_342 = eq(dec_28, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_343 = neq(count_29, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_344 = or(_T_342, _T_343) @[ToAXI4.scala 265:22]
    node _T_345 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_346 = eq(_T_345, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_346 : @[ToAXI4.scala 265:16]
      node _T_347 = eq(_T_344, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_347 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_56 @[ToAXI4.scala 265:16]
      assert(clock, _T_344, UInt<1>("h1"), "") : assert_56 @[ToAXI4.scala 265:16]
    node _T_348 = eq(inc_28, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_349 = neq(count_29, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_350 = or(_T_348, _T_349) @[ToAXI4.scala 266:22]
    node _T_351 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_352 = eq(_T_351, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_352 : @[ToAXI4.scala 266:16]
      node _T_353 = eq(_T_350, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_353 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_57 @[ToAXI4.scala 266:16]
      assert(clock, _T_350, UInt<1>("h1"), "") : assert_57 @[ToAXI4.scala 266:16]
    when inc_28 : @[ToAXI4.scala 268:20]
      write_28 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_28_T = eq(idle_28, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_28_T_1 = and(_idStall_28_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_28_T_2 = eq(count_29, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_28_T_3 = or(_idStall_28_T_1, _idStall_28_T_2) @[ToAXI4.scala 271:34]
    idStall[28] <= _idStall_28_T_3 @[ToAXI4.scala 271:11]
    reg count_30 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_29 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_29) @[ToAXI4.scala 258:24]
    node idle_29 = eq(count_30, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_29 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_29 = and(a_sel_29, _inc_T_29) @[ToAXI4.scala 261:22]
    node _dec_T_58 = and(d_sel_29, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_59 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_29 = and(_dec_T_58, _dec_T_59) @[ToAXI4.scala 262:32]
    node _count_T_117 = add(count_30, inc_29) @[ToAXI4.scala 263:24]
    node _count_T_118 = tail(_count_T_117, 1) @[ToAXI4.scala 263:24]
    node _count_T_119 = sub(_count_T_118, dec_29) @[ToAXI4.scala 263:37]
    node _count_T_120 = tail(_count_T_119, 1) @[ToAXI4.scala 263:37]
    count_30 <= _count_T_120 @[ToAXI4.scala 263:15]
    node _T_354 = eq(dec_29, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_355 = neq(count_30, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_356 = or(_T_354, _T_355) @[ToAXI4.scala 265:22]
    node _T_357 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_358 = eq(_T_357, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_358 : @[ToAXI4.scala 265:16]
      node _T_359 = eq(_T_356, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_359 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_58 @[ToAXI4.scala 265:16]
      assert(clock, _T_356, UInt<1>("h1"), "") : assert_58 @[ToAXI4.scala 265:16]
    node _T_360 = eq(inc_29, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_361 = neq(count_30, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_362 = or(_T_360, _T_361) @[ToAXI4.scala 266:22]
    node _T_363 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_364 = eq(_T_363, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_364 : @[ToAXI4.scala 266:16]
      node _T_365 = eq(_T_362, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_365 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_59 @[ToAXI4.scala 266:16]
      assert(clock, _T_362, UInt<1>("h1"), "") : assert_59 @[ToAXI4.scala 266:16]
    when inc_29 : @[ToAXI4.scala 268:20]
      write_29 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_29_T = eq(idle_29, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_29_T_1 = and(_idStall_29_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_29_T_2 = eq(count_30, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_29_T_3 = or(_idStall_29_T_1, _idStall_29_T_2) @[ToAXI4.scala 271:34]
    idStall[29] <= _idStall_29_T_3 @[ToAXI4.scala 271:11]
    reg count_31 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_30 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_30) @[ToAXI4.scala 258:24]
    node idle_30 = eq(count_31, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_30 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_30 = and(a_sel_30, _inc_T_30) @[ToAXI4.scala 261:22]
    node _dec_T_60 = and(d_sel_30, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_61 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_30 = and(_dec_T_60, _dec_T_61) @[ToAXI4.scala 262:32]
    node _count_T_121 = add(count_31, inc_30) @[ToAXI4.scala 263:24]
    node _count_T_122 = tail(_count_T_121, 1) @[ToAXI4.scala 263:24]
    node _count_T_123 = sub(_count_T_122, dec_30) @[ToAXI4.scala 263:37]
    node _count_T_124 = tail(_count_T_123, 1) @[ToAXI4.scala 263:37]
    count_31 <= _count_T_124 @[ToAXI4.scala 263:15]
    node _T_366 = eq(dec_30, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_367 = neq(count_31, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_368 = or(_T_366, _T_367) @[ToAXI4.scala 265:22]
    node _T_369 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_370 = eq(_T_369, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_370 : @[ToAXI4.scala 265:16]
      node _T_371 = eq(_T_368, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_371 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_60 @[ToAXI4.scala 265:16]
      assert(clock, _T_368, UInt<1>("h1"), "") : assert_60 @[ToAXI4.scala 265:16]
    node _T_372 = eq(inc_30, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_373 = neq(count_31, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_374 = or(_T_372, _T_373) @[ToAXI4.scala 266:22]
    node _T_375 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_376 = eq(_T_375, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_376 : @[ToAXI4.scala 266:16]
      node _T_377 = eq(_T_374, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_377 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_61 @[ToAXI4.scala 266:16]
      assert(clock, _T_374, UInt<1>("h1"), "") : assert_61 @[ToAXI4.scala 266:16]
    when inc_30 : @[ToAXI4.scala 268:20]
      write_30 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_30_T = eq(idle_30, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_30_T_1 = and(_idStall_30_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_30_T_2 = eq(count_31, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_30_T_3 = or(_idStall_30_T_1, _idStall_30_T_2) @[ToAXI4.scala 271:34]
    idStall[30] <= _idStall_30_T_3 @[ToAXI4.scala 271:11]
    reg count_32 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_31 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_31) @[ToAXI4.scala 258:24]
    node idle_31 = eq(count_32, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_31 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_31 = and(a_sel_31, _inc_T_31) @[ToAXI4.scala 261:22]
    node _dec_T_62 = and(d_sel_31, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_63 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_31 = and(_dec_T_62, _dec_T_63) @[ToAXI4.scala 262:32]
    node _count_T_125 = add(count_32, inc_31) @[ToAXI4.scala 263:24]
    node _count_T_126 = tail(_count_T_125, 1) @[ToAXI4.scala 263:24]
    node _count_T_127 = sub(_count_T_126, dec_31) @[ToAXI4.scala 263:37]
    node _count_T_128 = tail(_count_T_127, 1) @[ToAXI4.scala 263:37]
    count_32 <= _count_T_128 @[ToAXI4.scala 263:15]
    node _T_378 = eq(dec_31, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_379 = neq(count_32, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_380 = or(_T_378, _T_379) @[ToAXI4.scala 265:22]
    node _T_381 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_382 = eq(_T_381, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_382 : @[ToAXI4.scala 265:16]
      node _T_383 = eq(_T_380, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_383 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_62 @[ToAXI4.scala 265:16]
      assert(clock, _T_380, UInt<1>("h1"), "") : assert_62 @[ToAXI4.scala 265:16]
    node _T_384 = eq(inc_31, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_385 = neq(count_32, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_386 = or(_T_384, _T_385) @[ToAXI4.scala 266:22]
    node _T_387 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_388 = eq(_T_387, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_388 : @[ToAXI4.scala 266:16]
      node _T_389 = eq(_T_386, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_389 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_63 @[ToAXI4.scala 266:16]
      assert(clock, _T_386, UInt<1>("h1"), "") : assert_63 @[ToAXI4.scala 266:16]
    when inc_31 : @[ToAXI4.scala 268:20]
      write_31 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_31_T = eq(idle_31, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_31_T_1 = and(_idStall_31_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_31_T_2 = eq(count_32, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_31_T_3 = or(_idStall_31_T_1, _idStall_31_T_2) @[ToAXI4.scala 271:34]
    idStall[31] <= _idStall_31_T_3 @[ToAXI4.scala 271:11]
    reg count_33 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_32 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_32) @[ToAXI4.scala 258:24]
    node idle_32 = eq(count_33, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_32 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_32 = and(a_sel_32, _inc_T_32) @[ToAXI4.scala 261:22]
    node _dec_T_64 = and(d_sel_32, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_65 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_32 = and(_dec_T_64, _dec_T_65) @[ToAXI4.scala 262:32]
    node _count_T_129 = add(count_33, inc_32) @[ToAXI4.scala 263:24]
    node _count_T_130 = tail(_count_T_129, 1) @[ToAXI4.scala 263:24]
    node _count_T_131 = sub(_count_T_130, dec_32) @[ToAXI4.scala 263:37]
    node _count_T_132 = tail(_count_T_131, 1) @[ToAXI4.scala 263:37]
    count_33 <= _count_T_132 @[ToAXI4.scala 263:15]
    node _T_390 = eq(dec_32, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_391 = neq(count_33, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_392 = or(_T_390, _T_391) @[ToAXI4.scala 265:22]
    node _T_393 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_394 = eq(_T_393, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_394 : @[ToAXI4.scala 265:16]
      node _T_395 = eq(_T_392, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_395 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_64 @[ToAXI4.scala 265:16]
      assert(clock, _T_392, UInt<1>("h1"), "") : assert_64 @[ToAXI4.scala 265:16]
    node _T_396 = eq(inc_32, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_397 = neq(count_33, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_398 = or(_T_396, _T_397) @[ToAXI4.scala 266:22]
    node _T_399 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_400 = eq(_T_399, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_400 : @[ToAXI4.scala 266:16]
      node _T_401 = eq(_T_398, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_401 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_65 @[ToAXI4.scala 266:16]
      assert(clock, _T_398, UInt<1>("h1"), "") : assert_65 @[ToAXI4.scala 266:16]
    when inc_32 : @[ToAXI4.scala 268:20]
      write_32 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_32_T = eq(idle_32, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_32_T_1 = and(_idStall_32_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_32_T_2 = eq(count_33, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_32_T_3 = or(_idStall_32_T_1, _idStall_32_T_2) @[ToAXI4.scala 271:34]
    idStall[32] <= _idStall_32_T_3 @[ToAXI4.scala 271:11]
    reg count_34 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_33 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_33) @[ToAXI4.scala 258:24]
    node idle_33 = eq(count_34, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_33 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_33 = and(a_sel_33, _inc_T_33) @[ToAXI4.scala 261:22]
    node _dec_T_66 = and(d_sel_33, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_67 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_33 = and(_dec_T_66, _dec_T_67) @[ToAXI4.scala 262:32]
    node _count_T_133 = add(count_34, inc_33) @[ToAXI4.scala 263:24]
    node _count_T_134 = tail(_count_T_133, 1) @[ToAXI4.scala 263:24]
    node _count_T_135 = sub(_count_T_134, dec_33) @[ToAXI4.scala 263:37]
    node _count_T_136 = tail(_count_T_135, 1) @[ToAXI4.scala 263:37]
    count_34 <= _count_T_136 @[ToAXI4.scala 263:15]
    node _T_402 = eq(dec_33, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_403 = neq(count_34, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_404 = or(_T_402, _T_403) @[ToAXI4.scala 265:22]
    node _T_405 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_406 = eq(_T_405, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_406 : @[ToAXI4.scala 265:16]
      node _T_407 = eq(_T_404, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_407 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_66 @[ToAXI4.scala 265:16]
      assert(clock, _T_404, UInt<1>("h1"), "") : assert_66 @[ToAXI4.scala 265:16]
    node _T_408 = eq(inc_33, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_409 = neq(count_34, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_410 = or(_T_408, _T_409) @[ToAXI4.scala 266:22]
    node _T_411 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_412 = eq(_T_411, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_412 : @[ToAXI4.scala 266:16]
      node _T_413 = eq(_T_410, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_413 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_67 @[ToAXI4.scala 266:16]
      assert(clock, _T_410, UInt<1>("h1"), "") : assert_67 @[ToAXI4.scala 266:16]
    when inc_33 : @[ToAXI4.scala 268:20]
      write_33 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_33_T = eq(idle_33, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_33_T_1 = and(_idStall_33_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_33_T_2 = eq(count_34, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_33_T_3 = or(_idStall_33_T_1, _idStall_33_T_2) @[ToAXI4.scala 271:34]
    idStall[33] <= _idStall_33_T_3 @[ToAXI4.scala 271:11]
    reg count_35 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_34 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_34) @[ToAXI4.scala 258:24]
    node idle_34 = eq(count_35, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_34 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_34 = and(a_sel_34, _inc_T_34) @[ToAXI4.scala 261:22]
    node _dec_T_68 = and(d_sel_34, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_69 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_34 = and(_dec_T_68, _dec_T_69) @[ToAXI4.scala 262:32]
    node _count_T_137 = add(count_35, inc_34) @[ToAXI4.scala 263:24]
    node _count_T_138 = tail(_count_T_137, 1) @[ToAXI4.scala 263:24]
    node _count_T_139 = sub(_count_T_138, dec_34) @[ToAXI4.scala 263:37]
    node _count_T_140 = tail(_count_T_139, 1) @[ToAXI4.scala 263:37]
    count_35 <= _count_T_140 @[ToAXI4.scala 263:15]
    node _T_414 = eq(dec_34, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_415 = neq(count_35, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_416 = or(_T_414, _T_415) @[ToAXI4.scala 265:22]
    node _T_417 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_418 = eq(_T_417, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_418 : @[ToAXI4.scala 265:16]
      node _T_419 = eq(_T_416, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_419 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_68 @[ToAXI4.scala 265:16]
      assert(clock, _T_416, UInt<1>("h1"), "") : assert_68 @[ToAXI4.scala 265:16]
    node _T_420 = eq(inc_34, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_421 = neq(count_35, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_422 = or(_T_420, _T_421) @[ToAXI4.scala 266:22]
    node _T_423 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_424 = eq(_T_423, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_424 : @[ToAXI4.scala 266:16]
      node _T_425 = eq(_T_422, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_425 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_69 @[ToAXI4.scala 266:16]
      assert(clock, _T_422, UInt<1>("h1"), "") : assert_69 @[ToAXI4.scala 266:16]
    when inc_34 : @[ToAXI4.scala 268:20]
      write_34 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_34_T = eq(idle_34, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_34_T_1 = and(_idStall_34_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_34_T_2 = eq(count_35, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_34_T_3 = or(_idStall_34_T_1, _idStall_34_T_2) @[ToAXI4.scala 271:34]
    idStall[34] <= _idStall_34_T_3 @[ToAXI4.scala 271:11]
    reg count_36 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_35 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_35) @[ToAXI4.scala 258:24]
    node idle_35 = eq(count_36, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_35 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_35 = and(a_sel_35, _inc_T_35) @[ToAXI4.scala 261:22]
    node _dec_T_70 = and(d_sel_35, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_71 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_35 = and(_dec_T_70, _dec_T_71) @[ToAXI4.scala 262:32]
    node _count_T_141 = add(count_36, inc_35) @[ToAXI4.scala 263:24]
    node _count_T_142 = tail(_count_T_141, 1) @[ToAXI4.scala 263:24]
    node _count_T_143 = sub(_count_T_142, dec_35) @[ToAXI4.scala 263:37]
    node _count_T_144 = tail(_count_T_143, 1) @[ToAXI4.scala 263:37]
    count_36 <= _count_T_144 @[ToAXI4.scala 263:15]
    node _T_426 = eq(dec_35, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_427 = neq(count_36, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_428 = or(_T_426, _T_427) @[ToAXI4.scala 265:22]
    node _T_429 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_430 = eq(_T_429, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_430 : @[ToAXI4.scala 265:16]
      node _T_431 = eq(_T_428, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_431 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_70 @[ToAXI4.scala 265:16]
      assert(clock, _T_428, UInt<1>("h1"), "") : assert_70 @[ToAXI4.scala 265:16]
    node _T_432 = eq(inc_35, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_433 = neq(count_36, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_434 = or(_T_432, _T_433) @[ToAXI4.scala 266:22]
    node _T_435 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_436 = eq(_T_435, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_436 : @[ToAXI4.scala 266:16]
      node _T_437 = eq(_T_434, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_437 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_71 @[ToAXI4.scala 266:16]
      assert(clock, _T_434, UInt<1>("h1"), "") : assert_71 @[ToAXI4.scala 266:16]
    when inc_35 : @[ToAXI4.scala 268:20]
      write_35 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_35_T = eq(idle_35, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_35_T_1 = and(_idStall_35_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_35_T_2 = eq(count_36, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_35_T_3 = or(_idStall_35_T_1, _idStall_35_T_2) @[ToAXI4.scala 271:34]
    idStall[35] <= _idStall_35_T_3 @[ToAXI4.scala 271:11]
    reg count_37 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_36 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_36) @[ToAXI4.scala 258:24]
    node idle_36 = eq(count_37, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_36 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_36 = and(a_sel_36, _inc_T_36) @[ToAXI4.scala 261:22]
    node _dec_T_72 = and(d_sel_36, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_73 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_36 = and(_dec_T_72, _dec_T_73) @[ToAXI4.scala 262:32]
    node _count_T_145 = add(count_37, inc_36) @[ToAXI4.scala 263:24]
    node _count_T_146 = tail(_count_T_145, 1) @[ToAXI4.scala 263:24]
    node _count_T_147 = sub(_count_T_146, dec_36) @[ToAXI4.scala 263:37]
    node _count_T_148 = tail(_count_T_147, 1) @[ToAXI4.scala 263:37]
    count_37 <= _count_T_148 @[ToAXI4.scala 263:15]
    node _T_438 = eq(dec_36, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_439 = neq(count_37, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_440 = or(_T_438, _T_439) @[ToAXI4.scala 265:22]
    node _T_441 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_442 = eq(_T_441, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_442 : @[ToAXI4.scala 265:16]
      node _T_443 = eq(_T_440, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_443 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_72 @[ToAXI4.scala 265:16]
      assert(clock, _T_440, UInt<1>("h1"), "") : assert_72 @[ToAXI4.scala 265:16]
    node _T_444 = eq(inc_36, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_445 = neq(count_37, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_446 = or(_T_444, _T_445) @[ToAXI4.scala 266:22]
    node _T_447 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_448 = eq(_T_447, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_448 : @[ToAXI4.scala 266:16]
      node _T_449 = eq(_T_446, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_449 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_73 @[ToAXI4.scala 266:16]
      assert(clock, _T_446, UInt<1>("h1"), "") : assert_73 @[ToAXI4.scala 266:16]
    when inc_36 : @[ToAXI4.scala 268:20]
      write_36 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_36_T = eq(idle_36, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_36_T_1 = and(_idStall_36_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_36_T_2 = eq(count_37, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_36_T_3 = or(_idStall_36_T_1, _idStall_36_T_2) @[ToAXI4.scala 271:34]
    idStall[36] <= _idStall_36_T_3 @[ToAXI4.scala 271:11]
    reg count_38 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_37 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_37) @[ToAXI4.scala 258:24]
    node idle_37 = eq(count_38, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_37 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_37 = and(a_sel_37, _inc_T_37) @[ToAXI4.scala 261:22]
    node _dec_T_74 = and(d_sel_37, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_75 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_37 = and(_dec_T_74, _dec_T_75) @[ToAXI4.scala 262:32]
    node _count_T_149 = add(count_38, inc_37) @[ToAXI4.scala 263:24]
    node _count_T_150 = tail(_count_T_149, 1) @[ToAXI4.scala 263:24]
    node _count_T_151 = sub(_count_T_150, dec_37) @[ToAXI4.scala 263:37]
    node _count_T_152 = tail(_count_T_151, 1) @[ToAXI4.scala 263:37]
    count_38 <= _count_T_152 @[ToAXI4.scala 263:15]
    node _T_450 = eq(dec_37, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_451 = neq(count_38, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_452 = or(_T_450, _T_451) @[ToAXI4.scala 265:22]
    node _T_453 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_454 = eq(_T_453, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_454 : @[ToAXI4.scala 265:16]
      node _T_455 = eq(_T_452, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_455 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_74 @[ToAXI4.scala 265:16]
      assert(clock, _T_452, UInt<1>("h1"), "") : assert_74 @[ToAXI4.scala 265:16]
    node _T_456 = eq(inc_37, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_457 = neq(count_38, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_458 = or(_T_456, _T_457) @[ToAXI4.scala 266:22]
    node _T_459 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_460 = eq(_T_459, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_460 : @[ToAXI4.scala 266:16]
      node _T_461 = eq(_T_458, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_461 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_75 @[ToAXI4.scala 266:16]
      assert(clock, _T_458, UInt<1>("h1"), "") : assert_75 @[ToAXI4.scala 266:16]
    when inc_37 : @[ToAXI4.scala 268:20]
      write_37 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_37_T = eq(idle_37, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_37_T_1 = and(_idStall_37_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_37_T_2 = eq(count_38, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_37_T_3 = or(_idStall_37_T_1, _idStall_37_T_2) @[ToAXI4.scala 271:34]
    idStall[37] <= _idStall_37_T_3 @[ToAXI4.scala 271:11]
    reg count_39 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_38 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_38) @[ToAXI4.scala 258:24]
    node idle_38 = eq(count_39, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_38 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_38 = and(a_sel_38, _inc_T_38) @[ToAXI4.scala 261:22]
    node _dec_T_76 = and(d_sel_38, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_77 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_38 = and(_dec_T_76, _dec_T_77) @[ToAXI4.scala 262:32]
    node _count_T_153 = add(count_39, inc_38) @[ToAXI4.scala 263:24]
    node _count_T_154 = tail(_count_T_153, 1) @[ToAXI4.scala 263:24]
    node _count_T_155 = sub(_count_T_154, dec_38) @[ToAXI4.scala 263:37]
    node _count_T_156 = tail(_count_T_155, 1) @[ToAXI4.scala 263:37]
    count_39 <= _count_T_156 @[ToAXI4.scala 263:15]
    node _T_462 = eq(dec_38, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_463 = neq(count_39, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_464 = or(_T_462, _T_463) @[ToAXI4.scala 265:22]
    node _T_465 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_466 = eq(_T_465, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_466 : @[ToAXI4.scala 265:16]
      node _T_467 = eq(_T_464, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_467 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_76 @[ToAXI4.scala 265:16]
      assert(clock, _T_464, UInt<1>("h1"), "") : assert_76 @[ToAXI4.scala 265:16]
    node _T_468 = eq(inc_38, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_469 = neq(count_39, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_470 = or(_T_468, _T_469) @[ToAXI4.scala 266:22]
    node _T_471 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_472 = eq(_T_471, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_472 : @[ToAXI4.scala 266:16]
      node _T_473 = eq(_T_470, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_473 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_77 @[ToAXI4.scala 266:16]
      assert(clock, _T_470, UInt<1>("h1"), "") : assert_77 @[ToAXI4.scala 266:16]
    when inc_38 : @[ToAXI4.scala 268:20]
      write_38 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_38_T = eq(idle_38, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_38_T_1 = and(_idStall_38_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_38_T_2 = eq(count_39, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_38_T_3 = or(_idStall_38_T_1, _idStall_38_T_2) @[ToAXI4.scala 271:34]
    idStall[38] <= _idStall_38_T_3 @[ToAXI4.scala 271:11]
    reg count_40 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_39 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_39) @[ToAXI4.scala 258:24]
    node idle_39 = eq(count_40, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_39 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_39 = and(a_sel_39, _inc_T_39) @[ToAXI4.scala 261:22]
    node _dec_T_78 = and(d_sel_39, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_79 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_39 = and(_dec_T_78, _dec_T_79) @[ToAXI4.scala 262:32]
    node _count_T_157 = add(count_40, inc_39) @[ToAXI4.scala 263:24]
    node _count_T_158 = tail(_count_T_157, 1) @[ToAXI4.scala 263:24]
    node _count_T_159 = sub(_count_T_158, dec_39) @[ToAXI4.scala 263:37]
    node _count_T_160 = tail(_count_T_159, 1) @[ToAXI4.scala 263:37]
    count_40 <= _count_T_160 @[ToAXI4.scala 263:15]
    node _T_474 = eq(dec_39, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_475 = neq(count_40, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_476 = or(_T_474, _T_475) @[ToAXI4.scala 265:22]
    node _T_477 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_478 = eq(_T_477, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_478 : @[ToAXI4.scala 265:16]
      node _T_479 = eq(_T_476, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_479 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_78 @[ToAXI4.scala 265:16]
      assert(clock, _T_476, UInt<1>("h1"), "") : assert_78 @[ToAXI4.scala 265:16]
    node _T_480 = eq(inc_39, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_481 = neq(count_40, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_482 = or(_T_480, _T_481) @[ToAXI4.scala 266:22]
    node _T_483 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_484 = eq(_T_483, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_484 : @[ToAXI4.scala 266:16]
      node _T_485 = eq(_T_482, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_485 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_79 @[ToAXI4.scala 266:16]
      assert(clock, _T_482, UInt<1>("h1"), "") : assert_79 @[ToAXI4.scala 266:16]
    when inc_39 : @[ToAXI4.scala 268:20]
      write_39 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_39_T = eq(idle_39, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_39_T_1 = and(_idStall_39_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_39_T_2 = eq(count_40, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_39_T_3 = or(_idStall_39_T_1, _idStall_39_T_2) @[ToAXI4.scala 271:34]
    idStall[39] <= _idStall_39_T_3 @[ToAXI4.scala 271:11]
    reg count_41 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_40 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_40) @[ToAXI4.scala 258:24]
    node idle_40 = eq(count_41, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_40 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_40 = and(a_sel_40, _inc_T_40) @[ToAXI4.scala 261:22]
    node _dec_T_80 = and(d_sel_40, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_81 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_40 = and(_dec_T_80, _dec_T_81) @[ToAXI4.scala 262:32]
    node _count_T_161 = add(count_41, inc_40) @[ToAXI4.scala 263:24]
    node _count_T_162 = tail(_count_T_161, 1) @[ToAXI4.scala 263:24]
    node _count_T_163 = sub(_count_T_162, dec_40) @[ToAXI4.scala 263:37]
    node _count_T_164 = tail(_count_T_163, 1) @[ToAXI4.scala 263:37]
    count_41 <= _count_T_164 @[ToAXI4.scala 263:15]
    node _T_486 = eq(dec_40, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_487 = neq(count_41, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_488 = or(_T_486, _T_487) @[ToAXI4.scala 265:22]
    node _T_489 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_490 = eq(_T_489, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_490 : @[ToAXI4.scala 265:16]
      node _T_491 = eq(_T_488, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_491 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_80 @[ToAXI4.scala 265:16]
      assert(clock, _T_488, UInt<1>("h1"), "") : assert_80 @[ToAXI4.scala 265:16]
    node _T_492 = eq(inc_40, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_493 = neq(count_41, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_494 = or(_T_492, _T_493) @[ToAXI4.scala 266:22]
    node _T_495 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_496 = eq(_T_495, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_496 : @[ToAXI4.scala 266:16]
      node _T_497 = eq(_T_494, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_497 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_81 @[ToAXI4.scala 266:16]
      assert(clock, _T_494, UInt<1>("h1"), "") : assert_81 @[ToAXI4.scala 266:16]
    when inc_40 : @[ToAXI4.scala 268:20]
      write_40 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_40_T = eq(idle_40, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_40_T_1 = and(_idStall_40_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_40_T_2 = eq(count_41, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_40_T_3 = or(_idStall_40_T_1, _idStall_40_T_2) @[ToAXI4.scala 271:34]
    idStall[40] <= _idStall_40_T_3 @[ToAXI4.scala 271:11]
    reg count_42 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_41 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_41) @[ToAXI4.scala 258:24]
    node idle_41 = eq(count_42, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_41 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_41 = and(a_sel_41, _inc_T_41) @[ToAXI4.scala 261:22]
    node _dec_T_82 = and(d_sel_41, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_83 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_41 = and(_dec_T_82, _dec_T_83) @[ToAXI4.scala 262:32]
    node _count_T_165 = add(count_42, inc_41) @[ToAXI4.scala 263:24]
    node _count_T_166 = tail(_count_T_165, 1) @[ToAXI4.scala 263:24]
    node _count_T_167 = sub(_count_T_166, dec_41) @[ToAXI4.scala 263:37]
    node _count_T_168 = tail(_count_T_167, 1) @[ToAXI4.scala 263:37]
    count_42 <= _count_T_168 @[ToAXI4.scala 263:15]
    node _T_498 = eq(dec_41, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_499 = neq(count_42, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_500 = or(_T_498, _T_499) @[ToAXI4.scala 265:22]
    node _T_501 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_502 = eq(_T_501, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_502 : @[ToAXI4.scala 265:16]
      node _T_503 = eq(_T_500, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_503 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_82 @[ToAXI4.scala 265:16]
      assert(clock, _T_500, UInt<1>("h1"), "") : assert_82 @[ToAXI4.scala 265:16]
    node _T_504 = eq(inc_41, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_505 = neq(count_42, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_506 = or(_T_504, _T_505) @[ToAXI4.scala 266:22]
    node _T_507 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_508 = eq(_T_507, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_508 : @[ToAXI4.scala 266:16]
      node _T_509 = eq(_T_506, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_509 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_83 @[ToAXI4.scala 266:16]
      assert(clock, _T_506, UInt<1>("h1"), "") : assert_83 @[ToAXI4.scala 266:16]
    when inc_41 : @[ToAXI4.scala 268:20]
      write_41 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_41_T = eq(idle_41, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_41_T_1 = and(_idStall_41_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_41_T_2 = eq(count_42, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_41_T_3 = or(_idStall_41_T_1, _idStall_41_T_2) @[ToAXI4.scala 271:34]
    idStall[41] <= _idStall_41_T_3 @[ToAXI4.scala 271:11]
    reg count_43 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_42 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_42) @[ToAXI4.scala 258:24]
    node idle_42 = eq(count_43, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_42 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_42 = and(a_sel_42, _inc_T_42) @[ToAXI4.scala 261:22]
    node _dec_T_84 = and(d_sel_42, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_85 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_42 = and(_dec_T_84, _dec_T_85) @[ToAXI4.scala 262:32]
    node _count_T_169 = add(count_43, inc_42) @[ToAXI4.scala 263:24]
    node _count_T_170 = tail(_count_T_169, 1) @[ToAXI4.scala 263:24]
    node _count_T_171 = sub(_count_T_170, dec_42) @[ToAXI4.scala 263:37]
    node _count_T_172 = tail(_count_T_171, 1) @[ToAXI4.scala 263:37]
    count_43 <= _count_T_172 @[ToAXI4.scala 263:15]
    node _T_510 = eq(dec_42, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_511 = neq(count_43, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_512 = or(_T_510, _T_511) @[ToAXI4.scala 265:22]
    node _T_513 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_514 = eq(_T_513, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_514 : @[ToAXI4.scala 265:16]
      node _T_515 = eq(_T_512, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_515 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_84 @[ToAXI4.scala 265:16]
      assert(clock, _T_512, UInt<1>("h1"), "") : assert_84 @[ToAXI4.scala 265:16]
    node _T_516 = eq(inc_42, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_517 = neq(count_43, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_518 = or(_T_516, _T_517) @[ToAXI4.scala 266:22]
    node _T_519 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_520 = eq(_T_519, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_520 : @[ToAXI4.scala 266:16]
      node _T_521 = eq(_T_518, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_521 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_85 @[ToAXI4.scala 266:16]
      assert(clock, _T_518, UInt<1>("h1"), "") : assert_85 @[ToAXI4.scala 266:16]
    when inc_42 : @[ToAXI4.scala 268:20]
      write_42 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_42_T = eq(idle_42, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_42_T_1 = and(_idStall_42_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_42_T_2 = eq(count_43, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_42_T_3 = or(_idStall_42_T_1, _idStall_42_T_2) @[ToAXI4.scala 271:34]
    idStall[42] <= _idStall_42_T_3 @[ToAXI4.scala 271:11]
    reg count_44 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_43 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_43) @[ToAXI4.scala 258:24]
    node idle_43 = eq(count_44, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_43 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_43 = and(a_sel_43, _inc_T_43) @[ToAXI4.scala 261:22]
    node _dec_T_86 = and(d_sel_43, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_87 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_43 = and(_dec_T_86, _dec_T_87) @[ToAXI4.scala 262:32]
    node _count_T_173 = add(count_44, inc_43) @[ToAXI4.scala 263:24]
    node _count_T_174 = tail(_count_T_173, 1) @[ToAXI4.scala 263:24]
    node _count_T_175 = sub(_count_T_174, dec_43) @[ToAXI4.scala 263:37]
    node _count_T_176 = tail(_count_T_175, 1) @[ToAXI4.scala 263:37]
    count_44 <= _count_T_176 @[ToAXI4.scala 263:15]
    node _T_522 = eq(dec_43, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_523 = neq(count_44, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_524 = or(_T_522, _T_523) @[ToAXI4.scala 265:22]
    node _T_525 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_526 = eq(_T_525, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_526 : @[ToAXI4.scala 265:16]
      node _T_527 = eq(_T_524, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_527 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_86 @[ToAXI4.scala 265:16]
      assert(clock, _T_524, UInt<1>("h1"), "") : assert_86 @[ToAXI4.scala 265:16]
    node _T_528 = eq(inc_43, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_529 = neq(count_44, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_530 = or(_T_528, _T_529) @[ToAXI4.scala 266:22]
    node _T_531 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_532 = eq(_T_531, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_532 : @[ToAXI4.scala 266:16]
      node _T_533 = eq(_T_530, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_533 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_87 @[ToAXI4.scala 266:16]
      assert(clock, _T_530, UInt<1>("h1"), "") : assert_87 @[ToAXI4.scala 266:16]
    when inc_43 : @[ToAXI4.scala 268:20]
      write_43 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_43_T = eq(idle_43, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_43_T_1 = and(_idStall_43_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_43_T_2 = eq(count_44, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_43_T_3 = or(_idStall_43_T_1, _idStall_43_T_2) @[ToAXI4.scala 271:34]
    idStall[43] <= _idStall_43_T_3 @[ToAXI4.scala 271:11]
    reg count_45 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_44 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_44) @[ToAXI4.scala 258:24]
    node idle_44 = eq(count_45, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_44 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_44 = and(a_sel_44, _inc_T_44) @[ToAXI4.scala 261:22]
    node _dec_T_88 = and(d_sel_44, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_89 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_44 = and(_dec_T_88, _dec_T_89) @[ToAXI4.scala 262:32]
    node _count_T_177 = add(count_45, inc_44) @[ToAXI4.scala 263:24]
    node _count_T_178 = tail(_count_T_177, 1) @[ToAXI4.scala 263:24]
    node _count_T_179 = sub(_count_T_178, dec_44) @[ToAXI4.scala 263:37]
    node _count_T_180 = tail(_count_T_179, 1) @[ToAXI4.scala 263:37]
    count_45 <= _count_T_180 @[ToAXI4.scala 263:15]
    node _T_534 = eq(dec_44, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_535 = neq(count_45, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_536 = or(_T_534, _T_535) @[ToAXI4.scala 265:22]
    node _T_537 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_538 = eq(_T_537, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_538 : @[ToAXI4.scala 265:16]
      node _T_539 = eq(_T_536, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_539 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_88 @[ToAXI4.scala 265:16]
      assert(clock, _T_536, UInt<1>("h1"), "") : assert_88 @[ToAXI4.scala 265:16]
    node _T_540 = eq(inc_44, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_541 = neq(count_45, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_542 = or(_T_540, _T_541) @[ToAXI4.scala 266:22]
    node _T_543 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_544 = eq(_T_543, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_544 : @[ToAXI4.scala 266:16]
      node _T_545 = eq(_T_542, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_545 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_89 @[ToAXI4.scala 266:16]
      assert(clock, _T_542, UInt<1>("h1"), "") : assert_89 @[ToAXI4.scala 266:16]
    when inc_44 : @[ToAXI4.scala 268:20]
      write_44 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_44_T = eq(idle_44, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_44_T_1 = and(_idStall_44_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_44_T_2 = eq(count_45, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_44_T_3 = or(_idStall_44_T_1, _idStall_44_T_2) @[ToAXI4.scala 271:34]
    idStall[44] <= _idStall_44_T_3 @[ToAXI4.scala 271:11]
    reg count_46 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_45 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_45) @[ToAXI4.scala 258:24]
    node idle_45 = eq(count_46, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_45 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_45 = and(a_sel_45, _inc_T_45) @[ToAXI4.scala 261:22]
    node _dec_T_90 = and(d_sel_45, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_91 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_45 = and(_dec_T_90, _dec_T_91) @[ToAXI4.scala 262:32]
    node _count_T_181 = add(count_46, inc_45) @[ToAXI4.scala 263:24]
    node _count_T_182 = tail(_count_T_181, 1) @[ToAXI4.scala 263:24]
    node _count_T_183 = sub(_count_T_182, dec_45) @[ToAXI4.scala 263:37]
    node _count_T_184 = tail(_count_T_183, 1) @[ToAXI4.scala 263:37]
    count_46 <= _count_T_184 @[ToAXI4.scala 263:15]
    node _T_546 = eq(dec_45, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_547 = neq(count_46, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_548 = or(_T_546, _T_547) @[ToAXI4.scala 265:22]
    node _T_549 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_550 = eq(_T_549, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_550 : @[ToAXI4.scala 265:16]
      node _T_551 = eq(_T_548, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_551 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_90 @[ToAXI4.scala 265:16]
      assert(clock, _T_548, UInt<1>("h1"), "") : assert_90 @[ToAXI4.scala 265:16]
    node _T_552 = eq(inc_45, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_553 = neq(count_46, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_554 = or(_T_552, _T_553) @[ToAXI4.scala 266:22]
    node _T_555 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_556 = eq(_T_555, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_556 : @[ToAXI4.scala 266:16]
      node _T_557 = eq(_T_554, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_557 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_91 @[ToAXI4.scala 266:16]
      assert(clock, _T_554, UInt<1>("h1"), "") : assert_91 @[ToAXI4.scala 266:16]
    when inc_45 : @[ToAXI4.scala 268:20]
      write_45 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_45_T = eq(idle_45, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_45_T_1 = and(_idStall_45_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_45_T_2 = eq(count_46, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_45_T_3 = or(_idStall_45_T_1, _idStall_45_T_2) @[ToAXI4.scala 271:34]
    idStall[45] <= _idStall_45_T_3 @[ToAXI4.scala 271:11]
    reg count_47 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_46 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_46) @[ToAXI4.scala 258:24]
    node idle_46 = eq(count_47, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_46 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_46 = and(a_sel_46, _inc_T_46) @[ToAXI4.scala 261:22]
    node _dec_T_92 = and(d_sel_46, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_93 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_46 = and(_dec_T_92, _dec_T_93) @[ToAXI4.scala 262:32]
    node _count_T_185 = add(count_47, inc_46) @[ToAXI4.scala 263:24]
    node _count_T_186 = tail(_count_T_185, 1) @[ToAXI4.scala 263:24]
    node _count_T_187 = sub(_count_T_186, dec_46) @[ToAXI4.scala 263:37]
    node _count_T_188 = tail(_count_T_187, 1) @[ToAXI4.scala 263:37]
    count_47 <= _count_T_188 @[ToAXI4.scala 263:15]
    node _T_558 = eq(dec_46, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_559 = neq(count_47, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_560 = or(_T_558, _T_559) @[ToAXI4.scala 265:22]
    node _T_561 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_562 = eq(_T_561, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_562 : @[ToAXI4.scala 265:16]
      node _T_563 = eq(_T_560, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_563 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_92 @[ToAXI4.scala 265:16]
      assert(clock, _T_560, UInt<1>("h1"), "") : assert_92 @[ToAXI4.scala 265:16]
    node _T_564 = eq(inc_46, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_565 = neq(count_47, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_566 = or(_T_564, _T_565) @[ToAXI4.scala 266:22]
    node _T_567 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_568 = eq(_T_567, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_568 : @[ToAXI4.scala 266:16]
      node _T_569 = eq(_T_566, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_569 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_93 @[ToAXI4.scala 266:16]
      assert(clock, _T_566, UInt<1>("h1"), "") : assert_93 @[ToAXI4.scala 266:16]
    when inc_46 : @[ToAXI4.scala 268:20]
      write_46 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_46_T = eq(idle_46, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_46_T_1 = and(_idStall_46_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_46_T_2 = eq(count_47, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_46_T_3 = or(_idStall_46_T_1, _idStall_46_T_2) @[ToAXI4.scala 271:34]
    idStall[46] <= _idStall_46_T_3 @[ToAXI4.scala 271:11]
    reg count_48 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_47 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_47) @[ToAXI4.scala 258:24]
    node idle_47 = eq(count_48, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_47 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_47 = and(a_sel_47, _inc_T_47) @[ToAXI4.scala 261:22]
    node _dec_T_94 = and(d_sel_47, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_95 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_47 = and(_dec_T_94, _dec_T_95) @[ToAXI4.scala 262:32]
    node _count_T_189 = add(count_48, inc_47) @[ToAXI4.scala 263:24]
    node _count_T_190 = tail(_count_T_189, 1) @[ToAXI4.scala 263:24]
    node _count_T_191 = sub(_count_T_190, dec_47) @[ToAXI4.scala 263:37]
    node _count_T_192 = tail(_count_T_191, 1) @[ToAXI4.scala 263:37]
    count_48 <= _count_T_192 @[ToAXI4.scala 263:15]
    node _T_570 = eq(dec_47, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_571 = neq(count_48, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_572 = or(_T_570, _T_571) @[ToAXI4.scala 265:22]
    node _T_573 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_574 = eq(_T_573, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_574 : @[ToAXI4.scala 265:16]
      node _T_575 = eq(_T_572, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_575 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_94 @[ToAXI4.scala 265:16]
      assert(clock, _T_572, UInt<1>("h1"), "") : assert_94 @[ToAXI4.scala 265:16]
    node _T_576 = eq(inc_47, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_577 = neq(count_48, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_578 = or(_T_576, _T_577) @[ToAXI4.scala 266:22]
    node _T_579 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_580 = eq(_T_579, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_580 : @[ToAXI4.scala 266:16]
      node _T_581 = eq(_T_578, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_581 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_95 @[ToAXI4.scala 266:16]
      assert(clock, _T_578, UInt<1>("h1"), "") : assert_95 @[ToAXI4.scala 266:16]
    when inc_47 : @[ToAXI4.scala 268:20]
      write_47 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_47_T = eq(idle_47, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_47_T_1 = and(_idStall_47_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_47_T_2 = eq(count_48, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_47_T_3 = or(_idStall_47_T_1, _idStall_47_T_2) @[ToAXI4.scala 271:34]
    idStall[47] <= _idStall_47_T_3 @[ToAXI4.scala 271:11]
    reg count_49 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_48 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_48) @[ToAXI4.scala 258:24]
    node idle_48 = eq(count_49, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_48 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_48 = and(a_sel_48, _inc_T_48) @[ToAXI4.scala 261:22]
    node _dec_T_96 = and(d_sel_48, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_97 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_48 = and(_dec_T_96, _dec_T_97) @[ToAXI4.scala 262:32]
    node _count_T_193 = add(count_49, inc_48) @[ToAXI4.scala 263:24]
    node _count_T_194 = tail(_count_T_193, 1) @[ToAXI4.scala 263:24]
    node _count_T_195 = sub(_count_T_194, dec_48) @[ToAXI4.scala 263:37]
    node _count_T_196 = tail(_count_T_195, 1) @[ToAXI4.scala 263:37]
    count_49 <= _count_T_196 @[ToAXI4.scala 263:15]
    node _T_582 = eq(dec_48, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_583 = neq(count_49, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_584 = or(_T_582, _T_583) @[ToAXI4.scala 265:22]
    node _T_585 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_586 = eq(_T_585, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_586 : @[ToAXI4.scala 265:16]
      node _T_587 = eq(_T_584, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_587 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_96 @[ToAXI4.scala 265:16]
      assert(clock, _T_584, UInt<1>("h1"), "") : assert_96 @[ToAXI4.scala 265:16]
    node _T_588 = eq(inc_48, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_589 = neq(count_49, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_590 = or(_T_588, _T_589) @[ToAXI4.scala 266:22]
    node _T_591 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_592 = eq(_T_591, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_592 : @[ToAXI4.scala 266:16]
      node _T_593 = eq(_T_590, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_593 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_97 @[ToAXI4.scala 266:16]
      assert(clock, _T_590, UInt<1>("h1"), "") : assert_97 @[ToAXI4.scala 266:16]
    when inc_48 : @[ToAXI4.scala 268:20]
      write_48 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_48_T = eq(idle_48, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_48_T_1 = and(_idStall_48_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_48_T_2 = eq(count_49, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_48_T_3 = or(_idStall_48_T_1, _idStall_48_T_2) @[ToAXI4.scala 271:34]
    idStall[48] <= _idStall_48_T_3 @[ToAXI4.scala 271:11]
    reg count_50 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_49 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_49) @[ToAXI4.scala 258:24]
    node idle_49 = eq(count_50, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_49 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_49 = and(a_sel_49, _inc_T_49) @[ToAXI4.scala 261:22]
    node _dec_T_98 = and(d_sel_49, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_99 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_49 = and(_dec_T_98, _dec_T_99) @[ToAXI4.scala 262:32]
    node _count_T_197 = add(count_50, inc_49) @[ToAXI4.scala 263:24]
    node _count_T_198 = tail(_count_T_197, 1) @[ToAXI4.scala 263:24]
    node _count_T_199 = sub(_count_T_198, dec_49) @[ToAXI4.scala 263:37]
    node _count_T_200 = tail(_count_T_199, 1) @[ToAXI4.scala 263:37]
    count_50 <= _count_T_200 @[ToAXI4.scala 263:15]
    node _T_594 = eq(dec_49, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_595 = neq(count_50, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_596 = or(_T_594, _T_595) @[ToAXI4.scala 265:22]
    node _T_597 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_598 = eq(_T_597, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_598 : @[ToAXI4.scala 265:16]
      node _T_599 = eq(_T_596, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_599 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_98 @[ToAXI4.scala 265:16]
      assert(clock, _T_596, UInt<1>("h1"), "") : assert_98 @[ToAXI4.scala 265:16]
    node _T_600 = eq(inc_49, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_601 = neq(count_50, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_602 = or(_T_600, _T_601) @[ToAXI4.scala 266:22]
    node _T_603 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_604 = eq(_T_603, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_604 : @[ToAXI4.scala 266:16]
      node _T_605 = eq(_T_602, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_605 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_99 @[ToAXI4.scala 266:16]
      assert(clock, _T_602, UInt<1>("h1"), "") : assert_99 @[ToAXI4.scala 266:16]
    when inc_49 : @[ToAXI4.scala 268:20]
      write_49 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_49_T = eq(idle_49, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_49_T_1 = and(_idStall_49_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_49_T_2 = eq(count_50, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_49_T_3 = or(_idStall_49_T_1, _idStall_49_T_2) @[ToAXI4.scala 271:34]
    idStall[49] <= _idStall_49_T_3 @[ToAXI4.scala 271:11]
    reg count_51 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_50 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_50) @[ToAXI4.scala 258:24]
    node idle_50 = eq(count_51, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_50 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_50 = and(a_sel_50, _inc_T_50) @[ToAXI4.scala 261:22]
    node _dec_T_100 = and(d_sel_50, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_101 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_50 = and(_dec_T_100, _dec_T_101) @[ToAXI4.scala 262:32]
    node _count_T_201 = add(count_51, inc_50) @[ToAXI4.scala 263:24]
    node _count_T_202 = tail(_count_T_201, 1) @[ToAXI4.scala 263:24]
    node _count_T_203 = sub(_count_T_202, dec_50) @[ToAXI4.scala 263:37]
    node _count_T_204 = tail(_count_T_203, 1) @[ToAXI4.scala 263:37]
    count_51 <= _count_T_204 @[ToAXI4.scala 263:15]
    node _T_606 = eq(dec_50, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_607 = neq(count_51, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_608 = or(_T_606, _T_607) @[ToAXI4.scala 265:22]
    node _T_609 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_610 = eq(_T_609, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_610 : @[ToAXI4.scala 265:16]
      node _T_611 = eq(_T_608, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_611 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_100 @[ToAXI4.scala 265:16]
      assert(clock, _T_608, UInt<1>("h1"), "") : assert_100 @[ToAXI4.scala 265:16]
    node _T_612 = eq(inc_50, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_613 = neq(count_51, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_614 = or(_T_612, _T_613) @[ToAXI4.scala 266:22]
    node _T_615 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_616 = eq(_T_615, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_616 : @[ToAXI4.scala 266:16]
      node _T_617 = eq(_T_614, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_617 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_101 @[ToAXI4.scala 266:16]
      assert(clock, _T_614, UInt<1>("h1"), "") : assert_101 @[ToAXI4.scala 266:16]
    when inc_50 : @[ToAXI4.scala 268:20]
      write_50 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_50_T = eq(idle_50, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_50_T_1 = and(_idStall_50_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_50_T_2 = eq(count_51, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_50_T_3 = or(_idStall_50_T_1, _idStall_50_T_2) @[ToAXI4.scala 271:34]
    idStall[50] <= _idStall_50_T_3 @[ToAXI4.scala 271:11]
    reg count_52 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_51 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_51) @[ToAXI4.scala 258:24]
    node idle_51 = eq(count_52, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_51 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_51 = and(a_sel_51, _inc_T_51) @[ToAXI4.scala 261:22]
    node _dec_T_102 = and(d_sel_51, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_103 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_51 = and(_dec_T_102, _dec_T_103) @[ToAXI4.scala 262:32]
    node _count_T_205 = add(count_52, inc_51) @[ToAXI4.scala 263:24]
    node _count_T_206 = tail(_count_T_205, 1) @[ToAXI4.scala 263:24]
    node _count_T_207 = sub(_count_T_206, dec_51) @[ToAXI4.scala 263:37]
    node _count_T_208 = tail(_count_T_207, 1) @[ToAXI4.scala 263:37]
    count_52 <= _count_T_208 @[ToAXI4.scala 263:15]
    node _T_618 = eq(dec_51, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_619 = neq(count_52, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_620 = or(_T_618, _T_619) @[ToAXI4.scala 265:22]
    node _T_621 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_622 = eq(_T_621, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_622 : @[ToAXI4.scala 265:16]
      node _T_623 = eq(_T_620, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_623 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_102 @[ToAXI4.scala 265:16]
      assert(clock, _T_620, UInt<1>("h1"), "") : assert_102 @[ToAXI4.scala 265:16]
    node _T_624 = eq(inc_51, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_625 = neq(count_52, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_626 = or(_T_624, _T_625) @[ToAXI4.scala 266:22]
    node _T_627 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_628 = eq(_T_627, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_628 : @[ToAXI4.scala 266:16]
      node _T_629 = eq(_T_626, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_629 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_103 @[ToAXI4.scala 266:16]
      assert(clock, _T_626, UInt<1>("h1"), "") : assert_103 @[ToAXI4.scala 266:16]
    when inc_51 : @[ToAXI4.scala 268:20]
      write_51 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_51_T = eq(idle_51, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_51_T_1 = and(_idStall_51_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_51_T_2 = eq(count_52, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_51_T_3 = or(_idStall_51_T_1, _idStall_51_T_2) @[ToAXI4.scala 271:34]
    idStall[51] <= _idStall_51_T_3 @[ToAXI4.scala 271:11]
    reg count_53 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_52 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_52) @[ToAXI4.scala 258:24]
    node idle_52 = eq(count_53, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_52 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_52 = and(a_sel_52, _inc_T_52) @[ToAXI4.scala 261:22]
    node _dec_T_104 = and(d_sel_52, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_105 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_52 = and(_dec_T_104, _dec_T_105) @[ToAXI4.scala 262:32]
    node _count_T_209 = add(count_53, inc_52) @[ToAXI4.scala 263:24]
    node _count_T_210 = tail(_count_T_209, 1) @[ToAXI4.scala 263:24]
    node _count_T_211 = sub(_count_T_210, dec_52) @[ToAXI4.scala 263:37]
    node _count_T_212 = tail(_count_T_211, 1) @[ToAXI4.scala 263:37]
    count_53 <= _count_T_212 @[ToAXI4.scala 263:15]
    node _T_630 = eq(dec_52, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_631 = neq(count_53, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_632 = or(_T_630, _T_631) @[ToAXI4.scala 265:22]
    node _T_633 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_634 = eq(_T_633, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_634 : @[ToAXI4.scala 265:16]
      node _T_635 = eq(_T_632, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_635 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_104 @[ToAXI4.scala 265:16]
      assert(clock, _T_632, UInt<1>("h1"), "") : assert_104 @[ToAXI4.scala 265:16]
    node _T_636 = eq(inc_52, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_637 = neq(count_53, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_638 = or(_T_636, _T_637) @[ToAXI4.scala 266:22]
    node _T_639 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_640 = eq(_T_639, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_640 : @[ToAXI4.scala 266:16]
      node _T_641 = eq(_T_638, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_641 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_105 @[ToAXI4.scala 266:16]
      assert(clock, _T_638, UInt<1>("h1"), "") : assert_105 @[ToAXI4.scala 266:16]
    when inc_52 : @[ToAXI4.scala 268:20]
      write_52 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_52_T = eq(idle_52, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_52_T_1 = and(_idStall_52_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_52_T_2 = eq(count_53, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_52_T_3 = or(_idStall_52_T_1, _idStall_52_T_2) @[ToAXI4.scala 271:34]
    idStall[52] <= _idStall_52_T_3 @[ToAXI4.scala 271:11]
    reg count_54 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_53 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_53) @[ToAXI4.scala 258:24]
    node idle_53 = eq(count_54, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_53 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_53 = and(a_sel_53, _inc_T_53) @[ToAXI4.scala 261:22]
    node _dec_T_106 = and(d_sel_53, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_107 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_53 = and(_dec_T_106, _dec_T_107) @[ToAXI4.scala 262:32]
    node _count_T_213 = add(count_54, inc_53) @[ToAXI4.scala 263:24]
    node _count_T_214 = tail(_count_T_213, 1) @[ToAXI4.scala 263:24]
    node _count_T_215 = sub(_count_T_214, dec_53) @[ToAXI4.scala 263:37]
    node _count_T_216 = tail(_count_T_215, 1) @[ToAXI4.scala 263:37]
    count_54 <= _count_T_216 @[ToAXI4.scala 263:15]
    node _T_642 = eq(dec_53, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_643 = neq(count_54, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_644 = or(_T_642, _T_643) @[ToAXI4.scala 265:22]
    node _T_645 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_646 = eq(_T_645, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_646 : @[ToAXI4.scala 265:16]
      node _T_647 = eq(_T_644, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_647 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_106 @[ToAXI4.scala 265:16]
      assert(clock, _T_644, UInt<1>("h1"), "") : assert_106 @[ToAXI4.scala 265:16]
    node _T_648 = eq(inc_53, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_649 = neq(count_54, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_650 = or(_T_648, _T_649) @[ToAXI4.scala 266:22]
    node _T_651 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_652 = eq(_T_651, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_652 : @[ToAXI4.scala 266:16]
      node _T_653 = eq(_T_650, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_653 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_107 @[ToAXI4.scala 266:16]
      assert(clock, _T_650, UInt<1>("h1"), "") : assert_107 @[ToAXI4.scala 266:16]
    when inc_53 : @[ToAXI4.scala 268:20]
      write_53 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_53_T = eq(idle_53, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_53_T_1 = and(_idStall_53_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_53_T_2 = eq(count_54, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_53_T_3 = or(_idStall_53_T_1, _idStall_53_T_2) @[ToAXI4.scala 271:34]
    idStall[53] <= _idStall_53_T_3 @[ToAXI4.scala 271:11]
    reg count_55 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_54 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_54) @[ToAXI4.scala 258:24]
    node idle_54 = eq(count_55, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_54 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_54 = and(a_sel_54, _inc_T_54) @[ToAXI4.scala 261:22]
    node _dec_T_108 = and(d_sel_54, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_109 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_54 = and(_dec_T_108, _dec_T_109) @[ToAXI4.scala 262:32]
    node _count_T_217 = add(count_55, inc_54) @[ToAXI4.scala 263:24]
    node _count_T_218 = tail(_count_T_217, 1) @[ToAXI4.scala 263:24]
    node _count_T_219 = sub(_count_T_218, dec_54) @[ToAXI4.scala 263:37]
    node _count_T_220 = tail(_count_T_219, 1) @[ToAXI4.scala 263:37]
    count_55 <= _count_T_220 @[ToAXI4.scala 263:15]
    node _T_654 = eq(dec_54, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_655 = neq(count_55, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_656 = or(_T_654, _T_655) @[ToAXI4.scala 265:22]
    node _T_657 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_658 = eq(_T_657, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_658 : @[ToAXI4.scala 265:16]
      node _T_659 = eq(_T_656, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_659 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_108 @[ToAXI4.scala 265:16]
      assert(clock, _T_656, UInt<1>("h1"), "") : assert_108 @[ToAXI4.scala 265:16]
    node _T_660 = eq(inc_54, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_661 = neq(count_55, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_662 = or(_T_660, _T_661) @[ToAXI4.scala 266:22]
    node _T_663 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_664 = eq(_T_663, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_664 : @[ToAXI4.scala 266:16]
      node _T_665 = eq(_T_662, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_665 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_109 @[ToAXI4.scala 266:16]
      assert(clock, _T_662, UInt<1>("h1"), "") : assert_109 @[ToAXI4.scala 266:16]
    when inc_54 : @[ToAXI4.scala 268:20]
      write_54 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_54_T = eq(idle_54, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_54_T_1 = and(_idStall_54_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_54_T_2 = eq(count_55, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_54_T_3 = or(_idStall_54_T_1, _idStall_54_T_2) @[ToAXI4.scala 271:34]
    idStall[54] <= _idStall_54_T_3 @[ToAXI4.scala 271:11]
    reg count_56 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_55 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_55) @[ToAXI4.scala 258:24]
    node idle_55 = eq(count_56, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_55 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_55 = and(a_sel_55, _inc_T_55) @[ToAXI4.scala 261:22]
    node _dec_T_110 = and(d_sel_55, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_111 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_55 = and(_dec_T_110, _dec_T_111) @[ToAXI4.scala 262:32]
    node _count_T_221 = add(count_56, inc_55) @[ToAXI4.scala 263:24]
    node _count_T_222 = tail(_count_T_221, 1) @[ToAXI4.scala 263:24]
    node _count_T_223 = sub(_count_T_222, dec_55) @[ToAXI4.scala 263:37]
    node _count_T_224 = tail(_count_T_223, 1) @[ToAXI4.scala 263:37]
    count_56 <= _count_T_224 @[ToAXI4.scala 263:15]
    node _T_666 = eq(dec_55, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_667 = neq(count_56, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_668 = or(_T_666, _T_667) @[ToAXI4.scala 265:22]
    node _T_669 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_670 = eq(_T_669, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_670 : @[ToAXI4.scala 265:16]
      node _T_671 = eq(_T_668, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_671 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_110 @[ToAXI4.scala 265:16]
      assert(clock, _T_668, UInt<1>("h1"), "") : assert_110 @[ToAXI4.scala 265:16]
    node _T_672 = eq(inc_55, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_673 = neq(count_56, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_674 = or(_T_672, _T_673) @[ToAXI4.scala 266:22]
    node _T_675 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_676 = eq(_T_675, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_676 : @[ToAXI4.scala 266:16]
      node _T_677 = eq(_T_674, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_677 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_111 @[ToAXI4.scala 266:16]
      assert(clock, _T_674, UInt<1>("h1"), "") : assert_111 @[ToAXI4.scala 266:16]
    when inc_55 : @[ToAXI4.scala 268:20]
      write_55 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_55_T = eq(idle_55, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_55_T_1 = and(_idStall_55_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_55_T_2 = eq(count_56, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_55_T_3 = or(_idStall_55_T_1, _idStall_55_T_2) @[ToAXI4.scala 271:34]
    idStall[55] <= _idStall_55_T_3 @[ToAXI4.scala 271:11]
    reg count_57 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_56 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_56) @[ToAXI4.scala 258:24]
    node idle_56 = eq(count_57, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_56 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_56 = and(a_sel_56, _inc_T_56) @[ToAXI4.scala 261:22]
    node _dec_T_112 = and(d_sel_56, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_113 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_56 = and(_dec_T_112, _dec_T_113) @[ToAXI4.scala 262:32]
    node _count_T_225 = add(count_57, inc_56) @[ToAXI4.scala 263:24]
    node _count_T_226 = tail(_count_T_225, 1) @[ToAXI4.scala 263:24]
    node _count_T_227 = sub(_count_T_226, dec_56) @[ToAXI4.scala 263:37]
    node _count_T_228 = tail(_count_T_227, 1) @[ToAXI4.scala 263:37]
    count_57 <= _count_T_228 @[ToAXI4.scala 263:15]
    node _T_678 = eq(dec_56, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_679 = neq(count_57, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_680 = or(_T_678, _T_679) @[ToAXI4.scala 265:22]
    node _T_681 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_682 = eq(_T_681, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_682 : @[ToAXI4.scala 265:16]
      node _T_683 = eq(_T_680, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_683 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_112 @[ToAXI4.scala 265:16]
      assert(clock, _T_680, UInt<1>("h1"), "") : assert_112 @[ToAXI4.scala 265:16]
    node _T_684 = eq(inc_56, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_685 = neq(count_57, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_686 = or(_T_684, _T_685) @[ToAXI4.scala 266:22]
    node _T_687 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_688 = eq(_T_687, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_688 : @[ToAXI4.scala 266:16]
      node _T_689 = eq(_T_686, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_689 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_113 @[ToAXI4.scala 266:16]
      assert(clock, _T_686, UInt<1>("h1"), "") : assert_113 @[ToAXI4.scala 266:16]
    when inc_56 : @[ToAXI4.scala 268:20]
      write_56 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_56_T = eq(idle_56, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_56_T_1 = and(_idStall_56_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_56_T_2 = eq(count_57, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_56_T_3 = or(_idStall_56_T_1, _idStall_56_T_2) @[ToAXI4.scala 271:34]
    idStall[56] <= _idStall_56_T_3 @[ToAXI4.scala 271:11]
    reg count_58 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_57 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_57) @[ToAXI4.scala 258:24]
    node idle_57 = eq(count_58, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_57 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_57 = and(a_sel_57, _inc_T_57) @[ToAXI4.scala 261:22]
    node _dec_T_114 = and(d_sel_57, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_115 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_57 = and(_dec_T_114, _dec_T_115) @[ToAXI4.scala 262:32]
    node _count_T_229 = add(count_58, inc_57) @[ToAXI4.scala 263:24]
    node _count_T_230 = tail(_count_T_229, 1) @[ToAXI4.scala 263:24]
    node _count_T_231 = sub(_count_T_230, dec_57) @[ToAXI4.scala 263:37]
    node _count_T_232 = tail(_count_T_231, 1) @[ToAXI4.scala 263:37]
    count_58 <= _count_T_232 @[ToAXI4.scala 263:15]
    node _T_690 = eq(dec_57, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_691 = neq(count_58, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_692 = or(_T_690, _T_691) @[ToAXI4.scala 265:22]
    node _T_693 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_694 = eq(_T_693, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_694 : @[ToAXI4.scala 265:16]
      node _T_695 = eq(_T_692, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_695 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_114 @[ToAXI4.scala 265:16]
      assert(clock, _T_692, UInt<1>("h1"), "") : assert_114 @[ToAXI4.scala 265:16]
    node _T_696 = eq(inc_57, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_697 = neq(count_58, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_698 = or(_T_696, _T_697) @[ToAXI4.scala 266:22]
    node _T_699 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_700 = eq(_T_699, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_700 : @[ToAXI4.scala 266:16]
      node _T_701 = eq(_T_698, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_701 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_115 @[ToAXI4.scala 266:16]
      assert(clock, _T_698, UInt<1>("h1"), "") : assert_115 @[ToAXI4.scala 266:16]
    when inc_57 : @[ToAXI4.scala 268:20]
      write_57 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_57_T = eq(idle_57, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_57_T_1 = and(_idStall_57_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_57_T_2 = eq(count_58, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_57_T_3 = or(_idStall_57_T_1, _idStall_57_T_2) @[ToAXI4.scala 271:34]
    idStall[57] <= _idStall_57_T_3 @[ToAXI4.scala 271:11]
    reg count_59 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_58 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_58) @[ToAXI4.scala 258:24]
    node idle_58 = eq(count_59, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_58 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_58 = and(a_sel_58, _inc_T_58) @[ToAXI4.scala 261:22]
    node _dec_T_116 = and(d_sel_58, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_117 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_58 = and(_dec_T_116, _dec_T_117) @[ToAXI4.scala 262:32]
    node _count_T_233 = add(count_59, inc_58) @[ToAXI4.scala 263:24]
    node _count_T_234 = tail(_count_T_233, 1) @[ToAXI4.scala 263:24]
    node _count_T_235 = sub(_count_T_234, dec_58) @[ToAXI4.scala 263:37]
    node _count_T_236 = tail(_count_T_235, 1) @[ToAXI4.scala 263:37]
    count_59 <= _count_T_236 @[ToAXI4.scala 263:15]
    node _T_702 = eq(dec_58, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_703 = neq(count_59, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_704 = or(_T_702, _T_703) @[ToAXI4.scala 265:22]
    node _T_705 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_706 = eq(_T_705, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_706 : @[ToAXI4.scala 265:16]
      node _T_707 = eq(_T_704, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_707 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_116 @[ToAXI4.scala 265:16]
      assert(clock, _T_704, UInt<1>("h1"), "") : assert_116 @[ToAXI4.scala 265:16]
    node _T_708 = eq(inc_58, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_709 = neq(count_59, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_710 = or(_T_708, _T_709) @[ToAXI4.scala 266:22]
    node _T_711 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_712 = eq(_T_711, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_712 : @[ToAXI4.scala 266:16]
      node _T_713 = eq(_T_710, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_713 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_117 @[ToAXI4.scala 266:16]
      assert(clock, _T_710, UInt<1>("h1"), "") : assert_117 @[ToAXI4.scala 266:16]
    when inc_58 : @[ToAXI4.scala 268:20]
      write_58 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_58_T = eq(idle_58, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_58_T_1 = and(_idStall_58_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_58_T_2 = eq(count_59, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_58_T_3 = or(_idStall_58_T_1, _idStall_58_T_2) @[ToAXI4.scala 271:34]
    idStall[58] <= _idStall_58_T_3 @[ToAXI4.scala 271:11]
    reg count_60 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_59 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_59) @[ToAXI4.scala 258:24]
    node idle_59 = eq(count_60, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_59 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_59 = and(a_sel_59, _inc_T_59) @[ToAXI4.scala 261:22]
    node _dec_T_118 = and(d_sel_59, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_119 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_59 = and(_dec_T_118, _dec_T_119) @[ToAXI4.scala 262:32]
    node _count_T_237 = add(count_60, inc_59) @[ToAXI4.scala 263:24]
    node _count_T_238 = tail(_count_T_237, 1) @[ToAXI4.scala 263:24]
    node _count_T_239 = sub(_count_T_238, dec_59) @[ToAXI4.scala 263:37]
    node _count_T_240 = tail(_count_T_239, 1) @[ToAXI4.scala 263:37]
    count_60 <= _count_T_240 @[ToAXI4.scala 263:15]
    node _T_714 = eq(dec_59, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_715 = neq(count_60, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_716 = or(_T_714, _T_715) @[ToAXI4.scala 265:22]
    node _T_717 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_718 = eq(_T_717, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_718 : @[ToAXI4.scala 265:16]
      node _T_719 = eq(_T_716, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_719 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_118 @[ToAXI4.scala 265:16]
      assert(clock, _T_716, UInt<1>("h1"), "") : assert_118 @[ToAXI4.scala 265:16]
    node _T_720 = eq(inc_59, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_721 = neq(count_60, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_722 = or(_T_720, _T_721) @[ToAXI4.scala 266:22]
    node _T_723 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_724 = eq(_T_723, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_724 : @[ToAXI4.scala 266:16]
      node _T_725 = eq(_T_722, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_725 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_119 @[ToAXI4.scala 266:16]
      assert(clock, _T_722, UInt<1>("h1"), "") : assert_119 @[ToAXI4.scala 266:16]
    when inc_59 : @[ToAXI4.scala 268:20]
      write_59 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_59_T = eq(idle_59, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_59_T_1 = and(_idStall_59_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_59_T_2 = eq(count_60, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_59_T_3 = or(_idStall_59_T_1, _idStall_59_T_2) @[ToAXI4.scala 271:34]
    idStall[59] <= _idStall_59_T_3 @[ToAXI4.scala 271:11]
    reg count_61 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_60 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_60) @[ToAXI4.scala 258:24]
    node idle_60 = eq(count_61, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_60 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_60 = and(a_sel_60, _inc_T_60) @[ToAXI4.scala 261:22]
    node _dec_T_120 = and(d_sel_60, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_121 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_60 = and(_dec_T_120, _dec_T_121) @[ToAXI4.scala 262:32]
    node _count_T_241 = add(count_61, inc_60) @[ToAXI4.scala 263:24]
    node _count_T_242 = tail(_count_T_241, 1) @[ToAXI4.scala 263:24]
    node _count_T_243 = sub(_count_T_242, dec_60) @[ToAXI4.scala 263:37]
    node _count_T_244 = tail(_count_T_243, 1) @[ToAXI4.scala 263:37]
    count_61 <= _count_T_244 @[ToAXI4.scala 263:15]
    node _T_726 = eq(dec_60, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_727 = neq(count_61, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_728 = or(_T_726, _T_727) @[ToAXI4.scala 265:22]
    node _T_729 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_730 = eq(_T_729, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_730 : @[ToAXI4.scala 265:16]
      node _T_731 = eq(_T_728, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_731 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_120 @[ToAXI4.scala 265:16]
      assert(clock, _T_728, UInt<1>("h1"), "") : assert_120 @[ToAXI4.scala 265:16]
    node _T_732 = eq(inc_60, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_733 = neq(count_61, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_734 = or(_T_732, _T_733) @[ToAXI4.scala 266:22]
    node _T_735 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_736 = eq(_T_735, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_736 : @[ToAXI4.scala 266:16]
      node _T_737 = eq(_T_734, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_737 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_121 @[ToAXI4.scala 266:16]
      assert(clock, _T_734, UInt<1>("h1"), "") : assert_121 @[ToAXI4.scala 266:16]
    when inc_60 : @[ToAXI4.scala 268:20]
      write_60 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_60_T = eq(idle_60, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_60_T_1 = and(_idStall_60_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_60_T_2 = eq(count_61, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_60_T_3 = or(_idStall_60_T_1, _idStall_60_T_2) @[ToAXI4.scala 271:34]
    idStall[60] <= _idStall_60_T_3 @[ToAXI4.scala 271:11]
    reg count_62 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_61 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_61) @[ToAXI4.scala 258:24]
    node idle_61 = eq(count_62, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_61 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_61 = and(a_sel_61, _inc_T_61) @[ToAXI4.scala 261:22]
    node _dec_T_122 = and(d_sel_61, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_123 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_61 = and(_dec_T_122, _dec_T_123) @[ToAXI4.scala 262:32]
    node _count_T_245 = add(count_62, inc_61) @[ToAXI4.scala 263:24]
    node _count_T_246 = tail(_count_T_245, 1) @[ToAXI4.scala 263:24]
    node _count_T_247 = sub(_count_T_246, dec_61) @[ToAXI4.scala 263:37]
    node _count_T_248 = tail(_count_T_247, 1) @[ToAXI4.scala 263:37]
    count_62 <= _count_T_248 @[ToAXI4.scala 263:15]
    node _T_738 = eq(dec_61, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_739 = neq(count_62, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_740 = or(_T_738, _T_739) @[ToAXI4.scala 265:22]
    node _T_741 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_742 = eq(_T_741, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_742 : @[ToAXI4.scala 265:16]
      node _T_743 = eq(_T_740, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_743 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_122 @[ToAXI4.scala 265:16]
      assert(clock, _T_740, UInt<1>("h1"), "") : assert_122 @[ToAXI4.scala 265:16]
    node _T_744 = eq(inc_61, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_745 = neq(count_62, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_746 = or(_T_744, _T_745) @[ToAXI4.scala 266:22]
    node _T_747 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_748 = eq(_T_747, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_748 : @[ToAXI4.scala 266:16]
      node _T_749 = eq(_T_746, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_749 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_123 @[ToAXI4.scala 266:16]
      assert(clock, _T_746, UInt<1>("h1"), "") : assert_123 @[ToAXI4.scala 266:16]
    when inc_61 : @[ToAXI4.scala 268:20]
      write_61 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_61_T = eq(idle_61, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_61_T_1 = and(_idStall_61_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_61_T_2 = eq(count_62, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_61_T_3 = or(_idStall_61_T_1, _idStall_61_T_2) @[ToAXI4.scala 271:34]
    idStall[61] <= _idStall_61_T_3 @[ToAXI4.scala 271:11]
    reg count_63 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_62 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_62) @[ToAXI4.scala 258:24]
    node idle_62 = eq(count_63, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_62 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_62 = and(a_sel_62, _inc_T_62) @[ToAXI4.scala 261:22]
    node _dec_T_124 = and(d_sel_62, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_125 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_62 = and(_dec_T_124, _dec_T_125) @[ToAXI4.scala 262:32]
    node _count_T_249 = add(count_63, inc_62) @[ToAXI4.scala 263:24]
    node _count_T_250 = tail(_count_T_249, 1) @[ToAXI4.scala 263:24]
    node _count_T_251 = sub(_count_T_250, dec_62) @[ToAXI4.scala 263:37]
    node _count_T_252 = tail(_count_T_251, 1) @[ToAXI4.scala 263:37]
    count_63 <= _count_T_252 @[ToAXI4.scala 263:15]
    node _T_750 = eq(dec_62, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_751 = neq(count_63, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_752 = or(_T_750, _T_751) @[ToAXI4.scala 265:22]
    node _T_753 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_754 = eq(_T_753, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_754 : @[ToAXI4.scala 265:16]
      node _T_755 = eq(_T_752, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_755 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_124 @[ToAXI4.scala 265:16]
      assert(clock, _T_752, UInt<1>("h1"), "") : assert_124 @[ToAXI4.scala 265:16]
    node _T_756 = eq(inc_62, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_757 = neq(count_63, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_758 = or(_T_756, _T_757) @[ToAXI4.scala 266:22]
    node _T_759 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_760 = eq(_T_759, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_760 : @[ToAXI4.scala 266:16]
      node _T_761 = eq(_T_758, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_761 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_125 @[ToAXI4.scala 266:16]
      assert(clock, _T_758, UInt<1>("h1"), "") : assert_125 @[ToAXI4.scala 266:16]
    when inc_62 : @[ToAXI4.scala 268:20]
      write_62 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_62_T = eq(idle_62, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_62_T_1 = and(_idStall_62_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_62_T_2 = eq(count_63, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_62_T_3 = or(_idStall_62_T_1, _idStall_62_T_2) @[ToAXI4.scala 271:34]
    idStall[62] <= _idStall_62_T_3 @[ToAXI4.scala 271:11]
    reg count_64 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_63 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_63) @[ToAXI4.scala 258:24]
    node idle_63 = eq(count_64, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_63 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_63 = and(a_sel_63, _inc_T_63) @[ToAXI4.scala 261:22]
    node _dec_T_126 = and(d_sel_63, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_127 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_63 = and(_dec_T_126, _dec_T_127) @[ToAXI4.scala 262:32]
    node _count_T_253 = add(count_64, inc_63) @[ToAXI4.scala 263:24]
    node _count_T_254 = tail(_count_T_253, 1) @[ToAXI4.scala 263:24]
    node _count_T_255 = sub(_count_T_254, dec_63) @[ToAXI4.scala 263:37]
    node _count_T_256 = tail(_count_T_255, 1) @[ToAXI4.scala 263:37]
    count_64 <= _count_T_256 @[ToAXI4.scala 263:15]
    node _T_762 = eq(dec_63, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_763 = neq(count_64, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_764 = or(_T_762, _T_763) @[ToAXI4.scala 265:22]
    node _T_765 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_766 = eq(_T_765, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_766 : @[ToAXI4.scala 265:16]
      node _T_767 = eq(_T_764, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_767 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_126 @[ToAXI4.scala 265:16]
      assert(clock, _T_764, UInt<1>("h1"), "") : assert_126 @[ToAXI4.scala 265:16]
    node _T_768 = eq(inc_63, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_769 = neq(count_64, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_770 = or(_T_768, _T_769) @[ToAXI4.scala 266:22]
    node _T_771 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_772 = eq(_T_771, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_772 : @[ToAXI4.scala 266:16]
      node _T_773 = eq(_T_770, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_773 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_127 @[ToAXI4.scala 266:16]
      assert(clock, _T_770, UInt<1>("h1"), "") : assert_127 @[ToAXI4.scala 266:16]
    when inc_63 : @[ToAXI4.scala 268:20]
      write_63 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_63_T = eq(idle_63, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_63_T_1 = and(_idStall_63_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_63_T_2 = eq(count_64, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_63_T_3 = or(_idStall_63_T_1, _idStall_63_T_2) @[ToAXI4.scala 271:34]
    idStall[63] <= _idStall_63_T_3 @[ToAXI4.scala 271:11]
    reg count_65 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_64 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_64) @[ToAXI4.scala 258:24]
    node idle_64 = eq(count_65, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_64 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_64 = and(a_sel_64, _inc_T_64) @[ToAXI4.scala 261:22]
    node _dec_T_128 = and(d_sel_64, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_129 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_64 = and(_dec_T_128, _dec_T_129) @[ToAXI4.scala 262:32]
    node _count_T_257 = add(count_65, inc_64) @[ToAXI4.scala 263:24]
    node _count_T_258 = tail(_count_T_257, 1) @[ToAXI4.scala 263:24]
    node _count_T_259 = sub(_count_T_258, dec_64) @[ToAXI4.scala 263:37]
    node _count_T_260 = tail(_count_T_259, 1) @[ToAXI4.scala 263:37]
    count_65 <= _count_T_260 @[ToAXI4.scala 263:15]
    node _T_774 = eq(dec_64, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_775 = neq(count_65, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_776 = or(_T_774, _T_775) @[ToAXI4.scala 265:22]
    node _T_777 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_778 = eq(_T_777, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_778 : @[ToAXI4.scala 265:16]
      node _T_779 = eq(_T_776, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_779 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_128 @[ToAXI4.scala 265:16]
      assert(clock, _T_776, UInt<1>("h1"), "") : assert_128 @[ToAXI4.scala 265:16]
    node _T_780 = eq(inc_64, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_781 = neq(count_65, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_782 = or(_T_780, _T_781) @[ToAXI4.scala 266:22]
    node _T_783 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_784 = eq(_T_783, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_784 : @[ToAXI4.scala 266:16]
      node _T_785 = eq(_T_782, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_785 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_129 @[ToAXI4.scala 266:16]
      assert(clock, _T_782, UInt<1>("h1"), "") : assert_129 @[ToAXI4.scala 266:16]
    when inc_64 : @[ToAXI4.scala 268:20]
      write_64 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_64_T = eq(idle_64, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_64_T_1 = and(_idStall_64_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_64_T_2 = eq(count_65, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_64_T_3 = or(_idStall_64_T_1, _idStall_64_T_2) @[ToAXI4.scala 271:34]
    idStall[64] <= _idStall_64_T_3 @[ToAXI4.scala 271:11]
    reg count_66 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ToAXI4.scala 257:28]
    reg write_65 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_65) @[ToAXI4.scala 258:24]
    node idle_65 = eq(count_66, UInt<1>("h0")) @[ToAXI4.scala 259:26]
    node _inc_T_65 = and(out_arw.ready, out_arw.valid) @[Decoupled.scala 51:35]
    node inc_65 = and(a_sel_65, _inc_T_65) @[ToAXI4.scala 261:22]
    node _dec_T_130 = and(d_sel_65, d_last) @[ToAXI4.scala 262:22]
    node _dec_T_131 = and(bundleIn_0.d.ready, bundleIn_0.d.valid) @[Decoupled.scala 51:35]
    node dec_65 = and(_dec_T_130, _dec_T_131) @[ToAXI4.scala 262:32]
    node _count_T_261 = add(count_66, inc_65) @[ToAXI4.scala 263:24]
    node _count_T_262 = tail(_count_T_261, 1) @[ToAXI4.scala 263:24]
    node _count_T_263 = sub(_count_T_262, dec_65) @[ToAXI4.scala 263:37]
    node _count_T_264 = tail(_count_T_263, 1) @[ToAXI4.scala 263:37]
    count_66 <= _count_T_264 @[ToAXI4.scala 263:15]
    node _T_786 = eq(dec_65, UInt<1>("h0")) @[ToAXI4.scala 265:17]
    node _T_787 = neq(count_66, UInt<1>("h0")) @[ToAXI4.scala 265:31]
    node _T_788 = or(_T_786, _T_787) @[ToAXI4.scala 265:22]
    node _T_789 = asUInt(reset) @[ToAXI4.scala 265:16]
    node _T_790 = eq(_T_789, UInt<1>("h0")) @[ToAXI4.scala 265:16]
    when _T_790 : @[ToAXI4.scala 265:16]
      node _T_791 = eq(_T_788, UInt<1>("h0")) @[ToAXI4.scala 265:16]
      when _T_791 : @[ToAXI4.scala 265:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:265 assert (!dec || count =/= 0.U)        // underflow\n") : printf_130 @[ToAXI4.scala 265:16]
      assert(clock, _T_788, UInt<1>("h1"), "") : assert_130 @[ToAXI4.scala 265:16]
    node _T_792 = eq(inc_65, UInt<1>("h0")) @[ToAXI4.scala 266:17]
    node _T_793 = neq(count_66, UInt<1>("h1")) @[ToAXI4.scala 266:31]
    node _T_794 = or(_T_792, _T_793) @[ToAXI4.scala 266:22]
    node _T_795 = asUInt(reset) @[ToAXI4.scala 266:16]
    node _T_796 = eq(_T_795, UInt<1>("h0")) @[ToAXI4.scala 266:16]
    when _T_796 : @[ToAXI4.scala 266:16]
      node _T_797 = eq(_T_794, UInt<1>("h0")) @[ToAXI4.scala 266:16]
      when _T_797 : @[ToAXI4.scala 266:16]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToAXI4.scala:266 assert (!inc || count =/= maxCount.U) // overflow\n") : printf_131 @[ToAXI4.scala 266:16]
      assert(clock, _T_794, UInt<1>("h1"), "") : assert_131 @[ToAXI4.scala 266:16]
    when inc_65 : @[ToAXI4.scala 268:20]
      write_65 <= out_arw.bits.wen @[ToAXI4.scala 268:28]
    node _idStall_65_T = eq(idle_65, UInt<1>("h0")) @[ToAXI4.scala 271:15]
    node _idStall_65_T_1 = and(_idStall_65_T, UInt<1>("h0")) @[ToAXI4.scala 271:21]
    node _idStall_65_T_2 = eq(count_66, UInt<1>("h1")) @[ToAXI4.scala 271:44]
    node _idStall_65_T_3 = or(_idStall_65_T_1, _idStall_65_T_2) @[ToAXI4.scala 271:34]
    idStall[65] <= _idStall_65_T_3 @[ToAXI4.scala 271:11]
    wire _WIRE : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.data <= UInt<512>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.mask <= UInt<64>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.address <= UInt<34>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.source <= UInt<7>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.size <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<3>, source : UInt<7>, address : UInt<34>, mask : UInt<64>, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_1.bits <= _WIRE.bits @[Bundles.scala 259:61]
    _WIRE_1.valid <= _WIRE.valid @[Bundles.scala 259:61]
    _WIRE_1.ready <= _WIRE.ready @[Bundles.scala 259:61]
    _WIRE_1.valid <= UInt<1>("h0") @[ToAXI4.scala 275:18]
    wire _WIRE_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_2.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.data <= UInt<512>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.address <= UInt<34>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.source <= UInt<7>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.size <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_2.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_2.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_2.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_3 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<3>, source : UInt<7>, address : UInt<34>, user : { }, echo : { }, data : UInt<512>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_3.bits <= _WIRE_2.bits @[Bundles.scala 260:61]
    _WIRE_3.valid <= _WIRE_2.valid @[Bundles.scala 260:61]
    _WIRE_3.ready <= _WIRE_2.ready @[Bundles.scala 260:61]
    _WIRE_3.ready <= UInt<1>("h1") @[ToAXI4.scala 276:18]
    wire _WIRE_4 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_4.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_4.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_4.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_5 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_5.bits <= _WIRE_4.bits @[Bundles.scala 262:61]
    _WIRE_5.valid <= _WIRE_4.valid @[Bundles.scala 262:61]
    _WIRE_5.ready <= _WIRE_4.ready @[Bundles.scala 262:61]
    _WIRE_5.ready <= UInt<1>("h1") @[ToAXI4.scala 277:18]

  module Queue_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, count : UInt<2>}

    cmem ram : UInt<1> [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, count : UInt<2>}

    cmem ram : UInt<1> [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<2>}, count : UInt<2>}

    cmem ram : UInt<2> [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Xbar :
    input clock : Clock
    input reset : Reset
    output auto : { flip in_1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, flip in_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire io_in_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    io_in_0 is invalid @[Nodes.scala 1215:84]
    wire io_in_1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    io_in_1 is invalid @[Nodes.scala 1215:84]
    wire io_out_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    io_out_0 is invalid @[Nodes.scala 1212:84]
    auto.out <- io_out_0 @[LazyModule.scala 368:12]
    io_in_0 <- auto.in_0 @[LazyModule.scala 366:16]
    io_in_1 <- auto.in_1 @[LazyModule.scala 366:16]
    inst awIn_0 of Queue_18 @[Xbar.scala 71:47]
    awIn_0.clock <= clock
    awIn_0.reset <= reset
    inst awIn_1 of Queue_19 @[Xbar.scala 71:47]
    awIn_1.clock <= clock
    awIn_1.reset <= reset
    inst awOut_0 of Queue_20 @[Xbar.scala 72:47]
    awOut_0.clock <= clock
    awOut_0.reset <= reset
    node _requestARIO_T = xor(io_in_0.ar.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestARIO_T_1 = cvt(_requestARIO_T) @[Parameters.scala 137:45]
    node _requestARIO_T_2 = and(_requestARIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestARIO_T_3 = asSInt(_requestARIO_T_2) @[Parameters.scala 137:50]
    node _requestARIO_T_4 = eq(_requestARIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestARIO_0 : UInt<1>[1] @[Xbar.scala 74:48]
    requestARIO_0[0] <= _requestARIO_T_4 @[Xbar.scala 74:48]
    node _requestARIO_T_5 = xor(io_in_1.ar.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestARIO_T_6 = cvt(_requestARIO_T_5) @[Parameters.scala 137:45]
    node _requestARIO_T_7 = and(_requestARIO_T_6, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestARIO_T_8 = asSInt(_requestARIO_T_7) @[Parameters.scala 137:50]
    node _requestARIO_T_9 = eq(_requestARIO_T_8, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestARIO_1 : UInt<1>[1] @[Xbar.scala 74:48]
    requestARIO_1[0] <= _requestARIO_T_9 @[Xbar.scala 74:48]
    node _requestAWIO_T = xor(io_in_0.aw.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAWIO_T_1 = cvt(_requestAWIO_T) @[Parameters.scala 137:45]
    node _requestAWIO_T_2 = and(_requestAWIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAWIO_T_3 = asSInt(_requestAWIO_T_2) @[Parameters.scala 137:50]
    node _requestAWIO_T_4 = eq(_requestAWIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestAWIO_0 : UInt<1>[1] @[Xbar.scala 75:48]
    requestAWIO_0[0] <= _requestAWIO_T_4 @[Xbar.scala 75:48]
    node _requestAWIO_T_5 = xor(io_in_1.aw.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAWIO_T_6 = cvt(_requestAWIO_T_5) @[Parameters.scala 137:45]
    node _requestAWIO_T_7 = and(_requestAWIO_T_6, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAWIO_T_8 = asSInt(_requestAWIO_T_7) @[Parameters.scala 137:50]
    node _requestAWIO_T_9 = eq(_requestAWIO_T_8, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestAWIO_1 : UInt<1>[1] @[Xbar.scala 75:48]
    requestAWIO_1[0] <= _requestAWIO_T_9 @[Xbar.scala 75:48]
    node _requestROI_uncommonBits_T = or(io_out_0.r.bits.id, UInt<7>("h0")) @[Parameters.scala 52:29]
    node requestROI_uncommonBits = bits(_requestROI_uncommonBits_T, 6, 0) @[Parameters.scala 52:64]
    node _requestROI_T = shr(io_out_0.r.bits.id, 7) @[Parameters.scala 54:10]
    node _requestROI_T_1 = eq(_requestROI_T, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestROI_T_2 = leq(UInt<1>("h0"), requestROI_uncommonBits) @[Parameters.scala 56:34]
    node _requestROI_T_3 = and(_requestROI_T_1, _requestROI_T_2) @[Parameters.scala 54:69]
    node _requestROI_T_4 = leq(requestROI_uncommonBits, UInt<7>("h7f")) @[Parameters.scala 57:20]
    node requestROI_0_0 = and(_requestROI_T_3, _requestROI_T_4) @[Parameters.scala 56:50]
    node _requestROI_uncommonBits_T_1 = or(io_out_0.r.bits.id, UInt<6>("h0")) @[Parameters.scala 52:29]
    node requestROI_uncommonBits_1 = bits(_requestROI_uncommonBits_T_1, 5, 0) @[Parameters.scala 52:64]
    node _requestROI_T_5 = shr(io_out_0.r.bits.id, 6) @[Parameters.scala 54:10]
    node _requestROI_T_6 = eq(_requestROI_T_5, UInt<2>("h2")) @[Parameters.scala 54:32]
    node _requestROI_T_7 = leq(UInt<1>("h0"), requestROI_uncommonBits_1) @[Parameters.scala 56:34]
    node _requestROI_T_8 = and(_requestROI_T_6, _requestROI_T_7) @[Parameters.scala 54:69]
    node _requestROI_T_9 = leq(requestROI_uncommonBits_1, UInt<6>("h3f")) @[Parameters.scala 57:20]
    node requestROI_0_1 = and(_requestROI_T_8, _requestROI_T_9) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T = or(io_out_0.b.bits.id, UInt<7>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits = bits(_requestBOI_uncommonBits_T, 6, 0) @[Parameters.scala 52:64]
    node _requestBOI_T = shr(io_out_0.b.bits.id, 7) @[Parameters.scala 54:10]
    node _requestBOI_T_1 = eq(_requestBOI_T, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestBOI_T_2 = leq(UInt<1>("h0"), requestBOI_uncommonBits) @[Parameters.scala 56:34]
    node _requestBOI_T_3 = and(_requestBOI_T_1, _requestBOI_T_2) @[Parameters.scala 54:69]
    node _requestBOI_T_4 = leq(requestBOI_uncommonBits, UInt<7>("h7f")) @[Parameters.scala 57:20]
    node requestBOI_0_0 = and(_requestBOI_T_3, _requestBOI_T_4) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T_1 = or(io_out_0.b.bits.id, UInt<6>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits_1 = bits(_requestBOI_uncommonBits_T_1, 5, 0) @[Parameters.scala 52:64]
    node _requestBOI_T_5 = shr(io_out_0.b.bits.id, 6) @[Parameters.scala 54:10]
    node _requestBOI_T_6 = eq(_requestBOI_T_5, UInt<2>("h2")) @[Parameters.scala 54:32]
    node _requestBOI_T_7 = leq(UInt<1>("h0"), requestBOI_uncommonBits_1) @[Parameters.scala 56:34]
    node _requestBOI_T_8 = and(_requestBOI_T_6, _requestBOI_T_7) @[Parameters.scala 54:69]
    node _requestBOI_T_9 = leq(requestBOI_uncommonBits_1, UInt<6>("h3f")) @[Parameters.scala 57:20]
    node requestBOI_0_1 = and(_requestBOI_T_8, _requestBOI_T_9) @[Parameters.scala 56:50]
    awIn_0.io.enq.bits <= requestAWIO_0[0] @[Xbar.scala 80:57]
    awIn_1.io.enq.bits <= requestAWIO_1[0] @[Xbar.scala 80:57]
    wire in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}[2] @[Xbar.scala 87:18]
    in[0].r.ready <= io_in_0.r.ready @[BundleMap.scala 247:19]
    in[0].ar.bits.echo.tl_state.source <= io_in_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[0].ar.bits.echo.tl_state.size <= io_in_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[0].ar.bits.qos <= io_in_0.ar.bits.qos @[BundleMap.scala 247:19]
    in[0].ar.bits.prot <= io_in_0.ar.bits.prot @[BundleMap.scala 247:19]
    in[0].ar.bits.cache <= io_in_0.ar.bits.cache @[BundleMap.scala 247:19]
    in[0].ar.bits.lock <= io_in_0.ar.bits.lock @[BundleMap.scala 247:19]
    in[0].ar.bits.burst <= io_in_0.ar.bits.burst @[BundleMap.scala 247:19]
    in[0].ar.bits.size <= io_in_0.ar.bits.size @[BundleMap.scala 247:19]
    in[0].ar.bits.len <= io_in_0.ar.bits.len @[BundleMap.scala 247:19]
    in[0].ar.bits.addr <= io_in_0.ar.bits.addr @[BundleMap.scala 247:19]
    in[0].ar.bits.id <= io_in_0.ar.bits.id @[BundleMap.scala 247:19]
    in[0].ar.valid <= io_in_0.ar.valid @[BundleMap.scala 247:19]
    in[0].b.ready <= io_in_0.b.ready @[BundleMap.scala 247:19]
    in[0].w.bits.last <= io_in_0.w.bits.last @[BundleMap.scala 247:19]
    in[0].w.bits.strb <= io_in_0.w.bits.strb @[BundleMap.scala 247:19]
    in[0].w.bits.data <= io_in_0.w.bits.data @[BundleMap.scala 247:19]
    in[0].w.valid <= io_in_0.w.valid @[BundleMap.scala 247:19]
    in[0].aw.bits.echo.tl_state.source <= io_in_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[0].aw.bits.echo.tl_state.size <= io_in_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[0].aw.bits.qos <= io_in_0.aw.bits.qos @[BundleMap.scala 247:19]
    in[0].aw.bits.prot <= io_in_0.aw.bits.prot @[BundleMap.scala 247:19]
    in[0].aw.bits.cache <= io_in_0.aw.bits.cache @[BundleMap.scala 247:19]
    in[0].aw.bits.lock <= io_in_0.aw.bits.lock @[BundleMap.scala 247:19]
    in[0].aw.bits.burst <= io_in_0.aw.bits.burst @[BundleMap.scala 247:19]
    in[0].aw.bits.size <= io_in_0.aw.bits.size @[BundleMap.scala 247:19]
    in[0].aw.bits.len <= io_in_0.aw.bits.len @[BundleMap.scala 247:19]
    in[0].aw.bits.addr <= io_in_0.aw.bits.addr @[BundleMap.scala 247:19]
    in[0].aw.bits.id <= io_in_0.aw.bits.id @[BundleMap.scala 247:19]
    in[0].aw.valid <= io_in_0.aw.valid @[BundleMap.scala 247:19]
    io_in_0.r.bits.last <= in[0].r.bits.last @[BundleMap.scala 247:19]
    io_in_0.r.bits.echo.tl_state.source <= in[0].r.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    io_in_0.r.bits.echo.tl_state.size <= in[0].r.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    io_in_0.r.bits.resp <= in[0].r.bits.resp @[BundleMap.scala 247:19]
    io_in_0.r.bits.data <= in[0].r.bits.data @[BundleMap.scala 247:19]
    io_in_0.r.bits.id <= in[0].r.bits.id @[BundleMap.scala 247:19]
    io_in_0.r.valid <= in[0].r.valid @[BundleMap.scala 247:19]
    io_in_0.ar.ready <= in[0].ar.ready @[BundleMap.scala 247:19]
    io_in_0.b.bits.echo.tl_state.source <= in[0].b.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    io_in_0.b.bits.echo.tl_state.size <= in[0].b.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    io_in_0.b.bits.resp <= in[0].b.bits.resp @[BundleMap.scala 247:19]
    io_in_0.b.bits.id <= in[0].b.bits.id @[BundleMap.scala 247:19]
    io_in_0.b.valid <= in[0].b.valid @[BundleMap.scala 247:19]
    io_in_0.w.ready <= in[0].w.ready @[BundleMap.scala 247:19]
    io_in_0.aw.ready <= in[0].aw.ready @[BundleMap.scala 247:19]
    node _in_0_aw_bits_id_T = or(io_in_0.aw.bits.id, UInt<1>("h0")) @[Xbar.scala 95:47]
    in[0].aw.bits.id <= _in_0_aw_bits_id_T @[Xbar.scala 95:24]
    node _in_0_ar_bits_id_T = or(io_in_0.ar.bits.id, UInt<1>("h0")) @[Xbar.scala 96:47]
    in[0].ar.bits.id <= _in_0_ar_bits_id_T @[Xbar.scala 96:24]
    node _bundleIn_0_r_bits_id_T = bits(in[0].r.bits.id, 6, 0) @[Xbar.scala 92:65]
    io_in_0.r.bits.id <= _bundleIn_0_r_bits_id_T @[Xbar.scala 97:26]
    node _bundleIn_0_b_bits_id_T = bits(in[0].b.bits.id, 6, 0) @[Xbar.scala 92:65]
    io_in_0.b.bits.id <= _bundleIn_0_b_bits_id_T @[Xbar.scala 98:26]
    awIn_0.io.count is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.bits is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.valid is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.ready is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.bits is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.valid is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.ready is invalid @[Xbar.scala 165:20]
    in[1].r.ready <= io_in_1.r.ready @[BundleMap.scala 247:19]
    in[1].ar.bits.echo.tl_state.size <= UInt<1>("h0") @[ToAXI4.scala 23:14]
    in[1].ar.bits.echo.tl_state.source <= UInt<1>("h0") @[ToAXI4.scala 24:14]
    in[1].ar.bits.qos <= io_in_1.ar.bits.qos @[BundleMap.scala 247:19]
    in[1].ar.bits.prot <= io_in_1.ar.bits.prot @[BundleMap.scala 247:19]
    in[1].ar.bits.cache <= io_in_1.ar.bits.cache @[BundleMap.scala 247:19]
    in[1].ar.bits.lock <= io_in_1.ar.bits.lock @[BundleMap.scala 247:19]
    in[1].ar.bits.burst <= io_in_1.ar.bits.burst @[BundleMap.scala 247:19]
    in[1].ar.bits.size <= io_in_1.ar.bits.size @[BundleMap.scala 247:19]
    in[1].ar.bits.len <= io_in_1.ar.bits.len @[BundleMap.scala 247:19]
    in[1].ar.bits.addr <= io_in_1.ar.bits.addr @[BundleMap.scala 247:19]
    in[1].ar.bits.id <= io_in_1.ar.bits.id @[BundleMap.scala 247:19]
    in[1].ar.valid <= io_in_1.ar.valid @[BundleMap.scala 247:19]
    in[1].b.ready <= io_in_1.b.ready @[BundleMap.scala 247:19]
    in[1].w.bits.last <= io_in_1.w.bits.last @[BundleMap.scala 247:19]
    in[1].w.bits.strb <= io_in_1.w.bits.strb @[BundleMap.scala 247:19]
    in[1].w.bits.data <= io_in_1.w.bits.data @[BundleMap.scala 247:19]
    in[1].w.valid <= io_in_1.w.valid @[BundleMap.scala 247:19]
    in[1].aw.bits.echo.tl_state.size <= UInt<1>("h0") @[ToAXI4.scala 23:14]
    in[1].aw.bits.echo.tl_state.source <= UInt<1>("h0") @[ToAXI4.scala 24:14]
    in[1].aw.bits.qos <= io_in_1.aw.bits.qos @[BundleMap.scala 247:19]
    in[1].aw.bits.prot <= io_in_1.aw.bits.prot @[BundleMap.scala 247:19]
    in[1].aw.bits.cache <= io_in_1.aw.bits.cache @[BundleMap.scala 247:19]
    in[1].aw.bits.lock <= io_in_1.aw.bits.lock @[BundleMap.scala 247:19]
    in[1].aw.bits.burst <= io_in_1.aw.bits.burst @[BundleMap.scala 247:19]
    in[1].aw.bits.size <= io_in_1.aw.bits.size @[BundleMap.scala 247:19]
    in[1].aw.bits.len <= io_in_1.aw.bits.len @[BundleMap.scala 247:19]
    in[1].aw.bits.addr <= io_in_1.aw.bits.addr @[BundleMap.scala 247:19]
    in[1].aw.bits.id <= io_in_1.aw.bits.id @[BundleMap.scala 247:19]
    in[1].aw.valid <= io_in_1.aw.valid @[BundleMap.scala 247:19]
    io_in_1.r.bits.last <= in[1].r.bits.last @[BundleMap.scala 247:19]
    io_in_1.r.bits.resp <= in[1].r.bits.resp @[BundleMap.scala 247:19]
    io_in_1.r.bits.data <= in[1].r.bits.data @[BundleMap.scala 247:19]
    io_in_1.r.bits.id <= in[1].r.bits.id @[BundleMap.scala 247:19]
    io_in_1.r.valid <= in[1].r.valid @[BundleMap.scala 247:19]
    io_in_1.ar.ready <= in[1].ar.ready @[BundleMap.scala 247:19]
    io_in_1.b.bits.resp <= in[1].b.bits.resp @[BundleMap.scala 247:19]
    io_in_1.b.bits.id <= in[1].b.bits.id @[BundleMap.scala 247:19]
    io_in_1.b.valid <= in[1].b.valid @[BundleMap.scala 247:19]
    io_in_1.w.ready <= in[1].w.ready @[BundleMap.scala 247:19]
    io_in_1.aw.ready <= in[1].aw.ready @[BundleMap.scala 247:19]
    node _in_1_aw_bits_id_T = or(io_in_1.aw.bits.id, UInt<8>("h80")) @[Xbar.scala 95:47]
    in[1].aw.bits.id <= _in_1_aw_bits_id_T @[Xbar.scala 95:24]
    node _in_1_ar_bits_id_T = or(io_in_1.ar.bits.id, UInt<8>("h80")) @[Xbar.scala 96:47]
    in[1].ar.bits.id <= _in_1_ar_bits_id_T @[Xbar.scala 96:24]
    node _bundleIn_1_r_bits_id_T = bits(in[1].r.bits.id, 5, 0) @[Xbar.scala 92:65]
    io_in_1.r.bits.id <= _bundleIn_1_r_bits_id_T @[Xbar.scala 97:26]
    node _bundleIn_1_b_bits_id_T = bits(in[1].b.bits.id, 5, 0) @[Xbar.scala 92:65]
    io_in_1.b.bits.id <= _bundleIn_1_b_bits_id_T @[Xbar.scala 98:26]
    awIn_1.io.count is invalid @[Xbar.scala 165:20]
    awIn_1.io.deq.bits is invalid @[Xbar.scala 165:20]
    awIn_1.io.deq.valid is invalid @[Xbar.scala 165:20]
    awIn_1.io.deq.ready is invalid @[Xbar.scala 165:20]
    awIn_1.io.enq.bits is invalid @[Xbar.scala 165:20]
    awIn_1.io.enq.valid is invalid @[Xbar.scala 165:20]
    awIn_1.io.enq.ready is invalid @[Xbar.scala 165:20]
    wire out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}[1] @[Xbar.scala 170:19]
    io_out_0.r.ready <= out[0].r.ready @[BundleMap.scala 247:19]
    io_out_0.ar.bits.echo.tl_state.source <= out[0].ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    io_out_0.ar.bits.echo.tl_state.size <= out[0].ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    io_out_0.ar.bits.qos <= out[0].ar.bits.qos @[BundleMap.scala 247:19]
    io_out_0.ar.bits.prot <= out[0].ar.bits.prot @[BundleMap.scala 247:19]
    io_out_0.ar.bits.cache <= out[0].ar.bits.cache @[BundleMap.scala 247:19]
    io_out_0.ar.bits.lock <= out[0].ar.bits.lock @[BundleMap.scala 247:19]
    io_out_0.ar.bits.burst <= out[0].ar.bits.burst @[BundleMap.scala 247:19]
    io_out_0.ar.bits.size <= out[0].ar.bits.size @[BundleMap.scala 247:19]
    io_out_0.ar.bits.len <= out[0].ar.bits.len @[BundleMap.scala 247:19]
    io_out_0.ar.bits.addr <= out[0].ar.bits.addr @[BundleMap.scala 247:19]
    io_out_0.ar.bits.id <= out[0].ar.bits.id @[BundleMap.scala 247:19]
    io_out_0.ar.valid <= out[0].ar.valid @[BundleMap.scala 247:19]
    io_out_0.b.ready <= out[0].b.ready @[BundleMap.scala 247:19]
    io_out_0.w.bits.last <= out[0].w.bits.last @[BundleMap.scala 247:19]
    io_out_0.w.bits.strb <= out[0].w.bits.strb @[BundleMap.scala 247:19]
    io_out_0.w.bits.data <= out[0].w.bits.data @[BundleMap.scala 247:19]
    io_out_0.w.valid <= out[0].w.valid @[BundleMap.scala 247:19]
    io_out_0.aw.bits.echo.tl_state.source <= out[0].aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    io_out_0.aw.bits.echo.tl_state.size <= out[0].aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    io_out_0.aw.bits.qos <= out[0].aw.bits.qos @[BundleMap.scala 247:19]
    io_out_0.aw.bits.prot <= out[0].aw.bits.prot @[BundleMap.scala 247:19]
    io_out_0.aw.bits.cache <= out[0].aw.bits.cache @[BundleMap.scala 247:19]
    io_out_0.aw.bits.lock <= out[0].aw.bits.lock @[BundleMap.scala 247:19]
    io_out_0.aw.bits.burst <= out[0].aw.bits.burst @[BundleMap.scala 247:19]
    io_out_0.aw.bits.size <= out[0].aw.bits.size @[BundleMap.scala 247:19]
    io_out_0.aw.bits.len <= out[0].aw.bits.len @[BundleMap.scala 247:19]
    io_out_0.aw.bits.addr <= out[0].aw.bits.addr @[BundleMap.scala 247:19]
    io_out_0.aw.bits.id <= out[0].aw.bits.id @[BundleMap.scala 247:19]
    io_out_0.aw.valid <= out[0].aw.valid @[BundleMap.scala 247:19]
    out[0].r.bits.last <= io_out_0.r.bits.last @[BundleMap.scala 247:19]
    out[0].r.bits.echo.tl_state.source <= io_out_0.r.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    out[0].r.bits.echo.tl_state.size <= io_out_0.r.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    out[0].r.bits.resp <= io_out_0.r.bits.resp @[BundleMap.scala 247:19]
    out[0].r.bits.data <= io_out_0.r.bits.data @[BundleMap.scala 247:19]
    out[0].r.bits.id <= io_out_0.r.bits.id @[BundleMap.scala 247:19]
    out[0].r.valid <= io_out_0.r.valid @[BundleMap.scala 247:19]
    out[0].ar.ready <= io_out_0.ar.ready @[BundleMap.scala 247:19]
    out[0].b.bits.echo.tl_state.source <= io_out_0.b.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    out[0].b.bits.echo.tl_state.size <= io_out_0.b.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    out[0].b.bits.resp <= io_out_0.b.bits.resp @[BundleMap.scala 247:19]
    out[0].b.bits.id <= io_out_0.b.bits.id @[BundleMap.scala 247:19]
    out[0].b.valid <= io_out_0.b.valid @[BundleMap.scala 247:19]
    out[0].w.ready <= io_out_0.w.ready @[BundleMap.scala 247:19]
    out[0].aw.ready <= io_out_0.aw.ready @[BundleMap.scala 247:19]
    reg latched : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Xbar.scala 176:30]
    node _x1_aw_valid_T = or(latched, awOut_0.io.enq.ready) @[Xbar.scala 177:59]
    node _x1_aw_valid_T_1 = and(out[0].aw.valid, _x1_aw_valid_T) @[Xbar.scala 177:47]
    io_out_0.aw.valid <= _x1_aw_valid_T_1 @[Xbar.scala 177:28]
    node _out_0_aw_ready_T = or(latched, awOut_0.io.enq.ready) @[Xbar.scala 178:59]
    node _out_0_aw_ready_T_1 = and(io_out_0.aw.ready, _out_0_aw_ready_T) @[Xbar.scala 178:47]
    out[0].aw.ready <= _out_0_aw_ready_T_1 @[Xbar.scala 178:25]
    node _awOut_0_io_enq_valid_T = eq(latched, UInt<1>("h0")) @[Xbar.scala 179:53]
    node _awOut_0_io_enq_valid_T_1 = and(out[0].aw.valid, _awOut_0_io_enq_valid_T) @[Xbar.scala 179:50]
    awOut_0.io.enq.valid <= _awOut_0_io_enq_valid_T_1 @[Xbar.scala 179:31]
    node _T = and(awOut_0.io.enq.ready, awOut_0.io.enq.valid) @[Decoupled.scala 51:35]
    when _T : @[Xbar.scala 180:37]
      latched <= UInt<1>("h1") @[Xbar.scala 180:47]
    node _T_1 = and(out[0].aw.ready, out[0].aw.valid) @[Decoupled.scala 51:35]
    when _T_1 : @[Xbar.scala 181:31]
      latched <= UInt<1>("h0") @[Xbar.scala 181:41]
    node _x1_w_valid_T = and(out[0].w.valid, awOut_0.io.deq.valid) @[Xbar.scala 184:45]
    io_out_0.w.valid <= _x1_w_valid_T @[Xbar.scala 184:27]
    node _out_0_w_ready_T = and(io_out_0.w.ready, awOut_0.io.deq.valid) @[Xbar.scala 185:45]
    out[0].w.ready <= _out_0_w_ready_T @[Xbar.scala 185:24]
    node _awOut_0_io_deq_ready_T = and(out[0].w.valid, out[0].w.bits.last) @[Xbar.scala 186:49]
    node _awOut_0_io_deq_ready_T_1 = and(_awOut_0_io_deq_ready_T, io_out_0.w.ready) @[Xbar.scala 186:71]
    awOut_0.io.deq.ready <= _awOut_0_io_deq_ready_T_1 @[Xbar.scala 186:31]
    wire portsAROI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}[1] @[Xbar.scala 239:24]
    portsAROI_filtered[0].bits.echo.tl_state.source <= in[0].ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.echo.tl_state.size <= in[0].ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.qos <= in[0].ar.bits.qos @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.prot <= in[0].ar.bits.prot @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.cache <= in[0].ar.bits.cache @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.lock <= in[0].ar.bits.lock @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.burst <= in[0].ar.bits.burst @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.size <= in[0].ar.bits.size @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.len <= in[0].ar.bits.len @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.addr <= in[0].ar.bits.addr @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.id <= in[0].ar.bits.id @[BundleMap.scala 247:19]
    node _portsAROI_filtered_0_valid_T = and(in[0].ar.valid, requestARIO_0[0]) @[Xbar.scala 242:40]
    portsAROI_filtered[0].valid <= _portsAROI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].ar.ready <= portsAROI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsAROI_filtered_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}[1] @[Xbar.scala 239:24]
    portsAROI_filtered_1[0].bits.echo.tl_state.source <= in[1].ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.echo.tl_state.size <= in[1].ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.qos <= in[1].ar.bits.qos @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.prot <= in[1].ar.bits.prot @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.cache <= in[1].ar.bits.cache @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.lock <= in[1].ar.bits.lock @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.burst <= in[1].ar.bits.burst @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.size <= in[1].ar.bits.size @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.len <= in[1].ar.bits.len @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.addr <= in[1].ar.bits.addr @[BundleMap.scala 247:19]
    portsAROI_filtered_1[0].bits.id <= in[1].ar.bits.id @[BundleMap.scala 247:19]
    node _portsAROI_filtered_0_valid_T_1 = and(in[1].ar.valid, requestARIO_1[0]) @[Xbar.scala 242:40]
    portsAROI_filtered_1[0].valid <= _portsAROI_filtered_0_valid_T_1 @[Xbar.scala 242:25]
    in[1].ar.ready <= portsAROI_filtered_1[0].ready @[Xbar.scala 244:17]
    wire portsAWOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}[1] @[Xbar.scala 239:24]
    portsAWOI_filtered[0].bits.echo.tl_state.source <= in[0].aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.echo.tl_state.size <= in[0].aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.qos <= in[0].aw.bits.qos @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.prot <= in[0].aw.bits.prot @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.cache <= in[0].aw.bits.cache @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.lock <= in[0].aw.bits.lock @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.burst <= in[0].aw.bits.burst @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.size <= in[0].aw.bits.size @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.len <= in[0].aw.bits.len @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.addr <= in[0].aw.bits.addr @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.id <= in[0].aw.bits.id @[BundleMap.scala 247:19]
    node _portsAWOI_filtered_0_valid_T = and(in[0].aw.valid, requestAWIO_0[0]) @[Xbar.scala 242:40]
    portsAWOI_filtered[0].valid <= _portsAWOI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].aw.ready <= portsAWOI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsAWOI_filtered_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}[1] @[Xbar.scala 239:24]
    portsAWOI_filtered_1[0].bits.echo.tl_state.source <= in[1].aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.echo.tl_state.size <= in[1].aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.qos <= in[1].aw.bits.qos @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.prot <= in[1].aw.bits.prot @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.cache <= in[1].aw.bits.cache @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.lock <= in[1].aw.bits.lock @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.burst <= in[1].aw.bits.burst @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.size <= in[1].aw.bits.size @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.len <= in[1].aw.bits.len @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.addr <= in[1].aw.bits.addr @[BundleMap.scala 247:19]
    portsAWOI_filtered_1[0].bits.id <= in[1].aw.bits.id @[BundleMap.scala 247:19]
    node _portsAWOI_filtered_0_valid_T_1 = and(in[1].aw.valid, requestAWIO_1[0]) @[Xbar.scala 242:40]
    portsAWOI_filtered_1[0].valid <= _portsAWOI_filtered_0_valid_T_1 @[Xbar.scala 242:25]
    in[1].aw.ready <= portsAWOI_filtered_1[0].ready @[Xbar.scala 244:17]
    wire portsWOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}[1] @[Xbar.scala 239:24]
    portsWOI_filtered[0].bits.last <= in[0].w.bits.last @[BundleMap.scala 247:19]
    portsWOI_filtered[0].bits.strb <= in[0].w.bits.strb @[BundleMap.scala 247:19]
    portsWOI_filtered[0].bits.data <= in[0].w.bits.data @[BundleMap.scala 247:19]
    node _portsWOI_filtered_0_valid_T = and(in[0].w.valid, UInt<1>("h1")) @[Xbar.scala 242:40]
    portsWOI_filtered[0].valid <= _portsWOI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].w.ready <= portsWOI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsWOI_filtered_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}[1] @[Xbar.scala 239:24]
    portsWOI_filtered_1[0].bits.last <= in[1].w.bits.last @[BundleMap.scala 247:19]
    portsWOI_filtered_1[0].bits.strb <= in[1].w.bits.strb @[BundleMap.scala 247:19]
    portsWOI_filtered_1[0].bits.data <= in[1].w.bits.data @[BundleMap.scala 247:19]
    node _portsWOI_filtered_0_valid_T_1 = and(in[1].w.valid, UInt<1>("h1")) @[Xbar.scala 242:40]
    portsWOI_filtered_1[0].valid <= _portsWOI_filtered_0_valid_T_1 @[Xbar.scala 242:25]
    in[1].w.ready <= portsWOI_filtered_1[0].ready @[Xbar.scala 244:17]
    wire portsRIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}[2] @[Xbar.scala 239:24]
    portsRIO_filtered[0].bits.last <= out[0].r.bits.last @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.echo.tl_state.source <= out[0].r.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.echo.tl_state.size <= out[0].r.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.resp <= out[0].r.bits.resp @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.data <= out[0].r.bits.data @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.id <= out[0].r.bits.id @[BundleMap.scala 247:19]
    node _portsRIO_filtered_0_valid_T = and(out[0].r.valid, requestROI_0_0) @[Xbar.scala 242:40]
    portsRIO_filtered[0].valid <= _portsRIO_filtered_0_valid_T @[Xbar.scala 242:25]
    portsRIO_filtered[1].bits.last <= out[0].r.bits.last @[BundleMap.scala 247:19]
    portsRIO_filtered[1].bits.echo.tl_state.source <= out[0].r.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsRIO_filtered[1].bits.echo.tl_state.size <= out[0].r.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsRIO_filtered[1].bits.resp <= out[0].r.bits.resp @[BundleMap.scala 247:19]
    portsRIO_filtered[1].bits.data <= out[0].r.bits.data @[BundleMap.scala 247:19]
    portsRIO_filtered[1].bits.id <= out[0].r.bits.id @[BundleMap.scala 247:19]
    node _portsRIO_filtered_1_valid_T = and(out[0].r.valid, requestROI_0_1) @[Xbar.scala 242:40]
    portsRIO_filtered[1].valid <= _portsRIO_filtered_1_valid_T @[Xbar.scala 242:25]
    node _portsRIO_out_0_r_ready_T = mux(requestROI_0_0, portsRIO_filtered[0].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsRIO_out_0_r_ready_T_1 = mux(requestROI_0_1, portsRIO_filtered[1].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsRIO_out_0_r_ready_T_2 = or(_portsRIO_out_0_r_ready_T, _portsRIO_out_0_r_ready_T_1) @[Mux.scala 27:73]
    wire _portsRIO_out_0_r_ready_WIRE : UInt<1> @[Mux.scala 27:73]
    _portsRIO_out_0_r_ready_WIRE <= _portsRIO_out_0_r_ready_T_2 @[Mux.scala 27:73]
    out[0].r.ready <= _portsRIO_out_0_r_ready_WIRE @[Xbar.scala 244:17]
    wire portsBIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}[2] @[Xbar.scala 239:24]
    portsBIO_filtered[0].bits.echo.tl_state.source <= out[0].b.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsBIO_filtered[0].bits.echo.tl_state.size <= out[0].b.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsBIO_filtered[0].bits.resp <= out[0].b.bits.resp @[BundleMap.scala 247:19]
    portsBIO_filtered[0].bits.id <= out[0].b.bits.id @[BundleMap.scala 247:19]
    node _portsBIO_filtered_0_valid_T = and(out[0].b.valid, requestBOI_0_0) @[Xbar.scala 242:40]
    portsBIO_filtered[0].valid <= _portsBIO_filtered_0_valid_T @[Xbar.scala 242:25]
    portsBIO_filtered[1].bits.echo.tl_state.source <= out[0].b.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    portsBIO_filtered[1].bits.echo.tl_state.size <= out[0].b.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    portsBIO_filtered[1].bits.resp <= out[0].b.bits.resp @[BundleMap.scala 247:19]
    portsBIO_filtered[1].bits.id <= out[0].b.bits.id @[BundleMap.scala 247:19]
    node _portsBIO_filtered_1_valid_T = and(out[0].b.valid, requestBOI_0_1) @[Xbar.scala 242:40]
    portsBIO_filtered[1].valid <= _portsBIO_filtered_1_valid_T @[Xbar.scala 242:25]
    node _portsBIO_out_0_b_ready_T = mux(requestBOI_0_0, portsBIO_filtered[0].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_1 = mux(requestBOI_0_1, portsBIO_filtered[1].ready, UInt<1>("h0")) @[Mux.scala 27:73]
    node _portsBIO_out_0_b_ready_T_2 = or(_portsBIO_out_0_b_ready_T, _portsBIO_out_0_b_ready_T_1) @[Mux.scala 27:73]
    wire _portsBIO_out_0_b_ready_WIRE : UInt<1> @[Mux.scala 27:73]
    _portsBIO_out_0_b_ready_WIRE <= _portsBIO_out_0_b_ready_T_2 @[Mux.scala 27:73]
    out[0].b.ready <= _portsBIO_out_0_b_ready_WIRE @[Xbar.scala 244:17]
    reg awOut_0_io_enq_bits_idle : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    node awOut_0_io_enq_bits_anyValid = or(portsAWOI_filtered[0].valid, portsAWOI_filtered_1[0].valid) @[Xbar.scala 266:36]
    node _awOut_0_io_enq_bits_readys_T = cat(portsAWOI_filtered_1[0].valid, portsAWOI_filtered[0].valid) @[Cat.scala 33:92]
    node awOut_0_io_enq_bits_readys_valid = bits(_awOut_0_io_enq_bits_readys_T, 1, 0) @[Arbiter.scala 22:23]
    node _awOut_0_io_enq_bits_readys_T_1 = eq(awOut_0_io_enq_bits_readys_valid, _awOut_0_io_enq_bits_readys_T) @[Arbiter.scala 23:19]
    node _awOut_0_io_enq_bits_readys_T_2 = asUInt(reset) @[Arbiter.scala 23:12]
    node _awOut_0_io_enq_bits_readys_T_3 = eq(_awOut_0_io_enq_bits_readys_T_2, UInt<1>("h0")) @[Arbiter.scala 23:12]
    when _awOut_0_io_enq_bits_readys_T_3 : @[Arbiter.scala 23:12]
      node _awOut_0_io_enq_bits_readys_T_4 = eq(_awOut_0_io_enq_bits_readys_T_1, UInt<1>("h0")) @[Arbiter.scala 23:12]
      when _awOut_0_io_enq_bits_readys_T_4 : @[Arbiter.scala 23:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:23 assert (valid === valids)\n") : awOut_0_io_enq_bits_readys_printf @[Arbiter.scala 23:12]
      assert(clock, _awOut_0_io_enq_bits_readys_T_1, UInt<1>("h1"), "") : awOut_0_io_enq_bits_readys_assert @[Arbiter.scala 23:12]
    reg awOut_0_io_enq_bits_readys_mask : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[Arbiter.scala 24:23]
    node _awOut_0_io_enq_bits_readys_filter_T = not(awOut_0_io_enq_bits_readys_mask) @[Arbiter.scala 25:30]
    node _awOut_0_io_enq_bits_readys_filter_T_1 = and(awOut_0_io_enq_bits_readys_valid, _awOut_0_io_enq_bits_readys_filter_T) @[Arbiter.scala 25:28]
    node awOut_0_io_enq_bits_readys_filter = cat(_awOut_0_io_enq_bits_readys_filter_T_1, awOut_0_io_enq_bits_readys_valid) @[Cat.scala 33:92]
    node _awOut_0_io_enq_bits_readys_unready_T = shr(awOut_0_io_enq_bits_readys_filter, 1) @[package.scala 254:48]
    node _awOut_0_io_enq_bits_readys_unready_T_1 = or(awOut_0_io_enq_bits_readys_filter, _awOut_0_io_enq_bits_readys_unready_T) @[package.scala 254:43]
    node _awOut_0_io_enq_bits_readys_unready_T_2 = bits(_awOut_0_io_enq_bits_readys_unready_T_1, 3, 0) @[package.scala 255:17]
    node _awOut_0_io_enq_bits_readys_unready_T_3 = shr(_awOut_0_io_enq_bits_readys_unready_T_2, 1) @[Arbiter.scala 26:52]
    node _awOut_0_io_enq_bits_readys_unready_T_4 = shl(awOut_0_io_enq_bits_readys_mask, 2) @[Arbiter.scala 26:66]
    node awOut_0_io_enq_bits_readys_unready = or(_awOut_0_io_enq_bits_readys_unready_T_3, _awOut_0_io_enq_bits_readys_unready_T_4) @[Arbiter.scala 26:58]
    node _awOut_0_io_enq_bits_readys_readys_T = shr(awOut_0_io_enq_bits_readys_unready, 2) @[Arbiter.scala 27:29]
    node _awOut_0_io_enq_bits_readys_readys_T_1 = bits(awOut_0_io_enq_bits_readys_unready, 1, 0) @[Arbiter.scala 27:48]
    node _awOut_0_io_enq_bits_readys_readys_T_2 = and(_awOut_0_io_enq_bits_readys_readys_T, _awOut_0_io_enq_bits_readys_readys_T_1) @[Arbiter.scala 27:39]
    node awOut_0_io_enq_bits_readys_readys = not(_awOut_0_io_enq_bits_readys_readys_T_2) @[Arbiter.scala 27:18]
    node _awOut_0_io_enq_bits_readys_T_5 = orr(awOut_0_io_enq_bits_readys_valid) @[Arbiter.scala 28:27]
    node _awOut_0_io_enq_bits_readys_T_6 = and(awOut_0_io_enq_bits_idle, _awOut_0_io_enq_bits_readys_T_5) @[Arbiter.scala 28:18]
    when _awOut_0_io_enq_bits_readys_T_6 : @[Arbiter.scala 28:32]
      node _awOut_0_io_enq_bits_readys_mask_T = and(awOut_0_io_enq_bits_readys_readys, awOut_0_io_enq_bits_readys_valid) @[Arbiter.scala 29:29]
      node _awOut_0_io_enq_bits_readys_mask_T_1 = shl(_awOut_0_io_enq_bits_readys_mask_T, 1) @[package.scala 245:48]
      node _awOut_0_io_enq_bits_readys_mask_T_2 = bits(_awOut_0_io_enq_bits_readys_mask_T_1, 1, 0) @[package.scala 245:53]
      node _awOut_0_io_enq_bits_readys_mask_T_3 = or(_awOut_0_io_enq_bits_readys_mask_T, _awOut_0_io_enq_bits_readys_mask_T_2) @[package.scala 245:43]
      node _awOut_0_io_enq_bits_readys_mask_T_4 = bits(_awOut_0_io_enq_bits_readys_mask_T_3, 1, 0) @[package.scala 246:17]
      awOut_0_io_enq_bits_readys_mask <= _awOut_0_io_enq_bits_readys_mask_T_4 @[Arbiter.scala 29:12]
    node _awOut_0_io_enq_bits_readys_T_7 = bits(awOut_0_io_enq_bits_readys_readys, 1, 0) @[Arbiter.scala 31:11]
    node _awOut_0_io_enq_bits_readys_T_8 = bits(_awOut_0_io_enq_bits_readys_T_7, 0, 0) @[Xbar.scala 268:73]
    node _awOut_0_io_enq_bits_readys_T_9 = bits(_awOut_0_io_enq_bits_readys_T_7, 1, 1) @[Xbar.scala 268:73]
    wire awOut_0_io_enq_bits_readys : UInt<1>[2] @[Xbar.scala 268:25]
    awOut_0_io_enq_bits_readys[0] <= _awOut_0_io_enq_bits_readys_T_8 @[Xbar.scala 268:25]
    awOut_0_io_enq_bits_readys[1] <= _awOut_0_io_enq_bits_readys_T_9 @[Xbar.scala 268:25]
    node _awOut_0_io_enq_bits_winner_T = and(awOut_0_io_enq_bits_readys[0], portsAWOI_filtered[0].valid) @[Xbar.scala 270:67]
    node _awOut_0_io_enq_bits_winner_T_1 = and(awOut_0_io_enq_bits_readys[1], portsAWOI_filtered_1[0].valid) @[Xbar.scala 270:67]
    wire awOut_0_io_enq_bits_winner : UInt<1>[2] @[Xbar.scala 270:25]
    awOut_0_io_enq_bits_winner[0] <= _awOut_0_io_enq_bits_winner_T @[Xbar.scala 270:25]
    awOut_0_io_enq_bits_winner[1] <= _awOut_0_io_enq_bits_winner_T_1 @[Xbar.scala 270:25]
    node awOut_0_io_enq_bits_prefixOR_1 = or(UInt<1>("h0"), awOut_0_io_enq_bits_winner[0]) @[Xbar.scala 275:46]
    node _awOut_0_io_enq_bits_prefixOR_T = or(awOut_0_io_enq_bits_prefixOR_1, awOut_0_io_enq_bits_winner[1]) @[Xbar.scala 275:46]
    node _awOut_0_io_enq_bits_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _awOut_0_io_enq_bits_T_1 = eq(awOut_0_io_enq_bits_winner[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _awOut_0_io_enq_bits_T_2 = or(_awOut_0_io_enq_bits_T, _awOut_0_io_enq_bits_T_1) @[Xbar.scala 276:57]
    node _awOut_0_io_enq_bits_T_3 = eq(awOut_0_io_enq_bits_prefixOR_1, UInt<1>("h0")) @[Xbar.scala 276:54]
    node _awOut_0_io_enq_bits_T_4 = eq(awOut_0_io_enq_bits_winner[1], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _awOut_0_io_enq_bits_T_5 = or(_awOut_0_io_enq_bits_T_3, _awOut_0_io_enq_bits_T_4) @[Xbar.scala 276:57]
    node _awOut_0_io_enq_bits_T_6 = and(_awOut_0_io_enq_bits_T_2, _awOut_0_io_enq_bits_T_5) @[Xbar.scala 276:75]
    node _awOut_0_io_enq_bits_T_7 = asUInt(reset) @[Xbar.scala 276:11]
    node _awOut_0_io_enq_bits_T_8 = eq(_awOut_0_io_enq_bits_T_7, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _awOut_0_io_enq_bits_T_8 : @[Xbar.scala 276:11]
      node _awOut_0_io_enq_bits_T_9 = eq(_awOut_0_io_enq_bits_T_6, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _awOut_0_io_enq_bits_T_9 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : awOut_0_io_enq_bits_printf @[Xbar.scala 276:11]
      assert(clock, _awOut_0_io_enq_bits_T_6, UInt<1>("h1"), "") : awOut_0_io_enq_bits_assert @[Xbar.scala 276:11]
    node _awOut_0_io_enq_bits_T_10 = eq(awOut_0_io_enq_bits_anyValid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _awOut_0_io_enq_bits_T_11 = or(awOut_0_io_enq_bits_winner[0], awOut_0_io_enq_bits_winner[1]) @[Xbar.scala 278:41]
    node _awOut_0_io_enq_bits_T_12 = or(_awOut_0_io_enq_bits_T_10, _awOut_0_io_enq_bits_T_11) @[Xbar.scala 278:23]
    node _awOut_0_io_enq_bits_T_13 = asUInt(reset) @[Xbar.scala 278:12]
    node _awOut_0_io_enq_bits_T_14 = eq(_awOut_0_io_enq_bits_T_13, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _awOut_0_io_enq_bits_T_14 : @[Xbar.scala 278:12]
      node _awOut_0_io_enq_bits_T_15 = eq(_awOut_0_io_enq_bits_T_12, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _awOut_0_io_enq_bits_T_15 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : awOut_0_io_enq_bits_printf_1 @[Xbar.scala 278:12]
      assert(clock, _awOut_0_io_enq_bits_T_12, UInt<1>("h1"), "") : awOut_0_io_enq_bits_assert_1 @[Xbar.scala 278:12]
    wire _awOut_0_io_enq_bits_state_WIRE : UInt<1>[2] @[Xbar.scala 281:51]
    _awOut_0_io_enq_bits_state_WIRE[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    _awOut_0_io_enq_bits_state_WIRE[1] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg awOut_0_io_enq_bits_state : UInt<1>[2], clock with :
      reset => (reset, _awOut_0_io_enq_bits_state_WIRE) @[Xbar.scala 281:24]
    node awOut_0_io_enq_bits_muxState = mux(awOut_0_io_enq_bits_idle, awOut_0_io_enq_bits_winner, awOut_0_io_enq_bits_state) @[Xbar.scala 282:23]
    awOut_0_io_enq_bits_state <= awOut_0_io_enq_bits_muxState @[Xbar.scala 283:11]
    when awOut_0_io_enq_bits_anyValid : @[Xbar.scala 286:21]
      awOut_0_io_enq_bits_idle <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _awOut_0_io_enq_bits_T_16 = and(out[0].aw.ready, out[0].aw.valid) @[Decoupled.scala 51:35]
    when _awOut_0_io_enq_bits_T_16 : @[Xbar.scala 287:22]
      awOut_0_io_enq_bits_idle <= UInt<1>("h1") @[Xbar.scala 287:29]
    node awOut_0_io_enq_bits_allowed = mux(awOut_0_io_enq_bits_idle, awOut_0_io_enq_bits_readys, awOut_0_io_enq_bits_state) @[Xbar.scala 290:24]
    node _awOut_0_io_enq_bits_filtered_0_ready_T = and(out[0].aw.ready, awOut_0_io_enq_bits_allowed[0]) @[Xbar.scala 292:31]
    portsAWOI_filtered[0].ready <= _awOut_0_io_enq_bits_filtered_0_ready_T @[Xbar.scala 292:17]
    node _awOut_0_io_enq_bits_filtered_0_ready_T_1 = and(out[0].aw.ready, awOut_0_io_enq_bits_allowed[1]) @[Xbar.scala 292:31]
    portsAWOI_filtered_1[0].ready <= _awOut_0_io_enq_bits_filtered_0_ready_T_1 @[Xbar.scala 292:17]
    node _awOut_0_io_enq_bits_out_0_aw_valid_T = mux(awOut_0_io_enq_bits_state[0], portsAWOI_filtered[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_out_0_aw_valid_T_1 = mux(awOut_0_io_enq_bits_state[1], portsAWOI_filtered_1[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_out_0_aw_valid_T_2 = or(_awOut_0_io_enq_bits_out_0_aw_valid_T, _awOut_0_io_enq_bits_out_0_aw_valid_T_1) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_out_0_aw_valid_WIRE : UInt<1> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_out_0_aw_valid_WIRE <= _awOut_0_io_enq_bits_out_0_aw_valid_T_2 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_out_0_aw_valid_T_3 = mux(awOut_0_io_enq_bits_idle, awOut_0_io_enq_bits_anyValid, _awOut_0_io_enq_bits_out_0_aw_valid_WIRE) @[Xbar.scala 298:22]
    out[0].aw.valid <= _awOut_0_io_enq_bits_out_0_aw_valid_T_3 @[Xbar.scala 298:16]
    wire _awOut_0_io_enq_bits_WIRE : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_1 : { tl_state : { size : UInt<4>, source : UInt<7>}} @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_2 : { size : UInt<4>, source : UInt<7>} @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_17 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.echo.tl_state.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_18 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.echo.tl_state.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_19 = or(_awOut_0_io_enq_bits_T_17, _awOut_0_io_enq_bits_T_18) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_3 : UInt<7> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_3 <= _awOut_0_io_enq_bits_T_19 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_2.source <= _awOut_0_io_enq_bits_WIRE_3 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_20 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.echo.tl_state.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_21 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.echo.tl_state.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_22 = or(_awOut_0_io_enq_bits_T_20, _awOut_0_io_enq_bits_T_21) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_4 : UInt<4> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_4 <= _awOut_0_io_enq_bits_T_22 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_2.size <= _awOut_0_io_enq_bits_WIRE_4 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_1.tl_state <= _awOut_0_io_enq_bits_WIRE_2 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.echo <= _awOut_0_io_enq_bits_WIRE_1 @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_5 : { } @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.user <= _awOut_0_io_enq_bits_WIRE_5 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_23 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.qos, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_24 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.qos, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_25 = or(_awOut_0_io_enq_bits_T_23, _awOut_0_io_enq_bits_T_24) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_6 : UInt<4> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_6 <= _awOut_0_io_enq_bits_T_25 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.qos <= _awOut_0_io_enq_bits_WIRE_6 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_26 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.prot, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_27 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.prot, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_28 = or(_awOut_0_io_enq_bits_T_26, _awOut_0_io_enq_bits_T_27) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_7 : UInt<3> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_7 <= _awOut_0_io_enq_bits_T_28 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.prot <= _awOut_0_io_enq_bits_WIRE_7 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_29 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.cache, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_30 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.cache, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_31 = or(_awOut_0_io_enq_bits_T_29, _awOut_0_io_enq_bits_T_30) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_8 : UInt<4> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_8 <= _awOut_0_io_enq_bits_T_31 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.cache <= _awOut_0_io_enq_bits_WIRE_8 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_32 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.lock, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_33 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.lock, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_34 = or(_awOut_0_io_enq_bits_T_32, _awOut_0_io_enq_bits_T_33) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_9 : UInt<1> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_9 <= _awOut_0_io_enq_bits_T_34 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.lock <= _awOut_0_io_enq_bits_WIRE_9 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_35 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.burst, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_36 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.burst, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_37 = or(_awOut_0_io_enq_bits_T_35, _awOut_0_io_enq_bits_T_36) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_10 : UInt<2> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_10 <= _awOut_0_io_enq_bits_T_37 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.burst <= _awOut_0_io_enq_bits_WIRE_10 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_38 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_39 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_40 = or(_awOut_0_io_enq_bits_T_38, _awOut_0_io_enq_bits_T_39) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_11 : UInt<3> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_11 <= _awOut_0_io_enq_bits_T_40 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.size <= _awOut_0_io_enq_bits_WIRE_11 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_41 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.len, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_42 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.len, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_43 = or(_awOut_0_io_enq_bits_T_41, _awOut_0_io_enq_bits_T_42) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_12 : UInt<8> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_12 <= _awOut_0_io_enq_bits_T_43 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.len <= _awOut_0_io_enq_bits_WIRE_12 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_44 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.addr, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_45 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.addr, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_46 = or(_awOut_0_io_enq_bits_T_44, _awOut_0_io_enq_bits_T_45) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_13 : UInt<34> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_13 <= _awOut_0_io_enq_bits_T_46 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.addr <= _awOut_0_io_enq_bits_WIRE_13 @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_47 = mux(awOut_0_io_enq_bits_muxState[0], portsAWOI_filtered[0].bits.id, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_48 = mux(awOut_0_io_enq_bits_muxState[1], portsAWOI_filtered_1[0].bits.id, UInt<1>("h0")) @[Mux.scala 27:73]
    node _awOut_0_io_enq_bits_T_49 = or(_awOut_0_io_enq_bits_T_47, _awOut_0_io_enq_bits_T_48) @[Mux.scala 27:73]
    wire _awOut_0_io_enq_bits_WIRE_14 : UInt<8> @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE_14 <= _awOut_0_io_enq_bits_T_49 @[Mux.scala 27:73]
    _awOut_0_io_enq_bits_WIRE.id <= _awOut_0_io_enq_bits_WIRE_14 @[Mux.scala 27:73]
    out[0].aw.bits.echo.tl_state.source <= _awOut_0_io_enq_bits_WIRE.echo.tl_state.source @[BundleMap.scala 247:19]
    out[0].aw.bits.echo.tl_state.size <= _awOut_0_io_enq_bits_WIRE.echo.tl_state.size @[BundleMap.scala 247:19]
    out[0].aw.bits.qos <= _awOut_0_io_enq_bits_WIRE.qos @[BundleMap.scala 247:19]
    out[0].aw.bits.prot <= _awOut_0_io_enq_bits_WIRE.prot @[BundleMap.scala 247:19]
    out[0].aw.bits.cache <= _awOut_0_io_enq_bits_WIRE.cache @[BundleMap.scala 247:19]
    out[0].aw.bits.lock <= _awOut_0_io_enq_bits_WIRE.lock @[BundleMap.scala 247:19]
    out[0].aw.bits.burst <= _awOut_0_io_enq_bits_WIRE.burst @[BundleMap.scala 247:19]
    out[0].aw.bits.size <= _awOut_0_io_enq_bits_WIRE.size @[BundleMap.scala 247:19]
    out[0].aw.bits.len <= _awOut_0_io_enq_bits_WIRE.len @[BundleMap.scala 247:19]
    out[0].aw.bits.addr <= _awOut_0_io_enq_bits_WIRE.addr @[BundleMap.scala 247:19]
    out[0].aw.bits.id <= _awOut_0_io_enq_bits_WIRE.id @[BundleMap.scala 247:19]
    node _awOut_0_io_enq_bits_T_50 = cat(awOut_0_io_enq_bits_muxState[1], awOut_0_io_enq_bits_muxState[0]) @[Xbar.scala 203:81]
    awOut_0.io.enq.bits <= _awOut_0_io_enq_bits_T_50 @[Xbar.scala 202:28]
    reg idle : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    node anyValid = or(portsAROI_filtered[0].valid, portsAROI_filtered_1[0].valid) @[Xbar.scala 266:36]
    node _readys_T = cat(portsAROI_filtered_1[0].valid, portsAROI_filtered[0].valid) @[Cat.scala 33:92]
    node readys_valid = bits(_readys_T, 1, 0) @[Arbiter.scala 22:23]
    node _readys_T_1 = eq(readys_valid, _readys_T) @[Arbiter.scala 23:19]
    node _readys_T_2 = asUInt(reset) @[Arbiter.scala 23:12]
    node _readys_T_3 = eq(_readys_T_2, UInt<1>("h0")) @[Arbiter.scala 23:12]
    when _readys_T_3 : @[Arbiter.scala 23:12]
      node _readys_T_4 = eq(_readys_T_1, UInt<1>("h0")) @[Arbiter.scala 23:12]
      when _readys_T_4 : @[Arbiter.scala 23:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:23 assert (valid === valids)\n") : readys_printf @[Arbiter.scala 23:12]
      assert(clock, _readys_T_1, UInt<1>("h1"), "") : readys_assert @[Arbiter.scala 23:12]
    reg readys_mask : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[Arbiter.scala 24:23]
    node _readys_filter_T = not(readys_mask) @[Arbiter.scala 25:30]
    node _readys_filter_T_1 = and(readys_valid, _readys_filter_T) @[Arbiter.scala 25:28]
    node readys_filter = cat(_readys_filter_T_1, readys_valid) @[Cat.scala 33:92]
    node _readys_unready_T = shr(readys_filter, 1) @[package.scala 254:48]
    node _readys_unready_T_1 = or(readys_filter, _readys_unready_T) @[package.scala 254:43]
    node _readys_unready_T_2 = bits(_readys_unready_T_1, 3, 0) @[package.scala 255:17]
    node _readys_unready_T_3 = shr(_readys_unready_T_2, 1) @[Arbiter.scala 26:52]
    node _readys_unready_T_4 = shl(readys_mask, 2) @[Arbiter.scala 26:66]
    node readys_unready = or(_readys_unready_T_3, _readys_unready_T_4) @[Arbiter.scala 26:58]
    node _readys_readys_T = shr(readys_unready, 2) @[Arbiter.scala 27:29]
    node _readys_readys_T_1 = bits(readys_unready, 1, 0) @[Arbiter.scala 27:48]
    node _readys_readys_T_2 = and(_readys_readys_T, _readys_readys_T_1) @[Arbiter.scala 27:39]
    node readys_readys = not(_readys_readys_T_2) @[Arbiter.scala 27:18]
    node _readys_T_5 = orr(readys_valid) @[Arbiter.scala 28:27]
    node _readys_T_6 = and(idle, _readys_T_5) @[Arbiter.scala 28:18]
    when _readys_T_6 : @[Arbiter.scala 28:32]
      node _readys_mask_T = and(readys_readys, readys_valid) @[Arbiter.scala 29:29]
      node _readys_mask_T_1 = shl(_readys_mask_T, 1) @[package.scala 245:48]
      node _readys_mask_T_2 = bits(_readys_mask_T_1, 1, 0) @[package.scala 245:53]
      node _readys_mask_T_3 = or(_readys_mask_T, _readys_mask_T_2) @[package.scala 245:43]
      node _readys_mask_T_4 = bits(_readys_mask_T_3, 1, 0) @[package.scala 246:17]
      readys_mask <= _readys_mask_T_4 @[Arbiter.scala 29:12]
    node _readys_T_7 = bits(readys_readys, 1, 0) @[Arbiter.scala 31:11]
    node _readys_T_8 = bits(_readys_T_7, 0, 0) @[Xbar.scala 268:73]
    node _readys_T_9 = bits(_readys_T_7, 1, 1) @[Xbar.scala 268:73]
    wire readys : UInt<1>[2] @[Xbar.scala 268:25]
    readys[0] <= _readys_T_8 @[Xbar.scala 268:25]
    readys[1] <= _readys_T_9 @[Xbar.scala 268:25]
    node _winner_T = and(readys[0], portsAROI_filtered[0].valid) @[Xbar.scala 270:67]
    node _winner_T_1 = and(readys[1], portsAROI_filtered_1[0].valid) @[Xbar.scala 270:67]
    wire winner : UInt<1>[2] @[Xbar.scala 270:25]
    winner[0] <= _winner_T @[Xbar.scala 270:25]
    winner[1] <= _winner_T_1 @[Xbar.scala 270:25]
    node prefixOR_1 = or(UInt<1>("h0"), winner[0]) @[Xbar.scala 275:46]
    node _prefixOR_T = or(prefixOR_1, winner[1]) @[Xbar.scala 275:46]
    node _T_2 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_3 = eq(winner[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_4 = or(_T_2, _T_3) @[Xbar.scala 276:57]
    node _T_5 = eq(prefixOR_1, UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_6 = eq(winner[1], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_7 = or(_T_5, _T_6) @[Xbar.scala 276:57]
    node _T_8 = and(_T_4, _T_7) @[Xbar.scala 276:75]
    node _T_9 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_10 : @[Xbar.scala 276:11]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_11 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf @[Xbar.scala 276:11]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert @[Xbar.scala 276:11]
    node _T_12 = eq(anyValid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_13 = or(winner[0], winner[1]) @[Xbar.scala 278:41]
    node _T_14 = or(_T_12, _T_13) @[Xbar.scala 278:23]
    node _T_15 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_16 : @[Xbar.scala 278:12]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_17 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_1 @[Xbar.scala 278:12]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_1 @[Xbar.scala 278:12]
    wire _state_WIRE : UInt<1>[2] @[Xbar.scala 281:51]
    _state_WIRE[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    _state_WIRE[1] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state : UInt<1>[2], clock with :
      reset => (reset, _state_WIRE) @[Xbar.scala 281:24]
    node muxState = mux(idle, winner, state) @[Xbar.scala 282:23]
    state <= muxState @[Xbar.scala 283:11]
    when anyValid : @[Xbar.scala 286:21]
      idle <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_18 = and(out[0].ar.ready, out[0].ar.valid) @[Decoupled.scala 51:35]
    when _T_18 : @[Xbar.scala 287:22]
      idle <= UInt<1>("h1") @[Xbar.scala 287:29]
    node allowed = mux(idle, readys, state) @[Xbar.scala 290:24]
    node _filtered_0_ready_T = and(out[0].ar.ready, allowed[0]) @[Xbar.scala 292:31]
    portsAROI_filtered[0].ready <= _filtered_0_ready_T @[Xbar.scala 292:17]
    node _filtered_0_ready_T_1 = and(out[0].ar.ready, allowed[1]) @[Xbar.scala 292:31]
    portsAROI_filtered_1[0].ready <= _filtered_0_ready_T_1 @[Xbar.scala 292:17]
    node _out_0_ar_valid_T = mux(state[0], portsAROI_filtered[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_ar_valid_T_1 = mux(state[1], portsAROI_filtered_1[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_ar_valid_T_2 = or(_out_0_ar_valid_T, _out_0_ar_valid_T_1) @[Mux.scala 27:73]
    wire _out_0_ar_valid_WIRE : UInt<1> @[Mux.scala 27:73]
    _out_0_ar_valid_WIRE <= _out_0_ar_valid_T_2 @[Mux.scala 27:73]
    node _out_0_ar_valid_T_3 = mux(idle, anyValid, _out_0_ar_valid_WIRE) @[Xbar.scala 298:22]
    out[0].ar.valid <= _out_0_ar_valid_T_3 @[Xbar.scala 298:16]
    wire _WIRE : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} @[Mux.scala 27:73]
    wire _WIRE_1 : { tl_state : { size : UInt<4>, source : UInt<7>}} @[Mux.scala 27:73]
    wire _WIRE_2 : { size : UInt<4>, source : UInt<7>} @[Mux.scala 27:73]
    node _T_19 = mux(muxState[0], portsAROI_filtered[0].bits.echo.tl_state.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_20 = mux(muxState[1], portsAROI_filtered_1[0].bits.echo.tl_state.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_21 = or(_T_19, _T_20) @[Mux.scala 27:73]
    wire _WIRE_3 : UInt<7> @[Mux.scala 27:73]
    _WIRE_3 <= _T_21 @[Mux.scala 27:73]
    _WIRE_2.source <= _WIRE_3 @[Mux.scala 27:73]
    node _T_22 = mux(muxState[0], portsAROI_filtered[0].bits.echo.tl_state.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_23 = mux(muxState[1], portsAROI_filtered_1[0].bits.echo.tl_state.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_24 = or(_T_22, _T_23) @[Mux.scala 27:73]
    wire _WIRE_4 : UInt<4> @[Mux.scala 27:73]
    _WIRE_4 <= _T_24 @[Mux.scala 27:73]
    _WIRE_2.size <= _WIRE_4 @[Mux.scala 27:73]
    _WIRE_1.tl_state <= _WIRE_2 @[Mux.scala 27:73]
    _WIRE.echo <= _WIRE_1 @[Mux.scala 27:73]
    wire _WIRE_5 : { } @[Mux.scala 27:73]
    _WIRE.user <= _WIRE_5 @[Mux.scala 27:73]
    node _T_25 = mux(muxState[0], portsAROI_filtered[0].bits.qos, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_26 = mux(muxState[1], portsAROI_filtered_1[0].bits.qos, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_27 = or(_T_25, _T_26) @[Mux.scala 27:73]
    wire _WIRE_6 : UInt<4> @[Mux.scala 27:73]
    _WIRE_6 <= _T_27 @[Mux.scala 27:73]
    _WIRE.qos <= _WIRE_6 @[Mux.scala 27:73]
    node _T_28 = mux(muxState[0], portsAROI_filtered[0].bits.prot, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_29 = mux(muxState[1], portsAROI_filtered_1[0].bits.prot, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_30 = or(_T_28, _T_29) @[Mux.scala 27:73]
    wire _WIRE_7 : UInt<3> @[Mux.scala 27:73]
    _WIRE_7 <= _T_30 @[Mux.scala 27:73]
    _WIRE.prot <= _WIRE_7 @[Mux.scala 27:73]
    node _T_31 = mux(muxState[0], portsAROI_filtered[0].bits.cache, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_32 = mux(muxState[1], portsAROI_filtered_1[0].bits.cache, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_33 = or(_T_31, _T_32) @[Mux.scala 27:73]
    wire _WIRE_8 : UInt<4> @[Mux.scala 27:73]
    _WIRE_8 <= _T_33 @[Mux.scala 27:73]
    _WIRE.cache <= _WIRE_8 @[Mux.scala 27:73]
    node _T_34 = mux(muxState[0], portsAROI_filtered[0].bits.lock, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_35 = mux(muxState[1], portsAROI_filtered_1[0].bits.lock, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_36 = or(_T_34, _T_35) @[Mux.scala 27:73]
    wire _WIRE_9 : UInt<1> @[Mux.scala 27:73]
    _WIRE_9 <= _T_36 @[Mux.scala 27:73]
    _WIRE.lock <= _WIRE_9 @[Mux.scala 27:73]
    node _T_37 = mux(muxState[0], portsAROI_filtered[0].bits.burst, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_38 = mux(muxState[1], portsAROI_filtered_1[0].bits.burst, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_39 = or(_T_37, _T_38) @[Mux.scala 27:73]
    wire _WIRE_10 : UInt<2> @[Mux.scala 27:73]
    _WIRE_10 <= _T_39 @[Mux.scala 27:73]
    _WIRE.burst <= _WIRE_10 @[Mux.scala 27:73]
    node _T_40 = mux(muxState[0], portsAROI_filtered[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_41 = mux(muxState[1], portsAROI_filtered_1[0].bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_42 = or(_T_40, _T_41) @[Mux.scala 27:73]
    wire _WIRE_11 : UInt<3> @[Mux.scala 27:73]
    _WIRE_11 <= _T_42 @[Mux.scala 27:73]
    _WIRE.size <= _WIRE_11 @[Mux.scala 27:73]
    node _T_43 = mux(muxState[0], portsAROI_filtered[0].bits.len, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_44 = mux(muxState[1], portsAROI_filtered_1[0].bits.len, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_45 = or(_T_43, _T_44) @[Mux.scala 27:73]
    wire _WIRE_12 : UInt<8> @[Mux.scala 27:73]
    _WIRE_12 <= _T_45 @[Mux.scala 27:73]
    _WIRE.len <= _WIRE_12 @[Mux.scala 27:73]
    node _T_46 = mux(muxState[0], portsAROI_filtered[0].bits.addr, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_47 = mux(muxState[1], portsAROI_filtered_1[0].bits.addr, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_48 = or(_T_46, _T_47) @[Mux.scala 27:73]
    wire _WIRE_13 : UInt<34> @[Mux.scala 27:73]
    _WIRE_13 <= _T_48 @[Mux.scala 27:73]
    _WIRE.addr <= _WIRE_13 @[Mux.scala 27:73]
    node _T_49 = mux(muxState[0], portsAROI_filtered[0].bits.id, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_50 = mux(muxState[1], portsAROI_filtered_1[0].bits.id, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_51 = or(_T_49, _T_50) @[Mux.scala 27:73]
    wire _WIRE_14 : UInt<8> @[Mux.scala 27:73]
    _WIRE_14 <= _T_51 @[Mux.scala 27:73]
    _WIRE.id <= _WIRE_14 @[Mux.scala 27:73]
    out[0].ar.bits.echo.tl_state.source <= _WIRE.echo.tl_state.source @[BundleMap.scala 247:19]
    out[0].ar.bits.echo.tl_state.size <= _WIRE.echo.tl_state.size @[BundleMap.scala 247:19]
    out[0].ar.bits.qos <= _WIRE.qos @[BundleMap.scala 247:19]
    out[0].ar.bits.prot <= _WIRE.prot @[BundleMap.scala 247:19]
    out[0].ar.bits.cache <= _WIRE.cache @[BundleMap.scala 247:19]
    out[0].ar.bits.lock <= _WIRE.lock @[BundleMap.scala 247:19]
    out[0].ar.bits.burst <= _WIRE.burst @[BundleMap.scala 247:19]
    out[0].ar.bits.size <= _WIRE.size @[BundleMap.scala 247:19]
    out[0].ar.bits.len <= _WIRE.len @[BundleMap.scala 247:19]
    out[0].ar.bits.addr <= _WIRE.addr @[BundleMap.scala 247:19]
    out[0].ar.bits.id <= _WIRE.id @[BundleMap.scala 247:19]
    node _out_0_w_valid_T = bits(awOut_0.io.deq.bits, 0, 0) @[Mux.scala 29:36]
    node _out_0_w_valid_T_1 = bits(awOut_0.io.deq.bits, 1, 1) @[Mux.scala 29:36]
    node _out_0_w_valid_T_2 = mux(_out_0_w_valid_T, portsWOI_filtered[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_w_valid_T_3 = mux(_out_0_w_valid_T_1, portsWOI_filtered_1[0].valid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _out_0_w_valid_T_4 = or(_out_0_w_valid_T_2, _out_0_w_valid_T_3) @[Mux.scala 27:73]
    wire _out_0_w_valid_WIRE : UInt<1> @[Mux.scala 27:73]
    _out_0_w_valid_WIRE <= _out_0_w_valid_T_4 @[Mux.scala 27:73]
    out[0].w.valid <= _out_0_w_valid_WIRE @[Xbar.scala 206:22]
    node _T_52 = bits(awOut_0.io.deq.bits, 0, 0) @[Mux.scala 29:36]
    node _T_53 = bits(awOut_0.io.deq.bits, 1, 1) @[Mux.scala 29:36]
    wire _WIRE_15 : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} @[Mux.scala 27:73]
    wire _WIRE_16 : { } @[Mux.scala 27:73]
    _WIRE_15.user <= _WIRE_16 @[Mux.scala 27:73]
    node _T_54 = mux(_T_52, portsWOI_filtered[0].bits.last, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_55 = mux(_T_53, portsWOI_filtered_1[0].bits.last, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_56 = or(_T_54, _T_55) @[Mux.scala 27:73]
    wire _WIRE_17 : UInt<1> @[Mux.scala 27:73]
    _WIRE_17 <= _T_56 @[Mux.scala 27:73]
    _WIRE_15.last <= _WIRE_17 @[Mux.scala 27:73]
    node _T_57 = mux(_T_52, portsWOI_filtered[0].bits.strb, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_58 = mux(_T_53, portsWOI_filtered_1[0].bits.strb, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_59 = or(_T_57, _T_58) @[Mux.scala 27:73]
    wire _WIRE_18 : UInt<64> @[Mux.scala 27:73]
    _WIRE_18 <= _T_59 @[Mux.scala 27:73]
    _WIRE_15.strb <= _WIRE_18 @[Mux.scala 27:73]
    node _T_60 = mux(_T_52, portsWOI_filtered[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_61 = mux(_T_53, portsWOI_filtered_1[0].bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_62 = or(_T_60, _T_61) @[Mux.scala 27:73]
    wire _WIRE_19 : UInt<512> @[Mux.scala 27:73]
    _WIRE_19 <= _T_62 @[Mux.scala 27:73]
    _WIRE_15.data <= _WIRE_19 @[Mux.scala 27:73]
    out[0].w.bits.last <= _WIRE_15.last @[BundleMap.scala 247:19]
    out[0].w.bits.strb <= _WIRE_15.strb @[BundleMap.scala 247:19]
    out[0].w.bits.data <= _WIRE_15.data @[BundleMap.scala 247:19]
    node _filtered_0_ready_T_2 = bits(awOut_0.io.deq.bits, 0, 0) @[Xbar.scala 210:60]
    node _filtered_0_ready_T_3 = and(out[0].w.ready, _filtered_0_ready_T_2) @[Xbar.scala 210:37]
    portsWOI_filtered[0].ready <= _filtered_0_ready_T_3 @[Xbar.scala 210:19]
    node _filtered_0_ready_T_4 = bits(awOut_0.io.deq.bits, 1, 1) @[Xbar.scala 210:60]
    node _filtered_0_ready_T_5 = and(out[0].w.ready, _filtered_0_ready_T_4) @[Xbar.scala 210:37]
    portsWOI_filtered_1[0].ready <= _filtered_0_ready_T_5 @[Xbar.scala 210:19]
    reg idle_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_1 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_1[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_2 = and(readys_1[0], portsRIO_filtered[0].valid) @[Xbar.scala 270:67]
    wire winner_1 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_1[0] <= _winner_T_2 @[Xbar.scala 270:25]
    node _prefixOR_T_1 = or(UInt<1>("h0"), winner_1[0]) @[Xbar.scala 275:46]
    node _T_63 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_64 = eq(winner_1[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_65 = or(_T_63, _T_64) @[Xbar.scala 276:57]
    node _T_66 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_67 = eq(_T_66, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_67 : @[Xbar.scala 276:11]
      node _T_68 = eq(_T_65, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_68 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_2 @[Xbar.scala 276:11]
      assert(clock, _T_65, UInt<1>("h1"), "") : assert_2 @[Xbar.scala 276:11]
    node _T_69 = eq(portsRIO_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_70 = or(_T_69, winner_1[0]) @[Xbar.scala 278:23]
    node _T_71 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_72 = eq(_T_71, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_72 : @[Xbar.scala 278:12]
      node _T_73 = eq(_T_70, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_73 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_3 @[Xbar.scala 278:12]
      assert(clock, _T_70, UInt<1>("h1"), "") : assert_3 @[Xbar.scala 278:12]
    wire _state_WIRE_1 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_1[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_1 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_1) @[Xbar.scala 281:24]
    node muxState_1 = mux(idle_1, winner_1, state_1) @[Xbar.scala 282:23]
    state_1 <= muxState_1 @[Xbar.scala 283:11]
    when portsRIO_filtered[0].valid : @[Xbar.scala 286:21]
      idle_1 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_74 = and(in[0].r.ready, in[0].r.valid) @[Decoupled.scala 51:35]
    when _T_74 : @[Xbar.scala 287:22]
      idle_1 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsRIO_filtered[0].ready <= in[0].r.ready @[Xbar.scala 295:24]
    node _in_0_r_valid_T = mux(idle_1, portsRIO_filtered[0].valid, portsRIO_filtered[0].valid) @[Xbar.scala 298:22]
    in[0].r.valid <= _in_0_r_valid_T @[Xbar.scala 298:16]
    in[0].r.bits.last <= portsRIO_filtered[0].bits.last @[BundleMap.scala 247:19]
    in[0].r.bits.echo.tl_state.source <= portsRIO_filtered[0].bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[0].r.bits.echo.tl_state.size <= portsRIO_filtered[0].bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[0].r.bits.resp <= portsRIO_filtered[0].bits.resp @[BundleMap.scala 247:19]
    in[0].r.bits.data <= portsRIO_filtered[0].bits.data @[BundleMap.scala 247:19]
    in[0].r.bits.id <= portsRIO_filtered[0].bits.id @[BundleMap.scala 247:19]
    reg idle_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_2 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_2[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_3 = and(readys_2[0], portsBIO_filtered[0].valid) @[Xbar.scala 270:67]
    wire winner_2 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_2[0] <= _winner_T_3 @[Xbar.scala 270:25]
    node _prefixOR_T_2 = or(UInt<1>("h0"), winner_2[0]) @[Xbar.scala 275:46]
    node _T_75 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_76 = eq(winner_2[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_77 = or(_T_75, _T_76) @[Xbar.scala 276:57]
    node _T_78 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_79 = eq(_T_78, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_79 : @[Xbar.scala 276:11]
      node _T_80 = eq(_T_77, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_80 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_4 @[Xbar.scala 276:11]
      assert(clock, _T_77, UInt<1>("h1"), "") : assert_4 @[Xbar.scala 276:11]
    node _T_81 = eq(portsBIO_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_82 = or(_T_81, winner_2[0]) @[Xbar.scala 278:23]
    node _T_83 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_84 = eq(_T_83, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_84 : @[Xbar.scala 278:12]
      node _T_85 = eq(_T_82, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_85 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_5 @[Xbar.scala 278:12]
      assert(clock, _T_82, UInt<1>("h1"), "") : assert_5 @[Xbar.scala 278:12]
    wire _state_WIRE_2 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_2[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_2 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_2) @[Xbar.scala 281:24]
    node muxState_2 = mux(idle_2, winner_2, state_2) @[Xbar.scala 282:23]
    state_2 <= muxState_2 @[Xbar.scala 283:11]
    when portsBIO_filtered[0].valid : @[Xbar.scala 286:21]
      idle_2 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_86 = and(in[0].b.ready, in[0].b.valid) @[Decoupled.scala 51:35]
    when _T_86 : @[Xbar.scala 287:22]
      idle_2 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsBIO_filtered[0].ready <= in[0].b.ready @[Xbar.scala 295:24]
    node _in_0_b_valid_T = mux(idle_2, portsBIO_filtered[0].valid, portsBIO_filtered[0].valid) @[Xbar.scala 298:22]
    in[0].b.valid <= _in_0_b_valid_T @[Xbar.scala 298:16]
    in[0].b.bits.echo.tl_state.source <= portsBIO_filtered[0].bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[0].b.bits.echo.tl_state.size <= portsBIO_filtered[0].bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[0].b.bits.resp <= portsBIO_filtered[0].bits.resp @[BundleMap.scala 247:19]
    in[0].b.bits.id <= portsBIO_filtered[0].bits.id @[BundleMap.scala 247:19]
    reg idle_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_3 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_3[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_4 = and(readys_3[0], portsRIO_filtered[1].valid) @[Xbar.scala 270:67]
    wire winner_3 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_3[0] <= _winner_T_4 @[Xbar.scala 270:25]
    node _prefixOR_T_3 = or(UInt<1>("h0"), winner_3[0]) @[Xbar.scala 275:46]
    node _T_87 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_88 = eq(winner_3[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_89 = or(_T_87, _T_88) @[Xbar.scala 276:57]
    node _T_90 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_91 = eq(_T_90, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_91 : @[Xbar.scala 276:11]
      node _T_92 = eq(_T_89, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_92 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_6 @[Xbar.scala 276:11]
      assert(clock, _T_89, UInt<1>("h1"), "") : assert_6 @[Xbar.scala 276:11]
    node _T_93 = eq(portsRIO_filtered[1].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_94 = or(_T_93, winner_3[0]) @[Xbar.scala 278:23]
    node _T_95 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_96 = eq(_T_95, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_96 : @[Xbar.scala 278:12]
      node _T_97 = eq(_T_94, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_97 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_7 @[Xbar.scala 278:12]
      assert(clock, _T_94, UInt<1>("h1"), "") : assert_7 @[Xbar.scala 278:12]
    wire _state_WIRE_3 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_3[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_3 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_3) @[Xbar.scala 281:24]
    node muxState_3 = mux(idle_3, winner_3, state_3) @[Xbar.scala 282:23]
    state_3 <= muxState_3 @[Xbar.scala 283:11]
    when portsRIO_filtered[1].valid : @[Xbar.scala 286:21]
      idle_3 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_98 = and(in[1].r.ready, in[1].r.valid) @[Decoupled.scala 51:35]
    when _T_98 : @[Xbar.scala 287:22]
      idle_3 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsRIO_filtered[1].ready <= in[1].r.ready @[Xbar.scala 295:24]
    node _in_1_r_valid_T = mux(idle_3, portsRIO_filtered[1].valid, portsRIO_filtered[1].valid) @[Xbar.scala 298:22]
    in[1].r.valid <= _in_1_r_valid_T @[Xbar.scala 298:16]
    in[1].r.bits.last <= portsRIO_filtered[1].bits.last @[BundleMap.scala 247:19]
    in[1].r.bits.echo.tl_state.source <= portsRIO_filtered[1].bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[1].r.bits.echo.tl_state.size <= portsRIO_filtered[1].bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[1].r.bits.resp <= portsRIO_filtered[1].bits.resp @[BundleMap.scala 247:19]
    in[1].r.bits.data <= portsRIO_filtered[1].bits.data @[BundleMap.scala 247:19]
    in[1].r.bits.id <= portsRIO_filtered[1].bits.id @[BundleMap.scala 247:19]
    reg idle_4 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_4 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_4[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_5 = and(readys_4[0], portsBIO_filtered[1].valid) @[Xbar.scala 270:67]
    wire winner_4 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_4[0] <= _winner_T_5 @[Xbar.scala 270:25]
    node _prefixOR_T_4 = or(UInt<1>("h0"), winner_4[0]) @[Xbar.scala 275:46]
    node _T_99 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_100 = eq(winner_4[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_101 = or(_T_99, _T_100) @[Xbar.scala 276:57]
    node _T_102 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_103 = eq(_T_102, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_103 : @[Xbar.scala 276:11]
      node _T_104 = eq(_T_101, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_104 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_8 @[Xbar.scala 276:11]
      assert(clock, _T_101, UInt<1>("h1"), "") : assert_8 @[Xbar.scala 276:11]
    node _T_105 = eq(portsBIO_filtered[1].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_106 = or(_T_105, winner_4[0]) @[Xbar.scala 278:23]
    node _T_107 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_108 = eq(_T_107, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_108 : @[Xbar.scala 278:12]
      node _T_109 = eq(_T_106, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_109 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_9 @[Xbar.scala 278:12]
      assert(clock, _T_106, UInt<1>("h1"), "") : assert_9 @[Xbar.scala 278:12]
    wire _state_WIRE_4 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_4[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_4 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_4) @[Xbar.scala 281:24]
    node muxState_4 = mux(idle_4, winner_4, state_4) @[Xbar.scala 282:23]
    state_4 <= muxState_4 @[Xbar.scala 283:11]
    when portsBIO_filtered[1].valid : @[Xbar.scala 286:21]
      idle_4 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_110 = and(in[1].b.ready, in[1].b.valid) @[Decoupled.scala 51:35]
    when _T_110 : @[Xbar.scala 287:22]
      idle_4 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsBIO_filtered[1].ready <= in[1].b.ready @[Xbar.scala 295:24]
    node _in_1_b_valid_T = mux(idle_4, portsBIO_filtered[1].valid, portsBIO_filtered[1].valid) @[Xbar.scala 298:22]
    in[1].b.valid <= _in_1_b_valid_T @[Xbar.scala 298:16]
    in[1].b.bits.echo.tl_state.source <= portsBIO_filtered[1].bits.echo.tl_state.source @[BundleMap.scala 247:19]
    in[1].b.bits.echo.tl_state.size <= portsBIO_filtered[1].bits.echo.tl_state.size @[BundleMap.scala 247:19]
    in[1].b.bits.resp <= portsBIO_filtered[1].bits.resp @[BundleMap.scala 247:19]
    in[1].b.bits.id <= portsBIO_filtered[1].bits.id @[BundleMap.scala 247:19]

  module Queue_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, count : UInt<2>}

    cmem ram : UInt<1> [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, count : UInt<2>}

    cmem ram : UInt<1> [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Xbar_1 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire io_in_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    io_in_0 is invalid @[Nodes.scala 1215:84]
    wire io_out_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    io_out_0 is invalid @[Nodes.scala 1212:84]
    auto.out <- io_out_0 @[LazyModule.scala 368:12]
    io_in_0 <- auto.in @[LazyModule.scala 366:16]
    inst awIn_0 of Queue_21 @[Xbar.scala 71:47]
    awIn_0.clock <= clock
    awIn_0.reset <= reset
    inst awOut_0 of Queue_22 @[Xbar.scala 72:47]
    awOut_0.clock <= clock
    awOut_0.reset <= reset
    node _requestARIO_T = xor(io_in_0.ar.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestARIO_T_1 = cvt(_requestARIO_T) @[Parameters.scala 137:45]
    node _requestARIO_T_2 = and(_requestARIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestARIO_T_3 = asSInt(_requestARIO_T_2) @[Parameters.scala 137:50]
    node _requestARIO_T_4 = eq(_requestARIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestARIO_0 : UInt<1>[1] @[Xbar.scala 74:48]
    requestARIO_0[0] <= _requestARIO_T_4 @[Xbar.scala 74:48]
    node _requestAWIO_T = xor(io_in_0.aw.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _requestAWIO_T_1 = cvt(_requestAWIO_T) @[Parameters.scala 137:45]
    node _requestAWIO_T_2 = and(_requestAWIO_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _requestAWIO_T_3 = asSInt(_requestAWIO_T_2) @[Parameters.scala 137:50]
    node _requestAWIO_T_4 = eq(_requestAWIO_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    wire requestAWIO_0 : UInt<1>[1] @[Xbar.scala 75:48]
    requestAWIO_0[0] <= _requestAWIO_T_4 @[Xbar.scala 75:48]
    node _requestROI_uncommonBits_T = or(io_out_0.r.bits.id, UInt<6>("h0")) @[Parameters.scala 52:29]
    node requestROI_uncommonBits = bits(_requestROI_uncommonBits_T, 5, 0) @[Parameters.scala 52:64]
    node _requestROI_T = shr(io_out_0.r.bits.id, 6) @[Parameters.scala 54:10]
    node _requestROI_T_1 = eq(_requestROI_T, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestROI_T_2 = leq(UInt<1>("h0"), requestROI_uncommonBits) @[Parameters.scala 56:34]
    node _requestROI_T_3 = and(_requestROI_T_1, _requestROI_T_2) @[Parameters.scala 54:69]
    node _requestROI_T_4 = leq(requestROI_uncommonBits, UInt<6>("h3f")) @[Parameters.scala 57:20]
    node requestROI_0_0 = and(_requestROI_T_3, _requestROI_T_4) @[Parameters.scala 56:50]
    node _requestBOI_uncommonBits_T = or(io_out_0.b.bits.id, UInt<6>("h0")) @[Parameters.scala 52:29]
    node requestBOI_uncommonBits = bits(_requestBOI_uncommonBits_T, 5, 0) @[Parameters.scala 52:64]
    node _requestBOI_T = shr(io_out_0.b.bits.id, 6) @[Parameters.scala 54:10]
    node _requestBOI_T_1 = eq(_requestBOI_T, UInt<1>("h0")) @[Parameters.scala 54:32]
    node _requestBOI_T_2 = leq(UInt<1>("h0"), requestBOI_uncommonBits) @[Parameters.scala 56:34]
    node _requestBOI_T_3 = and(_requestBOI_T_1, _requestBOI_T_2) @[Parameters.scala 54:69]
    node _requestBOI_T_4 = leq(requestBOI_uncommonBits, UInt<6>("h3f")) @[Parameters.scala 57:20]
    node requestBOI_0_0 = and(_requestBOI_T_3, _requestBOI_T_4) @[Parameters.scala 56:50]
    awIn_0.io.enq.bits <= requestAWIO_0[0] @[Xbar.scala 80:57]
    wire in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}[1] @[Xbar.scala 87:18]
    in[0].r.ready <= io_in_0.r.ready @[BundleMap.scala 247:19]
    in[0].ar.bits.qos <= io_in_0.ar.bits.qos @[BundleMap.scala 247:19]
    in[0].ar.bits.prot <= io_in_0.ar.bits.prot @[BundleMap.scala 247:19]
    in[0].ar.bits.cache <= io_in_0.ar.bits.cache @[BundleMap.scala 247:19]
    in[0].ar.bits.lock <= io_in_0.ar.bits.lock @[BundleMap.scala 247:19]
    in[0].ar.bits.burst <= io_in_0.ar.bits.burst @[BundleMap.scala 247:19]
    in[0].ar.bits.size <= io_in_0.ar.bits.size @[BundleMap.scala 247:19]
    in[0].ar.bits.len <= io_in_0.ar.bits.len @[BundleMap.scala 247:19]
    in[0].ar.bits.addr <= io_in_0.ar.bits.addr @[BundleMap.scala 247:19]
    in[0].ar.bits.id <= io_in_0.ar.bits.id @[BundleMap.scala 247:19]
    in[0].ar.valid <= io_in_0.ar.valid @[BundleMap.scala 247:19]
    in[0].b.ready <= io_in_0.b.ready @[BundleMap.scala 247:19]
    in[0].w.bits.last <= io_in_0.w.bits.last @[BundleMap.scala 247:19]
    in[0].w.bits.strb <= io_in_0.w.bits.strb @[BundleMap.scala 247:19]
    in[0].w.bits.data <= io_in_0.w.bits.data @[BundleMap.scala 247:19]
    in[0].w.valid <= io_in_0.w.valid @[BundleMap.scala 247:19]
    in[0].aw.bits.qos <= io_in_0.aw.bits.qos @[BundleMap.scala 247:19]
    in[0].aw.bits.prot <= io_in_0.aw.bits.prot @[BundleMap.scala 247:19]
    in[0].aw.bits.cache <= io_in_0.aw.bits.cache @[BundleMap.scala 247:19]
    in[0].aw.bits.lock <= io_in_0.aw.bits.lock @[BundleMap.scala 247:19]
    in[0].aw.bits.burst <= io_in_0.aw.bits.burst @[BundleMap.scala 247:19]
    in[0].aw.bits.size <= io_in_0.aw.bits.size @[BundleMap.scala 247:19]
    in[0].aw.bits.len <= io_in_0.aw.bits.len @[BundleMap.scala 247:19]
    in[0].aw.bits.addr <= io_in_0.aw.bits.addr @[BundleMap.scala 247:19]
    in[0].aw.bits.id <= io_in_0.aw.bits.id @[BundleMap.scala 247:19]
    in[0].aw.valid <= io_in_0.aw.valid @[BundleMap.scala 247:19]
    io_in_0.r.bits.last <= in[0].r.bits.last @[BundleMap.scala 247:19]
    io_in_0.r.bits.resp <= in[0].r.bits.resp @[BundleMap.scala 247:19]
    io_in_0.r.bits.data <= in[0].r.bits.data @[BundleMap.scala 247:19]
    io_in_0.r.bits.id <= in[0].r.bits.id @[BundleMap.scala 247:19]
    io_in_0.r.valid <= in[0].r.valid @[BundleMap.scala 247:19]
    io_in_0.ar.ready <= in[0].ar.ready @[BundleMap.scala 247:19]
    io_in_0.b.bits.resp <= in[0].b.bits.resp @[BundleMap.scala 247:19]
    io_in_0.b.bits.id <= in[0].b.bits.id @[BundleMap.scala 247:19]
    io_in_0.b.valid <= in[0].b.valid @[BundleMap.scala 247:19]
    io_in_0.w.ready <= in[0].w.ready @[BundleMap.scala 247:19]
    io_in_0.aw.ready <= in[0].aw.ready @[BundleMap.scala 247:19]
    node _in_0_aw_bits_id_T = or(io_in_0.aw.bits.id, UInt<1>("h0")) @[Xbar.scala 95:47]
    in[0].aw.bits.id <= _in_0_aw_bits_id_T @[Xbar.scala 95:24]
    node _in_0_ar_bits_id_T = or(io_in_0.ar.bits.id, UInt<1>("h0")) @[Xbar.scala 96:47]
    in[0].ar.bits.id <= _in_0_ar_bits_id_T @[Xbar.scala 96:24]
    node _bundleIn_0_r_bits_id_T = bits(in[0].r.bits.id, 5, 0) @[Xbar.scala 92:65]
    io_in_0.r.bits.id <= _bundleIn_0_r_bits_id_T @[Xbar.scala 97:26]
    node _bundleIn_0_b_bits_id_T = bits(in[0].b.bits.id, 5, 0) @[Xbar.scala 92:65]
    io_in_0.b.bits.id <= _bundleIn_0_b_bits_id_T @[Xbar.scala 98:26]
    awIn_0.io.count is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.bits is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.valid is invalid @[Xbar.scala 165:20]
    awIn_0.io.deq.ready is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.bits is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.valid is invalid @[Xbar.scala 165:20]
    awIn_0.io.enq.ready is invalid @[Xbar.scala 165:20]
    wire out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}[1] @[Xbar.scala 170:19]
    io_out_0.r.ready <= out[0].r.ready @[BundleMap.scala 247:19]
    io_out_0.ar.bits.qos <= out[0].ar.bits.qos @[BundleMap.scala 247:19]
    io_out_0.ar.bits.prot <= out[0].ar.bits.prot @[BundleMap.scala 247:19]
    io_out_0.ar.bits.cache <= out[0].ar.bits.cache @[BundleMap.scala 247:19]
    io_out_0.ar.bits.lock <= out[0].ar.bits.lock @[BundleMap.scala 247:19]
    io_out_0.ar.bits.burst <= out[0].ar.bits.burst @[BundleMap.scala 247:19]
    io_out_0.ar.bits.size <= out[0].ar.bits.size @[BundleMap.scala 247:19]
    io_out_0.ar.bits.len <= out[0].ar.bits.len @[BundleMap.scala 247:19]
    io_out_0.ar.bits.addr <= out[0].ar.bits.addr @[BundleMap.scala 247:19]
    io_out_0.ar.bits.id <= out[0].ar.bits.id @[BundleMap.scala 247:19]
    io_out_0.ar.valid <= out[0].ar.valid @[BundleMap.scala 247:19]
    io_out_0.b.ready <= out[0].b.ready @[BundleMap.scala 247:19]
    io_out_0.w.bits.last <= out[0].w.bits.last @[BundleMap.scala 247:19]
    io_out_0.w.bits.strb <= out[0].w.bits.strb @[BundleMap.scala 247:19]
    io_out_0.w.bits.data <= out[0].w.bits.data @[BundleMap.scala 247:19]
    io_out_0.w.valid <= out[0].w.valid @[BundleMap.scala 247:19]
    io_out_0.aw.bits.qos <= out[0].aw.bits.qos @[BundleMap.scala 247:19]
    io_out_0.aw.bits.prot <= out[0].aw.bits.prot @[BundleMap.scala 247:19]
    io_out_0.aw.bits.cache <= out[0].aw.bits.cache @[BundleMap.scala 247:19]
    io_out_0.aw.bits.lock <= out[0].aw.bits.lock @[BundleMap.scala 247:19]
    io_out_0.aw.bits.burst <= out[0].aw.bits.burst @[BundleMap.scala 247:19]
    io_out_0.aw.bits.size <= out[0].aw.bits.size @[BundleMap.scala 247:19]
    io_out_0.aw.bits.len <= out[0].aw.bits.len @[BundleMap.scala 247:19]
    io_out_0.aw.bits.addr <= out[0].aw.bits.addr @[BundleMap.scala 247:19]
    io_out_0.aw.bits.id <= out[0].aw.bits.id @[BundleMap.scala 247:19]
    io_out_0.aw.valid <= out[0].aw.valid @[BundleMap.scala 247:19]
    out[0].r.bits.last <= io_out_0.r.bits.last @[BundleMap.scala 247:19]
    out[0].r.bits.resp <= io_out_0.r.bits.resp @[BundleMap.scala 247:19]
    out[0].r.bits.data <= io_out_0.r.bits.data @[BundleMap.scala 247:19]
    out[0].r.bits.id <= io_out_0.r.bits.id @[BundleMap.scala 247:19]
    out[0].r.valid <= io_out_0.r.valid @[BundleMap.scala 247:19]
    out[0].ar.ready <= io_out_0.ar.ready @[BundleMap.scala 247:19]
    out[0].b.bits.resp <= io_out_0.b.bits.resp @[BundleMap.scala 247:19]
    out[0].b.bits.id <= io_out_0.b.bits.id @[BundleMap.scala 247:19]
    out[0].b.valid <= io_out_0.b.valid @[BundleMap.scala 247:19]
    out[0].w.ready <= io_out_0.w.ready @[BundleMap.scala 247:19]
    out[0].aw.ready <= io_out_0.aw.ready @[BundleMap.scala 247:19]
    awOut_0.io.count is invalid @[Xbar.scala 188:21]
    awOut_0.io.deq.bits is invalid @[Xbar.scala 188:21]
    awOut_0.io.deq.valid is invalid @[Xbar.scala 188:21]
    awOut_0.io.deq.ready is invalid @[Xbar.scala 188:21]
    awOut_0.io.enq.bits is invalid @[Xbar.scala 188:21]
    awOut_0.io.enq.valid is invalid @[Xbar.scala 188:21]
    awOut_0.io.enq.ready is invalid @[Xbar.scala 188:21]
    wire portsAROI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}[1] @[Xbar.scala 239:24]
    portsAROI_filtered[0].bits.qos <= in[0].ar.bits.qos @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.prot <= in[0].ar.bits.prot @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.cache <= in[0].ar.bits.cache @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.lock <= in[0].ar.bits.lock @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.burst <= in[0].ar.bits.burst @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.size <= in[0].ar.bits.size @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.len <= in[0].ar.bits.len @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.addr <= in[0].ar.bits.addr @[BundleMap.scala 247:19]
    portsAROI_filtered[0].bits.id <= in[0].ar.bits.id @[BundleMap.scala 247:19]
    node _portsAROI_filtered_0_valid_T = and(in[0].ar.valid, requestARIO_0[0]) @[Xbar.scala 242:40]
    portsAROI_filtered[0].valid <= _portsAROI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].ar.ready <= portsAROI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsAWOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}[1] @[Xbar.scala 239:24]
    portsAWOI_filtered[0].bits.qos <= in[0].aw.bits.qos @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.prot <= in[0].aw.bits.prot @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.cache <= in[0].aw.bits.cache @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.lock <= in[0].aw.bits.lock @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.burst <= in[0].aw.bits.burst @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.size <= in[0].aw.bits.size @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.len <= in[0].aw.bits.len @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.addr <= in[0].aw.bits.addr @[BundleMap.scala 247:19]
    portsAWOI_filtered[0].bits.id <= in[0].aw.bits.id @[BundleMap.scala 247:19]
    node _portsAWOI_filtered_0_valid_T = and(in[0].aw.valid, requestAWIO_0[0]) @[Xbar.scala 242:40]
    portsAWOI_filtered[0].valid <= _portsAWOI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].aw.ready <= portsAWOI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsWOI_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}[1] @[Xbar.scala 239:24]
    portsWOI_filtered[0].bits.last <= in[0].w.bits.last @[BundleMap.scala 247:19]
    portsWOI_filtered[0].bits.strb <= in[0].w.bits.strb @[BundleMap.scala 247:19]
    portsWOI_filtered[0].bits.data <= in[0].w.bits.data @[BundleMap.scala 247:19]
    node _portsWOI_filtered_0_valid_T = and(in[0].w.valid, UInt<1>("h1")) @[Xbar.scala 242:40]
    portsWOI_filtered[0].valid <= _portsWOI_filtered_0_valid_T @[Xbar.scala 242:25]
    in[0].w.ready <= portsWOI_filtered[0].ready @[Xbar.scala 244:17]
    wire portsRIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}[1] @[Xbar.scala 239:24]
    portsRIO_filtered[0].bits.last <= out[0].r.bits.last @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.resp <= out[0].r.bits.resp @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.data <= out[0].r.bits.data @[BundleMap.scala 247:19]
    portsRIO_filtered[0].bits.id <= out[0].r.bits.id @[BundleMap.scala 247:19]
    node _portsRIO_filtered_0_valid_T = and(out[0].r.valid, requestROI_0_0) @[Xbar.scala 242:40]
    portsRIO_filtered[0].valid <= _portsRIO_filtered_0_valid_T @[Xbar.scala 242:25]
    out[0].r.ready <= portsRIO_filtered[0].ready @[Xbar.scala 244:17]
    wire portsBIO_filtered : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}[1] @[Xbar.scala 239:24]
    portsBIO_filtered[0].bits.resp <= out[0].b.bits.resp @[BundleMap.scala 247:19]
    portsBIO_filtered[0].bits.id <= out[0].b.bits.id @[BundleMap.scala 247:19]
    node _portsBIO_filtered_0_valid_T = and(out[0].b.valid, requestBOI_0_0) @[Xbar.scala 242:40]
    portsBIO_filtered[0].valid <= _portsBIO_filtered_0_valid_T @[Xbar.scala 242:25]
    out[0].b.ready <= portsBIO_filtered[0].ready @[Xbar.scala 244:17]
    reg awOut_0_io_enq_bits_idle : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire awOut_0_io_enq_bits_readys : UInt<1>[1] @[Xbar.scala 268:25]
    awOut_0_io_enq_bits_readys[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _awOut_0_io_enq_bits_winner_T = and(awOut_0_io_enq_bits_readys[0], portsAWOI_filtered[0].valid) @[Xbar.scala 270:67]
    wire awOut_0_io_enq_bits_winner : UInt<1>[1] @[Xbar.scala 270:25]
    awOut_0_io_enq_bits_winner[0] <= _awOut_0_io_enq_bits_winner_T @[Xbar.scala 270:25]
    node _awOut_0_io_enq_bits_prefixOR_T = or(UInt<1>("h0"), awOut_0_io_enq_bits_winner[0]) @[Xbar.scala 275:46]
    node _awOut_0_io_enq_bits_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _awOut_0_io_enq_bits_T_1 = eq(awOut_0_io_enq_bits_winner[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _awOut_0_io_enq_bits_T_2 = or(_awOut_0_io_enq_bits_T, _awOut_0_io_enq_bits_T_1) @[Xbar.scala 276:57]
    node _awOut_0_io_enq_bits_T_3 = asUInt(reset) @[Xbar.scala 276:11]
    node _awOut_0_io_enq_bits_T_4 = eq(_awOut_0_io_enq_bits_T_3, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _awOut_0_io_enq_bits_T_4 : @[Xbar.scala 276:11]
      node _awOut_0_io_enq_bits_T_5 = eq(_awOut_0_io_enq_bits_T_2, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _awOut_0_io_enq_bits_T_5 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : awOut_0_io_enq_bits_printf @[Xbar.scala 276:11]
      assert(clock, _awOut_0_io_enq_bits_T_2, UInt<1>("h1"), "") : awOut_0_io_enq_bits_assert @[Xbar.scala 276:11]
    node _awOut_0_io_enq_bits_T_6 = eq(portsAWOI_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _awOut_0_io_enq_bits_T_7 = or(_awOut_0_io_enq_bits_T_6, awOut_0_io_enq_bits_winner[0]) @[Xbar.scala 278:23]
    node _awOut_0_io_enq_bits_T_8 = asUInt(reset) @[Xbar.scala 278:12]
    node _awOut_0_io_enq_bits_T_9 = eq(_awOut_0_io_enq_bits_T_8, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _awOut_0_io_enq_bits_T_9 : @[Xbar.scala 278:12]
      node _awOut_0_io_enq_bits_T_10 = eq(_awOut_0_io_enq_bits_T_7, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _awOut_0_io_enq_bits_T_10 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : awOut_0_io_enq_bits_printf_1 @[Xbar.scala 278:12]
      assert(clock, _awOut_0_io_enq_bits_T_7, UInt<1>("h1"), "") : awOut_0_io_enq_bits_assert_1 @[Xbar.scala 278:12]
    wire _awOut_0_io_enq_bits_state_WIRE : UInt<1>[1] @[Xbar.scala 281:51]
    _awOut_0_io_enq_bits_state_WIRE[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg awOut_0_io_enq_bits_state : UInt<1>[1], clock with :
      reset => (reset, _awOut_0_io_enq_bits_state_WIRE) @[Xbar.scala 281:24]
    node awOut_0_io_enq_bits_muxState = mux(awOut_0_io_enq_bits_idle, awOut_0_io_enq_bits_winner, awOut_0_io_enq_bits_state) @[Xbar.scala 282:23]
    awOut_0_io_enq_bits_state <= awOut_0_io_enq_bits_muxState @[Xbar.scala 283:11]
    when portsAWOI_filtered[0].valid : @[Xbar.scala 286:21]
      awOut_0_io_enq_bits_idle <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _awOut_0_io_enq_bits_T_11 = and(out[0].aw.ready, out[0].aw.valid) @[Decoupled.scala 51:35]
    when _awOut_0_io_enq_bits_T_11 : @[Xbar.scala 287:22]
      awOut_0_io_enq_bits_idle <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsAWOI_filtered[0].ready <= out[0].aw.ready @[Xbar.scala 295:24]
    node _awOut_0_io_enq_bits_out_0_aw_valid_T = mux(awOut_0_io_enq_bits_idle, portsAWOI_filtered[0].valid, portsAWOI_filtered[0].valid) @[Xbar.scala 298:22]
    out[0].aw.valid <= _awOut_0_io_enq_bits_out_0_aw_valid_T @[Xbar.scala 298:16]
    out[0].aw.bits.qos <= portsAWOI_filtered[0].bits.qos @[BundleMap.scala 247:19]
    out[0].aw.bits.prot <= portsAWOI_filtered[0].bits.prot @[BundleMap.scala 247:19]
    out[0].aw.bits.cache <= portsAWOI_filtered[0].bits.cache @[BundleMap.scala 247:19]
    out[0].aw.bits.lock <= portsAWOI_filtered[0].bits.lock @[BundleMap.scala 247:19]
    out[0].aw.bits.burst <= portsAWOI_filtered[0].bits.burst @[BundleMap.scala 247:19]
    out[0].aw.bits.size <= portsAWOI_filtered[0].bits.size @[BundleMap.scala 247:19]
    out[0].aw.bits.len <= portsAWOI_filtered[0].bits.len @[BundleMap.scala 247:19]
    out[0].aw.bits.addr <= portsAWOI_filtered[0].bits.addr @[BundleMap.scala 247:19]
    out[0].aw.bits.id <= portsAWOI_filtered[0].bits.id @[BundleMap.scala 247:19]
    awOut_0.io.enq.bits <= awOut_0_io_enq_bits_muxState[0] @[Xbar.scala 202:28]
    reg idle : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys : UInt<1>[1] @[Xbar.scala 268:25]
    readys[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T = and(readys[0], portsAROI_filtered[0].valid) @[Xbar.scala 270:67]
    wire winner : UInt<1>[1] @[Xbar.scala 270:25]
    winner[0] <= _winner_T @[Xbar.scala 270:25]
    node _prefixOR_T = or(UInt<1>("h0"), winner[0]) @[Xbar.scala 275:46]
    node _T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_1 = eq(winner[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_2 = or(_T, _T_1) @[Xbar.scala 276:57]
    node _T_3 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_4 : @[Xbar.scala 276:11]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_5 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf @[Xbar.scala 276:11]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[Xbar.scala 276:11]
    node _T_6 = eq(portsAROI_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_7 = or(_T_6, winner[0]) @[Xbar.scala 278:23]
    node _T_8 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_9 : @[Xbar.scala 278:12]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_10 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_1 @[Xbar.scala 278:12]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[Xbar.scala 278:12]
    wire _state_WIRE : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE) @[Xbar.scala 281:24]
    node muxState = mux(idle, winner, state) @[Xbar.scala 282:23]
    state <= muxState @[Xbar.scala 283:11]
    when portsAROI_filtered[0].valid : @[Xbar.scala 286:21]
      idle <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_11 = and(out[0].ar.ready, out[0].ar.valid) @[Decoupled.scala 51:35]
    when _T_11 : @[Xbar.scala 287:22]
      idle <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsAROI_filtered[0].ready <= out[0].ar.ready @[Xbar.scala 295:24]
    node _out_0_ar_valid_T = mux(idle, portsAROI_filtered[0].valid, portsAROI_filtered[0].valid) @[Xbar.scala 298:22]
    out[0].ar.valid <= _out_0_ar_valid_T @[Xbar.scala 298:16]
    out[0].ar.bits.qos <= portsAROI_filtered[0].bits.qos @[BundleMap.scala 247:19]
    out[0].ar.bits.prot <= portsAROI_filtered[0].bits.prot @[BundleMap.scala 247:19]
    out[0].ar.bits.cache <= portsAROI_filtered[0].bits.cache @[BundleMap.scala 247:19]
    out[0].ar.bits.lock <= portsAROI_filtered[0].bits.lock @[BundleMap.scala 247:19]
    out[0].ar.bits.burst <= portsAROI_filtered[0].bits.burst @[BundleMap.scala 247:19]
    out[0].ar.bits.size <= portsAROI_filtered[0].bits.size @[BundleMap.scala 247:19]
    out[0].ar.bits.len <= portsAROI_filtered[0].bits.len @[BundleMap.scala 247:19]
    out[0].ar.bits.addr <= portsAROI_filtered[0].bits.addr @[BundleMap.scala 247:19]
    out[0].ar.bits.id <= portsAROI_filtered[0].bits.id @[BundleMap.scala 247:19]
    node _out_0_w_valid_T = bits(awOut_0.io.deq.bits, 0, 0) @[Mux.scala 29:36]
    out[0].w.valid <= portsWOI_filtered[0].valid @[Xbar.scala 206:22]
    node _T_12 = bits(awOut_0.io.deq.bits, 0, 0) @[Mux.scala 29:36]
    out[0].w.bits.last <= portsWOI_filtered[0].bits.last @[BundleMap.scala 247:19]
    out[0].w.bits.strb <= portsWOI_filtered[0].bits.strb @[BundleMap.scala 247:19]
    out[0].w.bits.data <= portsWOI_filtered[0].bits.data @[BundleMap.scala 247:19]
    portsWOI_filtered[0].ready <= out[0].w.ready @[Xbar.scala 212:19]
    reg idle_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_1 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_1[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_1 = and(readys_1[0], portsRIO_filtered[0].valid) @[Xbar.scala 270:67]
    wire winner_1 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_1[0] <= _winner_T_1 @[Xbar.scala 270:25]
    node _prefixOR_T_1 = or(UInt<1>("h0"), winner_1[0]) @[Xbar.scala 275:46]
    node _T_13 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_14 = eq(winner_1[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_15 = or(_T_13, _T_14) @[Xbar.scala 276:57]
    node _T_16 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_17 : @[Xbar.scala 276:11]
      node _T_18 = eq(_T_15, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_18 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_2 @[Xbar.scala 276:11]
      assert(clock, _T_15, UInt<1>("h1"), "") : assert_2 @[Xbar.scala 276:11]
    node _T_19 = eq(portsRIO_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_20 = or(_T_19, winner_1[0]) @[Xbar.scala 278:23]
    node _T_21 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_22 : @[Xbar.scala 278:12]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_23 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_3 @[Xbar.scala 278:12]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_3 @[Xbar.scala 278:12]
    wire _state_WIRE_1 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_1[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_1 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_1) @[Xbar.scala 281:24]
    node muxState_1 = mux(idle_1, winner_1, state_1) @[Xbar.scala 282:23]
    state_1 <= muxState_1 @[Xbar.scala 283:11]
    when portsRIO_filtered[0].valid : @[Xbar.scala 286:21]
      idle_1 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_24 = and(in[0].r.ready, in[0].r.valid) @[Decoupled.scala 51:35]
    when _T_24 : @[Xbar.scala 287:22]
      idle_1 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsRIO_filtered[0].ready <= in[0].r.ready @[Xbar.scala 295:24]
    node _in_0_r_valid_T = mux(idle_1, portsRIO_filtered[0].valid, portsRIO_filtered[0].valid) @[Xbar.scala 298:22]
    in[0].r.valid <= _in_0_r_valid_T @[Xbar.scala 298:16]
    in[0].r.bits.last <= portsRIO_filtered[0].bits.last @[BundleMap.scala 247:19]
    in[0].r.bits.resp <= portsRIO_filtered[0].bits.resp @[BundleMap.scala 247:19]
    in[0].r.bits.data <= portsRIO_filtered[0].bits.data @[BundleMap.scala 247:19]
    in[0].r.bits.id <= portsRIO_filtered[0].bits.id @[BundleMap.scala 247:19]
    reg idle_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Xbar.scala 262:23]
    wire readys_2 : UInt<1>[1] @[Xbar.scala 268:25]
    readys_2[0] <= UInt<1>("h1") @[Xbar.scala 268:25]
    node _winner_T_2 = and(readys_2[0], portsBIO_filtered[0].valid) @[Xbar.scala 270:67]
    wire winner_2 : UInt<1>[1] @[Xbar.scala 270:25]
    winner_2[0] <= _winner_T_2 @[Xbar.scala 270:25]
    node _prefixOR_T_2 = or(UInt<1>("h0"), winner_2[0]) @[Xbar.scala 275:46]
    node _T_25 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Xbar.scala 276:54]
    node _T_26 = eq(winner_2[0], UInt<1>("h0")) @[Xbar.scala 276:60]
    node _T_27 = or(_T_25, _T_26) @[Xbar.scala 276:57]
    node _T_28 = asUInt(reset) @[Xbar.scala 276:11]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[Xbar.scala 276:11]
    when _T_29 : @[Xbar.scala 276:11]
      node _T_30 = eq(_T_27, UInt<1>("h0")) @[Xbar.scala 276:11]
      when _T_30 : @[Xbar.scala 276:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:276 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_4 @[Xbar.scala 276:11]
      assert(clock, _T_27, UInt<1>("h1"), "") : assert_4 @[Xbar.scala 276:11]
    node _T_31 = eq(portsBIO_filtered[0].valid, UInt<1>("h0")) @[Xbar.scala 278:13]
    node _T_32 = or(_T_31, winner_2[0]) @[Xbar.scala 278:23]
    node _T_33 = asUInt(reset) @[Xbar.scala 278:12]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Xbar.scala 278:12]
    when _T_34 : @[Xbar.scala 278:12]
      node _T_35 = eq(_T_32, UInt<1>("h0")) @[Xbar.scala 278:12]
      when _T_35 : @[Xbar.scala 278:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Xbar.scala:278 assert (!anyValid || winner.reduce(_||_))\n") : printf_5 @[Xbar.scala 278:12]
      assert(clock, _T_32, UInt<1>("h1"), "") : assert_5 @[Xbar.scala 278:12]
    wire _state_WIRE_2 : UInt<1>[1] @[Xbar.scala 281:51]
    _state_WIRE_2[0] <= UInt<1>("h0") @[Xbar.scala 281:51]
    reg state_2 : UInt<1>[1], clock with :
      reset => (reset, _state_WIRE_2) @[Xbar.scala 281:24]
    node muxState_2 = mux(idle_2, winner_2, state_2) @[Xbar.scala 282:23]
    state_2 <= muxState_2 @[Xbar.scala 283:11]
    when portsBIO_filtered[0].valid : @[Xbar.scala 286:21]
      idle_2 <= UInt<1>("h0") @[Xbar.scala 286:28]
    node _T_36 = and(in[0].b.ready, in[0].b.valid) @[Decoupled.scala 51:35]
    when _T_36 : @[Xbar.scala 287:22]
      idle_2 <= UInt<1>("h1") @[Xbar.scala 287:29]
    portsBIO_filtered[0].ready <= in[0].b.ready @[Xbar.scala 295:24]
    node _in_0_b_valid_T = mux(idle_2, portsBIO_filtered[0].valid, portsBIO_filtered[0].valid) @[Xbar.scala 298:22]
    in[0].b.valid <= _in_0_b_valid_T @[Xbar.scala 298:16]
    in[0].b.bits.resp <= portsBIO_filtered[0].bits.resp @[BundleMap.scala 247:19]
    in[0].b.bits.id <= portsBIO_filtered[0].bits.id @[BundleMap.scala 247:19]

  module Queue_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_2 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_23 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_24 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_25 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_26 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_27 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module Queue_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_29 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_30 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_31 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_32 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_3 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_28 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_29 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_30 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_31 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_32 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module Queue_33 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_34 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_35 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_36 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_37 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_38 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_39 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_40 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_41 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_42 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_43 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_44 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_45 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_46 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_47 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_48 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_49 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_50 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_51 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_52 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_53 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_54 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_55 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_56 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_57 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_58 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_59 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_60 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_61 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_62 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_63 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_64 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_65 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_66 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_67 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_68 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_69 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_70 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_71 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_72 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_73 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_74 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_75 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_76 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_77 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_78 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_79 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_80 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_81 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_82 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_83 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_84 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_85 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_86 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_87 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_88 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_89 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_90 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_91 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_92 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_93 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_94 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_95 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_96 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_97 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_98 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_99 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_100 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_101 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_102 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_103 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_104 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_105 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_106 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_107 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_108 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_109 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_110 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_111 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_112 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_113 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_114 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_115 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_116 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_117 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_118 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_119 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_120 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_121 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_122 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_123 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_124 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_125 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_126 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_127 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_128 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_129 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_130 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_131 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_132 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_133 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_134 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_135 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_136 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_137 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_138 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_139 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_140 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_141 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_142 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_143 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_144 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_145 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_146 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_147 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_148 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_149 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_150 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_151 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_152 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_153 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_154 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_155 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_156 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_157 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_158 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_159 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module Queue_160 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}, count : UInt<2>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>} [3] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
      when wrap : @[Counter.scala 87:20]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h2")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
      when wrap_1 : @[Counter.scala 87:20]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 87:28]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = mux(maybe_full, UInt<2>("h3"), UInt<1>("h0")) @[Decoupled.scala 333:10]
    node _io_count_T_1 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 334:25]
    node _io_count_T_2 = add(UInt<2>("h3"), ptr_diff) @[Decoupled.scala 334:57]
    node _io_count_T_3 = tail(_io_count_T_2, 1) @[Decoupled.scala 334:57]
    node _io_count_T_4 = mux(_io_count_T_1, _io_count_T_3, ptr_diff) @[Decoupled.scala 334:10]
    node _io_count_T_5 = mux(ptr_match, _io_count_T, _io_count_T_4) @[Decoupled.scala 331:20]
    io.count <= _io_count_T_5 @[Decoupled.scala 331:14]

  module AXI4UserYanker :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst Queue of Queue_33 @[UserYanker.scala 50:17]
    Queue.clock is invalid
    Queue.reset is invalid
    Queue.io is invalid
    Queue.clock <= clock
    Queue.reset <= reset
    inst Queue_1 of Queue_34 @[UserYanker.scala 50:17]
    Queue_1.clock is invalid
    Queue_1.reset is invalid
    Queue_1.io is invalid
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    inst Queue_2 of Queue_35 @[UserYanker.scala 50:17]
    Queue_2.clock is invalid
    Queue_2.reset is invalid
    Queue_2.io is invalid
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    inst Queue_3 of Queue_36 @[UserYanker.scala 50:17]
    Queue_3.clock is invalid
    Queue_3.reset is invalid
    Queue_3.io is invalid
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    inst Queue_4 of Queue_37 @[UserYanker.scala 50:17]
    Queue_4.clock is invalid
    Queue_4.reset is invalid
    Queue_4.io is invalid
    Queue_4.clock <= clock
    Queue_4.reset <= reset
    inst Queue_5 of Queue_38 @[UserYanker.scala 50:17]
    Queue_5.clock is invalid
    Queue_5.reset is invalid
    Queue_5.io is invalid
    Queue_5.clock <= clock
    Queue_5.reset <= reset
    inst Queue_6 of Queue_39 @[UserYanker.scala 50:17]
    Queue_6.clock is invalid
    Queue_6.reset is invalid
    Queue_6.io is invalid
    Queue_6.clock <= clock
    Queue_6.reset <= reset
    inst Queue_7 of Queue_40 @[UserYanker.scala 50:17]
    Queue_7.clock is invalid
    Queue_7.reset is invalid
    Queue_7.io is invalid
    Queue_7.clock <= clock
    Queue_7.reset <= reset
    inst Queue_8 of Queue_41 @[UserYanker.scala 50:17]
    Queue_8.clock is invalid
    Queue_8.reset is invalid
    Queue_8.io is invalid
    Queue_8.clock <= clock
    Queue_8.reset <= reset
    inst Queue_9 of Queue_42 @[UserYanker.scala 50:17]
    Queue_9.clock is invalid
    Queue_9.reset is invalid
    Queue_9.io is invalid
    Queue_9.clock <= clock
    Queue_9.reset <= reset
    inst Queue_10 of Queue_43 @[UserYanker.scala 50:17]
    Queue_10.clock is invalid
    Queue_10.reset is invalid
    Queue_10.io is invalid
    Queue_10.clock <= clock
    Queue_10.reset <= reset
    inst Queue_11 of Queue_44 @[UserYanker.scala 50:17]
    Queue_11.clock is invalid
    Queue_11.reset is invalid
    Queue_11.io is invalid
    Queue_11.clock <= clock
    Queue_11.reset <= reset
    inst Queue_12 of Queue_45 @[UserYanker.scala 50:17]
    Queue_12.clock is invalid
    Queue_12.reset is invalid
    Queue_12.io is invalid
    Queue_12.clock <= clock
    Queue_12.reset <= reset
    inst Queue_13 of Queue_46 @[UserYanker.scala 50:17]
    Queue_13.clock is invalid
    Queue_13.reset is invalid
    Queue_13.io is invalid
    Queue_13.clock <= clock
    Queue_13.reset <= reset
    inst Queue_14 of Queue_47 @[UserYanker.scala 50:17]
    Queue_14.clock is invalid
    Queue_14.reset is invalid
    Queue_14.io is invalid
    Queue_14.clock <= clock
    Queue_14.reset <= reset
    inst Queue_15 of Queue_48 @[UserYanker.scala 50:17]
    Queue_15.clock is invalid
    Queue_15.reset is invalid
    Queue_15.io is invalid
    Queue_15.clock <= clock
    Queue_15.reset <= reset
    inst Queue_16 of Queue_49 @[UserYanker.scala 50:17]
    Queue_16.clock is invalid
    Queue_16.reset is invalid
    Queue_16.io is invalid
    Queue_16.clock <= clock
    Queue_16.reset <= reset
    inst Queue_17 of Queue_50 @[UserYanker.scala 50:17]
    Queue_17.clock is invalid
    Queue_17.reset is invalid
    Queue_17.io is invalid
    Queue_17.clock <= clock
    Queue_17.reset <= reset
    inst Queue_18 of Queue_51 @[UserYanker.scala 50:17]
    Queue_18.clock is invalid
    Queue_18.reset is invalid
    Queue_18.io is invalid
    Queue_18.clock <= clock
    Queue_18.reset <= reset
    inst Queue_19 of Queue_52 @[UserYanker.scala 50:17]
    Queue_19.clock is invalid
    Queue_19.reset is invalid
    Queue_19.io is invalid
    Queue_19.clock <= clock
    Queue_19.reset <= reset
    inst Queue_20 of Queue_53 @[UserYanker.scala 50:17]
    Queue_20.clock is invalid
    Queue_20.reset is invalid
    Queue_20.io is invalid
    Queue_20.clock <= clock
    Queue_20.reset <= reset
    inst Queue_21 of Queue_54 @[UserYanker.scala 50:17]
    Queue_21.clock is invalid
    Queue_21.reset is invalid
    Queue_21.io is invalid
    Queue_21.clock <= clock
    Queue_21.reset <= reset
    inst Queue_22 of Queue_55 @[UserYanker.scala 50:17]
    Queue_22.clock is invalid
    Queue_22.reset is invalid
    Queue_22.io is invalid
    Queue_22.clock <= clock
    Queue_22.reset <= reset
    inst Queue_23 of Queue_56 @[UserYanker.scala 50:17]
    Queue_23.clock is invalid
    Queue_23.reset is invalid
    Queue_23.io is invalid
    Queue_23.clock <= clock
    Queue_23.reset <= reset
    inst Queue_24 of Queue_57 @[UserYanker.scala 50:17]
    Queue_24.clock is invalid
    Queue_24.reset is invalid
    Queue_24.io is invalid
    Queue_24.clock <= clock
    Queue_24.reset <= reset
    inst Queue_25 of Queue_58 @[UserYanker.scala 50:17]
    Queue_25.clock is invalid
    Queue_25.reset is invalid
    Queue_25.io is invalid
    Queue_25.clock <= clock
    Queue_25.reset <= reset
    inst Queue_26 of Queue_59 @[UserYanker.scala 50:17]
    Queue_26.clock is invalid
    Queue_26.reset is invalid
    Queue_26.io is invalid
    Queue_26.clock <= clock
    Queue_26.reset <= reset
    inst Queue_27 of Queue_60 @[UserYanker.scala 50:17]
    Queue_27.clock is invalid
    Queue_27.reset is invalid
    Queue_27.io is invalid
    Queue_27.clock <= clock
    Queue_27.reset <= reset
    inst Queue_28 of Queue_61 @[UserYanker.scala 50:17]
    Queue_28.clock is invalid
    Queue_28.reset is invalid
    Queue_28.io is invalid
    Queue_28.clock <= clock
    Queue_28.reset <= reset
    inst Queue_29 of Queue_62 @[UserYanker.scala 50:17]
    Queue_29.clock is invalid
    Queue_29.reset is invalid
    Queue_29.io is invalid
    Queue_29.clock <= clock
    Queue_29.reset <= reset
    inst Queue_30 of Queue_63 @[UserYanker.scala 50:17]
    Queue_30.clock is invalid
    Queue_30.reset is invalid
    Queue_30.io is invalid
    Queue_30.clock <= clock
    Queue_30.reset <= reset
    inst Queue_31 of Queue_64 @[UserYanker.scala 50:17]
    Queue_31.clock is invalid
    Queue_31.reset is invalid
    Queue_31.io is invalid
    Queue_31.clock <= clock
    Queue_31.reset <= reset
    inst Queue_32 of Queue_65 @[UserYanker.scala 50:17]
    Queue_32.clock is invalid
    Queue_32.reset is invalid
    Queue_32.io is invalid
    Queue_32.clock <= clock
    Queue_32.reset <= reset
    inst Queue_33 of Queue_66 @[UserYanker.scala 50:17]
    Queue_33.clock is invalid
    Queue_33.reset is invalid
    Queue_33.io is invalid
    Queue_33.clock <= clock
    Queue_33.reset <= reset
    inst Queue_34 of Queue_67 @[UserYanker.scala 50:17]
    Queue_34.clock is invalid
    Queue_34.reset is invalid
    Queue_34.io is invalid
    Queue_34.clock <= clock
    Queue_34.reset <= reset
    inst Queue_35 of Queue_68 @[UserYanker.scala 50:17]
    Queue_35.clock is invalid
    Queue_35.reset is invalid
    Queue_35.io is invalid
    Queue_35.clock <= clock
    Queue_35.reset <= reset
    inst Queue_36 of Queue_69 @[UserYanker.scala 50:17]
    Queue_36.clock is invalid
    Queue_36.reset is invalid
    Queue_36.io is invalid
    Queue_36.clock <= clock
    Queue_36.reset <= reset
    inst Queue_37 of Queue_70 @[UserYanker.scala 50:17]
    Queue_37.clock is invalid
    Queue_37.reset is invalid
    Queue_37.io is invalid
    Queue_37.clock <= clock
    Queue_37.reset <= reset
    inst Queue_38 of Queue_71 @[UserYanker.scala 50:17]
    Queue_38.clock is invalid
    Queue_38.reset is invalid
    Queue_38.io is invalid
    Queue_38.clock <= clock
    Queue_38.reset <= reset
    inst Queue_39 of Queue_72 @[UserYanker.scala 50:17]
    Queue_39.clock is invalid
    Queue_39.reset is invalid
    Queue_39.io is invalid
    Queue_39.clock <= clock
    Queue_39.reset <= reset
    inst Queue_40 of Queue_73 @[UserYanker.scala 50:17]
    Queue_40.clock is invalid
    Queue_40.reset is invalid
    Queue_40.io is invalid
    Queue_40.clock <= clock
    Queue_40.reset <= reset
    inst Queue_41 of Queue_74 @[UserYanker.scala 50:17]
    Queue_41.clock is invalid
    Queue_41.reset is invalid
    Queue_41.io is invalid
    Queue_41.clock <= clock
    Queue_41.reset <= reset
    inst Queue_42 of Queue_75 @[UserYanker.scala 50:17]
    Queue_42.clock is invalid
    Queue_42.reset is invalid
    Queue_42.io is invalid
    Queue_42.clock <= clock
    Queue_42.reset <= reset
    inst Queue_43 of Queue_76 @[UserYanker.scala 50:17]
    Queue_43.clock is invalid
    Queue_43.reset is invalid
    Queue_43.io is invalid
    Queue_43.clock <= clock
    Queue_43.reset <= reset
    inst Queue_44 of Queue_77 @[UserYanker.scala 50:17]
    Queue_44.clock is invalid
    Queue_44.reset is invalid
    Queue_44.io is invalid
    Queue_44.clock <= clock
    Queue_44.reset <= reset
    inst Queue_45 of Queue_78 @[UserYanker.scala 50:17]
    Queue_45.clock is invalid
    Queue_45.reset is invalid
    Queue_45.io is invalid
    Queue_45.clock <= clock
    Queue_45.reset <= reset
    inst Queue_46 of Queue_79 @[UserYanker.scala 50:17]
    Queue_46.clock is invalid
    Queue_46.reset is invalid
    Queue_46.io is invalid
    Queue_46.clock <= clock
    Queue_46.reset <= reset
    inst Queue_47 of Queue_80 @[UserYanker.scala 50:17]
    Queue_47.clock is invalid
    Queue_47.reset is invalid
    Queue_47.io is invalid
    Queue_47.clock <= clock
    Queue_47.reset <= reset
    inst Queue_48 of Queue_81 @[UserYanker.scala 50:17]
    Queue_48.clock is invalid
    Queue_48.reset is invalid
    Queue_48.io is invalid
    Queue_48.clock <= clock
    Queue_48.reset <= reset
    inst Queue_49 of Queue_82 @[UserYanker.scala 50:17]
    Queue_49.clock is invalid
    Queue_49.reset is invalid
    Queue_49.io is invalid
    Queue_49.clock <= clock
    Queue_49.reset <= reset
    inst Queue_50 of Queue_83 @[UserYanker.scala 50:17]
    Queue_50.clock is invalid
    Queue_50.reset is invalid
    Queue_50.io is invalid
    Queue_50.clock <= clock
    Queue_50.reset <= reset
    inst Queue_51 of Queue_84 @[UserYanker.scala 50:17]
    Queue_51.clock is invalid
    Queue_51.reset is invalid
    Queue_51.io is invalid
    Queue_51.clock <= clock
    Queue_51.reset <= reset
    inst Queue_52 of Queue_85 @[UserYanker.scala 50:17]
    Queue_52.clock is invalid
    Queue_52.reset is invalid
    Queue_52.io is invalid
    Queue_52.clock <= clock
    Queue_52.reset <= reset
    inst Queue_53 of Queue_86 @[UserYanker.scala 50:17]
    Queue_53.clock is invalid
    Queue_53.reset is invalid
    Queue_53.io is invalid
    Queue_53.clock <= clock
    Queue_53.reset <= reset
    inst Queue_54 of Queue_87 @[UserYanker.scala 50:17]
    Queue_54.clock is invalid
    Queue_54.reset is invalid
    Queue_54.io is invalid
    Queue_54.clock <= clock
    Queue_54.reset <= reset
    inst Queue_55 of Queue_88 @[UserYanker.scala 50:17]
    Queue_55.clock is invalid
    Queue_55.reset is invalid
    Queue_55.io is invalid
    Queue_55.clock <= clock
    Queue_55.reset <= reset
    inst Queue_56 of Queue_89 @[UserYanker.scala 50:17]
    Queue_56.clock is invalid
    Queue_56.reset is invalid
    Queue_56.io is invalid
    Queue_56.clock <= clock
    Queue_56.reset <= reset
    inst Queue_57 of Queue_90 @[UserYanker.scala 50:17]
    Queue_57.clock is invalid
    Queue_57.reset is invalid
    Queue_57.io is invalid
    Queue_57.clock <= clock
    Queue_57.reset <= reset
    inst Queue_58 of Queue_91 @[UserYanker.scala 50:17]
    Queue_58.clock is invalid
    Queue_58.reset is invalid
    Queue_58.io is invalid
    Queue_58.clock <= clock
    Queue_58.reset <= reset
    inst Queue_59 of Queue_92 @[UserYanker.scala 50:17]
    Queue_59.clock is invalid
    Queue_59.reset is invalid
    Queue_59.io is invalid
    Queue_59.clock <= clock
    Queue_59.reset <= reset
    inst Queue_60 of Queue_93 @[UserYanker.scala 50:17]
    Queue_60.clock is invalid
    Queue_60.reset is invalid
    Queue_60.io is invalid
    Queue_60.clock <= clock
    Queue_60.reset <= reset
    inst Queue_61 of Queue_94 @[UserYanker.scala 50:17]
    Queue_61.clock is invalid
    Queue_61.reset is invalid
    Queue_61.io is invalid
    Queue_61.clock <= clock
    Queue_61.reset <= reset
    inst Queue_62 of Queue_95 @[UserYanker.scala 50:17]
    Queue_62.clock is invalid
    Queue_62.reset is invalid
    Queue_62.io is invalid
    Queue_62.clock <= clock
    Queue_62.reset <= reset
    inst Queue_63 of Queue_96 @[UserYanker.scala 50:17]
    Queue_63.clock is invalid
    Queue_63.reset is invalid
    Queue_63.io is invalid
    Queue_63.clock <= clock
    Queue_63.reset <= reset
    inst Queue_64 of Queue_97 @[UserYanker.scala 50:17]
    Queue_64.clock is invalid
    Queue_64.reset is invalid
    Queue_64.io is invalid
    Queue_64.clock <= clock
    Queue_64.reset <= reset
    inst Queue_65 of Queue_98 @[UserYanker.scala 50:17]
    Queue_65.clock is invalid
    Queue_65.reset is invalid
    Queue_65.io is invalid
    Queue_65.clock <= clock
    Queue_65.reset <= reset
    inst Queue_66 of Queue_99 @[UserYanker.scala 50:17]
    Queue_66.clock is invalid
    Queue_66.reset is invalid
    Queue_66.io is invalid
    Queue_66.clock <= clock
    Queue_66.reset <= reset
    inst Queue_67 of Queue_100 @[UserYanker.scala 50:17]
    Queue_67.clock is invalid
    Queue_67.reset is invalid
    Queue_67.io is invalid
    Queue_67.clock <= clock
    Queue_67.reset <= reset
    inst Queue_68 of Queue_101 @[UserYanker.scala 50:17]
    Queue_68.clock is invalid
    Queue_68.reset is invalid
    Queue_68.io is invalid
    Queue_68.clock <= clock
    Queue_68.reset <= reset
    inst Queue_69 of Queue_102 @[UserYanker.scala 50:17]
    Queue_69.clock is invalid
    Queue_69.reset is invalid
    Queue_69.io is invalid
    Queue_69.clock <= clock
    Queue_69.reset <= reset
    inst Queue_70 of Queue_103 @[UserYanker.scala 50:17]
    Queue_70.clock is invalid
    Queue_70.reset is invalid
    Queue_70.io is invalid
    Queue_70.clock <= clock
    Queue_70.reset <= reset
    inst Queue_71 of Queue_104 @[UserYanker.scala 50:17]
    Queue_71.clock is invalid
    Queue_71.reset is invalid
    Queue_71.io is invalid
    Queue_71.clock <= clock
    Queue_71.reset <= reset
    inst Queue_72 of Queue_105 @[UserYanker.scala 50:17]
    Queue_72.clock is invalid
    Queue_72.reset is invalid
    Queue_72.io is invalid
    Queue_72.clock <= clock
    Queue_72.reset <= reset
    inst Queue_73 of Queue_106 @[UserYanker.scala 50:17]
    Queue_73.clock is invalid
    Queue_73.reset is invalid
    Queue_73.io is invalid
    Queue_73.clock <= clock
    Queue_73.reset <= reset
    inst Queue_74 of Queue_107 @[UserYanker.scala 50:17]
    Queue_74.clock is invalid
    Queue_74.reset is invalid
    Queue_74.io is invalid
    Queue_74.clock <= clock
    Queue_74.reset <= reset
    inst Queue_75 of Queue_108 @[UserYanker.scala 50:17]
    Queue_75.clock is invalid
    Queue_75.reset is invalid
    Queue_75.io is invalid
    Queue_75.clock <= clock
    Queue_75.reset <= reset
    inst Queue_76 of Queue_109 @[UserYanker.scala 50:17]
    Queue_76.clock is invalid
    Queue_76.reset is invalid
    Queue_76.io is invalid
    Queue_76.clock <= clock
    Queue_76.reset <= reset
    inst Queue_77 of Queue_110 @[UserYanker.scala 50:17]
    Queue_77.clock is invalid
    Queue_77.reset is invalid
    Queue_77.io is invalid
    Queue_77.clock <= clock
    Queue_77.reset <= reset
    inst Queue_78 of Queue_111 @[UserYanker.scala 50:17]
    Queue_78.clock is invalid
    Queue_78.reset is invalid
    Queue_78.io is invalid
    Queue_78.clock <= clock
    Queue_78.reset <= reset
    inst Queue_79 of Queue_112 @[UserYanker.scala 50:17]
    Queue_79.clock is invalid
    Queue_79.reset is invalid
    Queue_79.io is invalid
    Queue_79.clock <= clock
    Queue_79.reset <= reset
    inst Queue_80 of Queue_113 @[UserYanker.scala 50:17]
    Queue_80.clock is invalid
    Queue_80.reset is invalid
    Queue_80.io is invalid
    Queue_80.clock <= clock
    Queue_80.reset <= reset
    inst Queue_81 of Queue_114 @[UserYanker.scala 50:17]
    Queue_81.clock is invalid
    Queue_81.reset is invalid
    Queue_81.io is invalid
    Queue_81.clock <= clock
    Queue_81.reset <= reset
    inst Queue_82 of Queue_115 @[UserYanker.scala 50:17]
    Queue_82.clock is invalid
    Queue_82.reset is invalid
    Queue_82.io is invalid
    Queue_82.clock <= clock
    Queue_82.reset <= reset
    inst Queue_83 of Queue_116 @[UserYanker.scala 50:17]
    Queue_83.clock is invalid
    Queue_83.reset is invalid
    Queue_83.io is invalid
    Queue_83.clock <= clock
    Queue_83.reset <= reset
    inst Queue_84 of Queue_117 @[UserYanker.scala 50:17]
    Queue_84.clock is invalid
    Queue_84.reset is invalid
    Queue_84.io is invalid
    Queue_84.clock <= clock
    Queue_84.reset <= reset
    inst Queue_85 of Queue_118 @[UserYanker.scala 50:17]
    Queue_85.clock is invalid
    Queue_85.reset is invalid
    Queue_85.io is invalid
    Queue_85.clock <= clock
    Queue_85.reset <= reset
    inst Queue_86 of Queue_119 @[UserYanker.scala 50:17]
    Queue_86.clock is invalid
    Queue_86.reset is invalid
    Queue_86.io is invalid
    Queue_86.clock <= clock
    Queue_86.reset <= reset
    inst Queue_87 of Queue_120 @[UserYanker.scala 50:17]
    Queue_87.clock is invalid
    Queue_87.reset is invalid
    Queue_87.io is invalid
    Queue_87.clock <= clock
    Queue_87.reset <= reset
    inst Queue_88 of Queue_121 @[UserYanker.scala 50:17]
    Queue_88.clock is invalid
    Queue_88.reset is invalid
    Queue_88.io is invalid
    Queue_88.clock <= clock
    Queue_88.reset <= reset
    inst Queue_89 of Queue_122 @[UserYanker.scala 50:17]
    Queue_89.clock is invalid
    Queue_89.reset is invalid
    Queue_89.io is invalid
    Queue_89.clock <= clock
    Queue_89.reset <= reset
    inst Queue_90 of Queue_123 @[UserYanker.scala 50:17]
    Queue_90.clock is invalid
    Queue_90.reset is invalid
    Queue_90.io is invalid
    Queue_90.clock <= clock
    Queue_90.reset <= reset
    inst Queue_91 of Queue_124 @[UserYanker.scala 50:17]
    Queue_91.clock is invalid
    Queue_91.reset is invalid
    Queue_91.io is invalid
    Queue_91.clock <= clock
    Queue_91.reset <= reset
    inst Queue_92 of Queue_125 @[UserYanker.scala 50:17]
    Queue_92.clock is invalid
    Queue_92.reset is invalid
    Queue_92.io is invalid
    Queue_92.clock <= clock
    Queue_92.reset <= reset
    inst Queue_93 of Queue_126 @[UserYanker.scala 50:17]
    Queue_93.clock is invalid
    Queue_93.reset is invalid
    Queue_93.io is invalid
    Queue_93.clock <= clock
    Queue_93.reset <= reset
    inst Queue_94 of Queue_127 @[UserYanker.scala 50:17]
    Queue_94.clock is invalid
    Queue_94.reset is invalid
    Queue_94.io is invalid
    Queue_94.clock <= clock
    Queue_94.reset <= reset
    inst Queue_95 of Queue_128 @[UserYanker.scala 50:17]
    Queue_95.clock is invalid
    Queue_95.reset is invalid
    Queue_95.io is invalid
    Queue_95.clock <= clock
    Queue_95.reset <= reset
    inst Queue_96 of Queue_129 @[UserYanker.scala 50:17]
    Queue_96.clock is invalid
    Queue_96.reset is invalid
    Queue_96.io is invalid
    Queue_96.clock <= clock
    Queue_96.reset <= reset
    inst Queue_97 of Queue_130 @[UserYanker.scala 50:17]
    Queue_97.clock is invalid
    Queue_97.reset is invalid
    Queue_97.io is invalid
    Queue_97.clock <= clock
    Queue_97.reset <= reset
    inst Queue_98 of Queue_131 @[UserYanker.scala 50:17]
    Queue_98.clock is invalid
    Queue_98.reset is invalid
    Queue_98.io is invalid
    Queue_98.clock <= clock
    Queue_98.reset <= reset
    inst Queue_99 of Queue_132 @[UserYanker.scala 50:17]
    Queue_99.clock is invalid
    Queue_99.reset is invalid
    Queue_99.io is invalid
    Queue_99.clock <= clock
    Queue_99.reset <= reset
    inst Queue_100 of Queue_133 @[UserYanker.scala 50:17]
    Queue_100.clock is invalid
    Queue_100.reset is invalid
    Queue_100.io is invalid
    Queue_100.clock <= clock
    Queue_100.reset <= reset
    inst Queue_101 of Queue_134 @[UserYanker.scala 50:17]
    Queue_101.clock is invalid
    Queue_101.reset is invalid
    Queue_101.io is invalid
    Queue_101.clock <= clock
    Queue_101.reset <= reset
    inst Queue_102 of Queue_135 @[UserYanker.scala 50:17]
    Queue_102.clock is invalid
    Queue_102.reset is invalid
    Queue_102.io is invalid
    Queue_102.clock <= clock
    Queue_102.reset <= reset
    inst Queue_103 of Queue_136 @[UserYanker.scala 50:17]
    Queue_103.clock is invalid
    Queue_103.reset is invalid
    Queue_103.io is invalid
    Queue_103.clock <= clock
    Queue_103.reset <= reset
    inst Queue_104 of Queue_137 @[UserYanker.scala 50:17]
    Queue_104.clock is invalid
    Queue_104.reset is invalid
    Queue_104.io is invalid
    Queue_104.clock <= clock
    Queue_104.reset <= reset
    inst Queue_105 of Queue_138 @[UserYanker.scala 50:17]
    Queue_105.clock is invalid
    Queue_105.reset is invalid
    Queue_105.io is invalid
    Queue_105.clock <= clock
    Queue_105.reset <= reset
    inst Queue_106 of Queue_139 @[UserYanker.scala 50:17]
    Queue_106.clock is invalid
    Queue_106.reset is invalid
    Queue_106.io is invalid
    Queue_106.clock <= clock
    Queue_106.reset <= reset
    inst Queue_107 of Queue_140 @[UserYanker.scala 50:17]
    Queue_107.clock is invalid
    Queue_107.reset is invalid
    Queue_107.io is invalid
    Queue_107.clock <= clock
    Queue_107.reset <= reset
    inst Queue_108 of Queue_141 @[UserYanker.scala 50:17]
    Queue_108.clock is invalid
    Queue_108.reset is invalid
    Queue_108.io is invalid
    Queue_108.clock <= clock
    Queue_108.reset <= reset
    inst Queue_109 of Queue_142 @[UserYanker.scala 50:17]
    Queue_109.clock is invalid
    Queue_109.reset is invalid
    Queue_109.io is invalid
    Queue_109.clock <= clock
    Queue_109.reset <= reset
    inst Queue_110 of Queue_143 @[UserYanker.scala 50:17]
    Queue_110.clock is invalid
    Queue_110.reset is invalid
    Queue_110.io is invalid
    Queue_110.clock <= clock
    Queue_110.reset <= reset
    inst Queue_111 of Queue_144 @[UserYanker.scala 50:17]
    Queue_111.clock is invalid
    Queue_111.reset is invalid
    Queue_111.io is invalid
    Queue_111.clock <= clock
    Queue_111.reset <= reset
    inst Queue_112 of Queue_145 @[UserYanker.scala 50:17]
    Queue_112.clock is invalid
    Queue_112.reset is invalid
    Queue_112.io is invalid
    Queue_112.clock <= clock
    Queue_112.reset <= reset
    inst Queue_113 of Queue_146 @[UserYanker.scala 50:17]
    Queue_113.clock is invalid
    Queue_113.reset is invalid
    Queue_113.io is invalid
    Queue_113.clock <= clock
    Queue_113.reset <= reset
    inst Queue_114 of Queue_147 @[UserYanker.scala 50:17]
    Queue_114.clock is invalid
    Queue_114.reset is invalid
    Queue_114.io is invalid
    Queue_114.clock <= clock
    Queue_114.reset <= reset
    inst Queue_115 of Queue_148 @[UserYanker.scala 50:17]
    Queue_115.clock is invalid
    Queue_115.reset is invalid
    Queue_115.io is invalid
    Queue_115.clock <= clock
    Queue_115.reset <= reset
    inst Queue_116 of Queue_149 @[UserYanker.scala 50:17]
    Queue_116.clock is invalid
    Queue_116.reset is invalid
    Queue_116.io is invalid
    Queue_116.clock <= clock
    Queue_116.reset <= reset
    inst Queue_117 of Queue_150 @[UserYanker.scala 50:17]
    Queue_117.clock is invalid
    Queue_117.reset is invalid
    Queue_117.io is invalid
    Queue_117.clock <= clock
    Queue_117.reset <= reset
    inst Queue_118 of Queue_151 @[UserYanker.scala 50:17]
    Queue_118.clock is invalid
    Queue_118.reset is invalid
    Queue_118.io is invalid
    Queue_118.clock <= clock
    Queue_118.reset <= reset
    inst Queue_119 of Queue_152 @[UserYanker.scala 50:17]
    Queue_119.clock is invalid
    Queue_119.reset is invalid
    Queue_119.io is invalid
    Queue_119.clock <= clock
    Queue_119.reset <= reset
    inst Queue_120 of Queue_153 @[UserYanker.scala 50:17]
    Queue_120.clock is invalid
    Queue_120.reset is invalid
    Queue_120.io is invalid
    Queue_120.clock <= clock
    Queue_120.reset <= reset
    inst Queue_121 of Queue_154 @[UserYanker.scala 50:17]
    Queue_121.clock is invalid
    Queue_121.reset is invalid
    Queue_121.io is invalid
    Queue_121.clock <= clock
    Queue_121.reset <= reset
    inst Queue_122 of Queue_155 @[UserYanker.scala 50:17]
    Queue_122.clock is invalid
    Queue_122.reset is invalid
    Queue_122.io is invalid
    Queue_122.clock <= clock
    Queue_122.reset <= reset
    inst Queue_123 of Queue_156 @[UserYanker.scala 50:17]
    Queue_123.clock is invalid
    Queue_123.reset is invalid
    Queue_123.io is invalid
    Queue_123.clock <= clock
    Queue_123.reset <= reset
    inst Queue_124 of Queue_157 @[UserYanker.scala 50:17]
    Queue_124.clock is invalid
    Queue_124.reset is invalid
    Queue_124.io is invalid
    Queue_124.clock <= clock
    Queue_124.reset <= reset
    inst Queue_125 of Queue_158 @[UserYanker.scala 50:17]
    Queue_125.clock is invalid
    Queue_125.reset is invalid
    Queue_125.io is invalid
    Queue_125.clock <= clock
    Queue_125.reset <= reset
    inst Queue_126 of Queue_159 @[UserYanker.scala 50:17]
    Queue_126.clock is invalid
    Queue_126.reset is invalid
    Queue_126.io is invalid
    Queue_126.clock <= clock
    Queue_126.reset <= reset
    inst Queue_127 of Queue_160 @[UserYanker.scala 50:17]
    Queue_127.clock is invalid
    Queue_127.reset is invalid
    Queue_127.io is invalid
    Queue_127.clock <= clock
    Queue_127.reset <= reset
    wire _ar_ready_WIRE : UInt<1>[64] @[UserYanker.scala 58:29]
    _ar_ready_WIRE is invalid @[UserYanker.scala 58:29]
    _ar_ready_WIRE[0] <= Queue.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[1] <= Queue_1.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[2] <= Queue_2.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[3] <= Queue_3.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[4] <= Queue_4.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[5] <= Queue_5.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[6] <= Queue_6.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[7] <= Queue_7.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[8] <= Queue_8.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[9] <= Queue_9.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[10] <= Queue_10.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[11] <= Queue_11.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[12] <= Queue_12.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[13] <= Queue_13.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[14] <= Queue_14.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[15] <= Queue_15.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[16] <= Queue_16.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[17] <= Queue_17.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[18] <= Queue_18.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[19] <= Queue_19.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[20] <= Queue_20.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[21] <= Queue_21.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[22] <= Queue_22.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[23] <= Queue_23.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[24] <= Queue_24.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[25] <= Queue_25.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[26] <= Queue_26.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[27] <= Queue_27.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[28] <= Queue_28.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[29] <= Queue_29.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[30] <= Queue_30.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[31] <= Queue_31.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[32] <= Queue_32.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[33] <= Queue_33.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[34] <= Queue_34.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[35] <= Queue_35.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[36] <= Queue_36.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[37] <= Queue_37.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[38] <= Queue_38.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[39] <= Queue_39.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[40] <= Queue_40.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[41] <= Queue_41.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[42] <= Queue_42.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[43] <= Queue_43.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[44] <= Queue_44.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[45] <= Queue_45.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[46] <= Queue_46.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[47] <= Queue_47.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[48] <= Queue_48.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[49] <= Queue_49.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[50] <= Queue_50.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[51] <= Queue_51.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[52] <= Queue_52.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[53] <= Queue_53.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[54] <= Queue_54.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[55] <= Queue_55.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[56] <= Queue_56.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[57] <= Queue_57.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[58] <= Queue_58.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[59] <= Queue_59.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[60] <= Queue_60.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[61] <= Queue_61.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[62] <= Queue_62.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[63] <= Queue_63.io.enq.ready @[UserYanker.scala 58:29]
    node _bundleIn_0_ar_ready_T = and(x1.ar.ready, _ar_ready_WIRE[bundleIn_0.ar.bits.id]) @[UserYanker.scala 59:36]
    bundleIn_0.ar.ready <= _bundleIn_0_ar_ready_T @[UserYanker.scala 59:20]
    node _x1_ar_valid_T = and(bundleIn_0.ar.valid, _ar_ready_WIRE[bundleIn_0.ar.bits.id]) @[UserYanker.scala 60:36]
    x1.ar.valid <= _x1_ar_valid_T @[UserYanker.scala 60:20]
    x1.ar.bits.qos <= bundleIn_0.ar.bits.qos @[BundleMap.scala 247:19]
    x1.ar.bits.prot <= bundleIn_0.ar.bits.prot @[BundleMap.scala 247:19]
    x1.ar.bits.cache <= bundleIn_0.ar.bits.cache @[BundleMap.scala 247:19]
    x1.ar.bits.lock <= bundleIn_0.ar.bits.lock @[BundleMap.scala 247:19]
    x1.ar.bits.burst <= bundleIn_0.ar.bits.burst @[BundleMap.scala 247:19]
    x1.ar.bits.size <= bundleIn_0.ar.bits.size @[BundleMap.scala 247:19]
    x1.ar.bits.len <= bundleIn_0.ar.bits.len @[BundleMap.scala 247:19]
    x1.ar.bits.addr <= bundleIn_0.ar.bits.addr @[BundleMap.scala 247:19]
    x1.ar.bits.id <= bundleIn_0.ar.bits.id @[BundleMap.scala 247:19]
    wire _r_valid_WIRE : UInt<1>[64] @[UserYanker.scala 64:28]
    _r_valid_WIRE is invalid @[UserYanker.scala 64:28]
    _r_valid_WIRE[0] <= Queue.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[1] <= Queue_1.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[2] <= Queue_2.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[3] <= Queue_3.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[4] <= Queue_4.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[5] <= Queue_5.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[6] <= Queue_6.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[7] <= Queue_7.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[8] <= Queue_8.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[9] <= Queue_9.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[10] <= Queue_10.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[11] <= Queue_11.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[12] <= Queue_12.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[13] <= Queue_13.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[14] <= Queue_14.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[15] <= Queue_15.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[16] <= Queue_16.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[17] <= Queue_17.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[18] <= Queue_18.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[19] <= Queue_19.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[20] <= Queue_20.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[21] <= Queue_21.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[22] <= Queue_22.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[23] <= Queue_23.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[24] <= Queue_24.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[25] <= Queue_25.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[26] <= Queue_26.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[27] <= Queue_27.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[28] <= Queue_28.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[29] <= Queue_29.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[30] <= Queue_30.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[31] <= Queue_31.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[32] <= Queue_32.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[33] <= Queue_33.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[34] <= Queue_34.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[35] <= Queue_35.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[36] <= Queue_36.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[37] <= Queue_37.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[38] <= Queue_38.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[39] <= Queue_39.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[40] <= Queue_40.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[41] <= Queue_41.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[42] <= Queue_42.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[43] <= Queue_43.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[44] <= Queue_44.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[45] <= Queue_45.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[46] <= Queue_46.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[47] <= Queue_47.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[48] <= Queue_48.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[49] <= Queue_49.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[50] <= Queue_50.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[51] <= Queue_51.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[52] <= Queue_52.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[53] <= Queue_53.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[54] <= Queue_54.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[55] <= Queue_55.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[56] <= Queue_56.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[57] <= Queue_57.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[58] <= Queue_58.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[59] <= Queue_59.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[60] <= Queue_60.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[61] <= Queue_61.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[62] <= Queue_62.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[63] <= Queue_63.io.deq.valid @[UserYanker.scala 64:28]
    wire _r_bits_WIRE : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}[64] @[UserYanker.scala 65:27]
    _r_bits_WIRE is invalid @[UserYanker.scala 65:27]
    _r_bits_WIRE[0] <- Queue.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[1] <- Queue_1.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[2] <- Queue_2.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[3] <- Queue_3.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[4] <- Queue_4.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[5] <- Queue_5.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[6] <- Queue_6.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[7] <- Queue_7.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[8] <- Queue_8.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[9] <- Queue_9.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[10] <- Queue_10.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[11] <- Queue_11.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[12] <- Queue_12.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[13] <- Queue_13.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[14] <- Queue_14.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[15] <- Queue_15.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[16] <- Queue_16.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[17] <- Queue_17.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[18] <- Queue_18.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[19] <- Queue_19.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[20] <- Queue_20.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[21] <- Queue_21.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[22] <- Queue_22.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[23] <- Queue_23.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[24] <- Queue_24.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[25] <- Queue_25.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[26] <- Queue_26.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[27] <- Queue_27.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[28] <- Queue_28.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[29] <- Queue_29.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[30] <- Queue_30.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[31] <- Queue_31.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[32] <- Queue_32.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[33] <- Queue_33.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[34] <- Queue_34.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[35] <- Queue_35.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[36] <- Queue_36.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[37] <- Queue_37.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[38] <- Queue_38.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[39] <- Queue_39.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[40] <- Queue_40.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[41] <- Queue_41.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[42] <- Queue_42.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[43] <- Queue_43.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[44] <- Queue_44.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[45] <- Queue_45.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[46] <- Queue_46.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[47] <- Queue_47.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[48] <- Queue_48.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[49] <- Queue_49.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[50] <- Queue_50.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[51] <- Queue_51.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[52] <- Queue_52.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[53] <- Queue_53.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[54] <- Queue_54.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[55] <- Queue_55.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[56] <- Queue_56.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[57] <- Queue_57.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[58] <- Queue_58.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[59] <- Queue_59.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[60] <- Queue_60.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[61] <- Queue_61.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[62] <- Queue_62.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[63] <- Queue_63.io.deq.bits @[UserYanker.scala 65:27]
    node _T = eq(x1.r.valid, UInt<1>("h0")) @[UserYanker.scala 66:15]
    node _T_1 = or(_T, _r_valid_WIRE[x1.r.bits.id]) @[UserYanker.scala 66:28]
    node _T_2 = asUInt(reset) @[UserYanker.scala 66:14]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[UserYanker.scala 66:14]
    when _T_3 : @[UserYanker.scala 66:14]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[UserYanker.scala 66:14]
      when _T_4 : @[UserYanker.scala 66:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UserYanker.scala:66 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n") : printf @[UserYanker.scala 66:14]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[UserYanker.scala 66:14]
    bundleIn_0.r.bits.last <= x1.r.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.r.bits.echo.tl_state.size <= UInt<1>("h0") @[ToAXI4.scala 23:14]
    bundleIn_0.r.bits.echo.tl_state.source <= UInt<1>("h0") @[ToAXI4.scala 24:14]
    bundleIn_0.r.bits.resp <= x1.r.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= x1.r.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= x1.r.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= x1.r.valid @[BundleMap.scala 247:19]
    x1.r.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.extra_id <= _r_bits_WIRE[x1.r.bits.id].extra_id @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.tl_state.source <= _r_bits_WIRE[x1.r.bits.id].tl_state.source @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.tl_state.size <= _r_bits_WIRE[x1.r.bits.id].tl_state.size @[BundleMap.scala 247:19]
    node arsel_shiftAmount = bits(bundleIn_0.ar.bits.id, 5, 0) @[OneHot.scala 63:49]
    node _arsel_T = dshl(UInt<1>("h1"), arsel_shiftAmount) @[OneHot.scala 64:12]
    node _arsel_T_1 = bits(_arsel_T, 63, 0) @[OneHot.scala 64:27]
    node arsel_0 = bits(_arsel_T_1, 0, 0) @[UserYanker.scala 70:55]
    node arsel_1 = bits(_arsel_T_1, 1, 1) @[UserYanker.scala 70:55]
    node arsel_2 = bits(_arsel_T_1, 2, 2) @[UserYanker.scala 70:55]
    node arsel_3 = bits(_arsel_T_1, 3, 3) @[UserYanker.scala 70:55]
    node arsel_4 = bits(_arsel_T_1, 4, 4) @[UserYanker.scala 70:55]
    node arsel_5 = bits(_arsel_T_1, 5, 5) @[UserYanker.scala 70:55]
    node arsel_6 = bits(_arsel_T_1, 6, 6) @[UserYanker.scala 70:55]
    node arsel_7 = bits(_arsel_T_1, 7, 7) @[UserYanker.scala 70:55]
    node arsel_8 = bits(_arsel_T_1, 8, 8) @[UserYanker.scala 70:55]
    node arsel_9 = bits(_arsel_T_1, 9, 9) @[UserYanker.scala 70:55]
    node arsel_10 = bits(_arsel_T_1, 10, 10) @[UserYanker.scala 70:55]
    node arsel_11 = bits(_arsel_T_1, 11, 11) @[UserYanker.scala 70:55]
    node arsel_12 = bits(_arsel_T_1, 12, 12) @[UserYanker.scala 70:55]
    node arsel_13 = bits(_arsel_T_1, 13, 13) @[UserYanker.scala 70:55]
    node arsel_14 = bits(_arsel_T_1, 14, 14) @[UserYanker.scala 70:55]
    node arsel_15 = bits(_arsel_T_1, 15, 15) @[UserYanker.scala 70:55]
    node arsel_16 = bits(_arsel_T_1, 16, 16) @[UserYanker.scala 70:55]
    node arsel_17 = bits(_arsel_T_1, 17, 17) @[UserYanker.scala 70:55]
    node arsel_18 = bits(_arsel_T_1, 18, 18) @[UserYanker.scala 70:55]
    node arsel_19 = bits(_arsel_T_1, 19, 19) @[UserYanker.scala 70:55]
    node arsel_20 = bits(_arsel_T_1, 20, 20) @[UserYanker.scala 70:55]
    node arsel_21 = bits(_arsel_T_1, 21, 21) @[UserYanker.scala 70:55]
    node arsel_22 = bits(_arsel_T_1, 22, 22) @[UserYanker.scala 70:55]
    node arsel_23 = bits(_arsel_T_1, 23, 23) @[UserYanker.scala 70:55]
    node arsel_24 = bits(_arsel_T_1, 24, 24) @[UserYanker.scala 70:55]
    node arsel_25 = bits(_arsel_T_1, 25, 25) @[UserYanker.scala 70:55]
    node arsel_26 = bits(_arsel_T_1, 26, 26) @[UserYanker.scala 70:55]
    node arsel_27 = bits(_arsel_T_1, 27, 27) @[UserYanker.scala 70:55]
    node arsel_28 = bits(_arsel_T_1, 28, 28) @[UserYanker.scala 70:55]
    node arsel_29 = bits(_arsel_T_1, 29, 29) @[UserYanker.scala 70:55]
    node arsel_30 = bits(_arsel_T_1, 30, 30) @[UserYanker.scala 70:55]
    node arsel_31 = bits(_arsel_T_1, 31, 31) @[UserYanker.scala 70:55]
    node arsel_32 = bits(_arsel_T_1, 32, 32) @[UserYanker.scala 70:55]
    node arsel_33 = bits(_arsel_T_1, 33, 33) @[UserYanker.scala 70:55]
    node arsel_34 = bits(_arsel_T_1, 34, 34) @[UserYanker.scala 70:55]
    node arsel_35 = bits(_arsel_T_1, 35, 35) @[UserYanker.scala 70:55]
    node arsel_36 = bits(_arsel_T_1, 36, 36) @[UserYanker.scala 70:55]
    node arsel_37 = bits(_arsel_T_1, 37, 37) @[UserYanker.scala 70:55]
    node arsel_38 = bits(_arsel_T_1, 38, 38) @[UserYanker.scala 70:55]
    node arsel_39 = bits(_arsel_T_1, 39, 39) @[UserYanker.scala 70:55]
    node arsel_40 = bits(_arsel_T_1, 40, 40) @[UserYanker.scala 70:55]
    node arsel_41 = bits(_arsel_T_1, 41, 41) @[UserYanker.scala 70:55]
    node arsel_42 = bits(_arsel_T_1, 42, 42) @[UserYanker.scala 70:55]
    node arsel_43 = bits(_arsel_T_1, 43, 43) @[UserYanker.scala 70:55]
    node arsel_44 = bits(_arsel_T_1, 44, 44) @[UserYanker.scala 70:55]
    node arsel_45 = bits(_arsel_T_1, 45, 45) @[UserYanker.scala 70:55]
    node arsel_46 = bits(_arsel_T_1, 46, 46) @[UserYanker.scala 70:55]
    node arsel_47 = bits(_arsel_T_1, 47, 47) @[UserYanker.scala 70:55]
    node arsel_48 = bits(_arsel_T_1, 48, 48) @[UserYanker.scala 70:55]
    node arsel_49 = bits(_arsel_T_1, 49, 49) @[UserYanker.scala 70:55]
    node arsel_50 = bits(_arsel_T_1, 50, 50) @[UserYanker.scala 70:55]
    node arsel_51 = bits(_arsel_T_1, 51, 51) @[UserYanker.scala 70:55]
    node arsel_52 = bits(_arsel_T_1, 52, 52) @[UserYanker.scala 70:55]
    node arsel_53 = bits(_arsel_T_1, 53, 53) @[UserYanker.scala 70:55]
    node arsel_54 = bits(_arsel_T_1, 54, 54) @[UserYanker.scala 70:55]
    node arsel_55 = bits(_arsel_T_1, 55, 55) @[UserYanker.scala 70:55]
    node arsel_56 = bits(_arsel_T_1, 56, 56) @[UserYanker.scala 70:55]
    node arsel_57 = bits(_arsel_T_1, 57, 57) @[UserYanker.scala 70:55]
    node arsel_58 = bits(_arsel_T_1, 58, 58) @[UserYanker.scala 70:55]
    node arsel_59 = bits(_arsel_T_1, 59, 59) @[UserYanker.scala 70:55]
    node arsel_60 = bits(_arsel_T_1, 60, 60) @[UserYanker.scala 70:55]
    node arsel_61 = bits(_arsel_T_1, 61, 61) @[UserYanker.scala 70:55]
    node arsel_62 = bits(_arsel_T_1, 62, 62) @[UserYanker.scala 70:55]
    node arsel_63 = bits(_arsel_T_1, 63, 63) @[UserYanker.scala 70:55]
    node rsel_shiftAmount = bits(x1.r.bits.id, 5, 0) @[OneHot.scala 63:49]
    node _rsel_T = dshl(UInt<1>("h1"), rsel_shiftAmount) @[OneHot.scala 64:12]
    node _rsel_T_1 = bits(_rsel_T, 63, 0) @[OneHot.scala 64:27]
    node rsel_0 = bits(_rsel_T_1, 0, 0) @[UserYanker.scala 71:55]
    node rsel_1 = bits(_rsel_T_1, 1, 1) @[UserYanker.scala 71:55]
    node rsel_2 = bits(_rsel_T_1, 2, 2) @[UserYanker.scala 71:55]
    node rsel_3 = bits(_rsel_T_1, 3, 3) @[UserYanker.scala 71:55]
    node rsel_4 = bits(_rsel_T_1, 4, 4) @[UserYanker.scala 71:55]
    node rsel_5 = bits(_rsel_T_1, 5, 5) @[UserYanker.scala 71:55]
    node rsel_6 = bits(_rsel_T_1, 6, 6) @[UserYanker.scala 71:55]
    node rsel_7 = bits(_rsel_T_1, 7, 7) @[UserYanker.scala 71:55]
    node rsel_8 = bits(_rsel_T_1, 8, 8) @[UserYanker.scala 71:55]
    node rsel_9 = bits(_rsel_T_1, 9, 9) @[UserYanker.scala 71:55]
    node rsel_10 = bits(_rsel_T_1, 10, 10) @[UserYanker.scala 71:55]
    node rsel_11 = bits(_rsel_T_1, 11, 11) @[UserYanker.scala 71:55]
    node rsel_12 = bits(_rsel_T_1, 12, 12) @[UserYanker.scala 71:55]
    node rsel_13 = bits(_rsel_T_1, 13, 13) @[UserYanker.scala 71:55]
    node rsel_14 = bits(_rsel_T_1, 14, 14) @[UserYanker.scala 71:55]
    node rsel_15 = bits(_rsel_T_1, 15, 15) @[UserYanker.scala 71:55]
    node rsel_16 = bits(_rsel_T_1, 16, 16) @[UserYanker.scala 71:55]
    node rsel_17 = bits(_rsel_T_1, 17, 17) @[UserYanker.scala 71:55]
    node rsel_18 = bits(_rsel_T_1, 18, 18) @[UserYanker.scala 71:55]
    node rsel_19 = bits(_rsel_T_1, 19, 19) @[UserYanker.scala 71:55]
    node rsel_20 = bits(_rsel_T_1, 20, 20) @[UserYanker.scala 71:55]
    node rsel_21 = bits(_rsel_T_1, 21, 21) @[UserYanker.scala 71:55]
    node rsel_22 = bits(_rsel_T_1, 22, 22) @[UserYanker.scala 71:55]
    node rsel_23 = bits(_rsel_T_1, 23, 23) @[UserYanker.scala 71:55]
    node rsel_24 = bits(_rsel_T_1, 24, 24) @[UserYanker.scala 71:55]
    node rsel_25 = bits(_rsel_T_1, 25, 25) @[UserYanker.scala 71:55]
    node rsel_26 = bits(_rsel_T_1, 26, 26) @[UserYanker.scala 71:55]
    node rsel_27 = bits(_rsel_T_1, 27, 27) @[UserYanker.scala 71:55]
    node rsel_28 = bits(_rsel_T_1, 28, 28) @[UserYanker.scala 71:55]
    node rsel_29 = bits(_rsel_T_1, 29, 29) @[UserYanker.scala 71:55]
    node rsel_30 = bits(_rsel_T_1, 30, 30) @[UserYanker.scala 71:55]
    node rsel_31 = bits(_rsel_T_1, 31, 31) @[UserYanker.scala 71:55]
    node rsel_32 = bits(_rsel_T_1, 32, 32) @[UserYanker.scala 71:55]
    node rsel_33 = bits(_rsel_T_1, 33, 33) @[UserYanker.scala 71:55]
    node rsel_34 = bits(_rsel_T_1, 34, 34) @[UserYanker.scala 71:55]
    node rsel_35 = bits(_rsel_T_1, 35, 35) @[UserYanker.scala 71:55]
    node rsel_36 = bits(_rsel_T_1, 36, 36) @[UserYanker.scala 71:55]
    node rsel_37 = bits(_rsel_T_1, 37, 37) @[UserYanker.scala 71:55]
    node rsel_38 = bits(_rsel_T_1, 38, 38) @[UserYanker.scala 71:55]
    node rsel_39 = bits(_rsel_T_1, 39, 39) @[UserYanker.scala 71:55]
    node rsel_40 = bits(_rsel_T_1, 40, 40) @[UserYanker.scala 71:55]
    node rsel_41 = bits(_rsel_T_1, 41, 41) @[UserYanker.scala 71:55]
    node rsel_42 = bits(_rsel_T_1, 42, 42) @[UserYanker.scala 71:55]
    node rsel_43 = bits(_rsel_T_1, 43, 43) @[UserYanker.scala 71:55]
    node rsel_44 = bits(_rsel_T_1, 44, 44) @[UserYanker.scala 71:55]
    node rsel_45 = bits(_rsel_T_1, 45, 45) @[UserYanker.scala 71:55]
    node rsel_46 = bits(_rsel_T_1, 46, 46) @[UserYanker.scala 71:55]
    node rsel_47 = bits(_rsel_T_1, 47, 47) @[UserYanker.scala 71:55]
    node rsel_48 = bits(_rsel_T_1, 48, 48) @[UserYanker.scala 71:55]
    node rsel_49 = bits(_rsel_T_1, 49, 49) @[UserYanker.scala 71:55]
    node rsel_50 = bits(_rsel_T_1, 50, 50) @[UserYanker.scala 71:55]
    node rsel_51 = bits(_rsel_T_1, 51, 51) @[UserYanker.scala 71:55]
    node rsel_52 = bits(_rsel_T_1, 52, 52) @[UserYanker.scala 71:55]
    node rsel_53 = bits(_rsel_T_1, 53, 53) @[UserYanker.scala 71:55]
    node rsel_54 = bits(_rsel_T_1, 54, 54) @[UserYanker.scala 71:55]
    node rsel_55 = bits(_rsel_T_1, 55, 55) @[UserYanker.scala 71:55]
    node rsel_56 = bits(_rsel_T_1, 56, 56) @[UserYanker.scala 71:55]
    node rsel_57 = bits(_rsel_T_1, 57, 57) @[UserYanker.scala 71:55]
    node rsel_58 = bits(_rsel_T_1, 58, 58) @[UserYanker.scala 71:55]
    node rsel_59 = bits(_rsel_T_1, 59, 59) @[UserYanker.scala 71:55]
    node rsel_60 = bits(_rsel_T_1, 60, 60) @[UserYanker.scala 71:55]
    node rsel_61 = bits(_rsel_T_1, 61, 61) @[UserYanker.scala 71:55]
    node rsel_62 = bits(_rsel_T_1, 62, 62) @[UserYanker.scala 71:55]
    node rsel_63 = bits(_rsel_T_1, 63, 63) @[UserYanker.scala 71:55]
    node _T_5 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_6 = and(_T_5, rsel_0) @[UserYanker.scala 73:53]
    node _T_7 = and(_T_6, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue.io.deq.ready <= _T_7 @[UserYanker.scala 73:21]
    node _T_8 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_9 = and(_T_8, arsel_0) @[UserYanker.scala 74:53]
    Queue.io.enq.valid <= _T_9 @[UserYanker.scala 74:21]
    Queue.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_10 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_11 = and(_T_10, rsel_1) @[UserYanker.scala 73:53]
    node _T_12 = and(_T_11, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_1.io.deq.ready <= _T_12 @[UserYanker.scala 73:21]
    node _T_13 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_14 = and(_T_13, arsel_1) @[UserYanker.scala 74:53]
    Queue_1.io.enq.valid <= _T_14 @[UserYanker.scala 74:21]
    Queue_1.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_1.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_1.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_15 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_16 = and(_T_15, rsel_2) @[UserYanker.scala 73:53]
    node _T_17 = and(_T_16, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_2.io.deq.ready <= _T_17 @[UserYanker.scala 73:21]
    node _T_18 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_19 = and(_T_18, arsel_2) @[UserYanker.scala 74:53]
    Queue_2.io.enq.valid <= _T_19 @[UserYanker.scala 74:21]
    Queue_2.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_2.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_2.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_20 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_21 = and(_T_20, rsel_3) @[UserYanker.scala 73:53]
    node _T_22 = and(_T_21, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_3.io.deq.ready <= _T_22 @[UserYanker.scala 73:21]
    node _T_23 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_24 = and(_T_23, arsel_3) @[UserYanker.scala 74:53]
    Queue_3.io.enq.valid <= _T_24 @[UserYanker.scala 74:21]
    Queue_3.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_3.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_3.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_25 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_26 = and(_T_25, rsel_4) @[UserYanker.scala 73:53]
    node _T_27 = and(_T_26, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_4.io.deq.ready <= _T_27 @[UserYanker.scala 73:21]
    node _T_28 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_29 = and(_T_28, arsel_4) @[UserYanker.scala 74:53]
    Queue_4.io.enq.valid <= _T_29 @[UserYanker.scala 74:21]
    Queue_4.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_4.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_4.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_30 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_31 = and(_T_30, rsel_5) @[UserYanker.scala 73:53]
    node _T_32 = and(_T_31, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_5.io.deq.ready <= _T_32 @[UserYanker.scala 73:21]
    node _T_33 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_34 = and(_T_33, arsel_5) @[UserYanker.scala 74:53]
    Queue_5.io.enq.valid <= _T_34 @[UserYanker.scala 74:21]
    Queue_5.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_5.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_5.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_35 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_36 = and(_T_35, rsel_6) @[UserYanker.scala 73:53]
    node _T_37 = and(_T_36, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_6.io.deq.ready <= _T_37 @[UserYanker.scala 73:21]
    node _T_38 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_39 = and(_T_38, arsel_6) @[UserYanker.scala 74:53]
    Queue_6.io.enq.valid <= _T_39 @[UserYanker.scala 74:21]
    Queue_6.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_6.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_6.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_40 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_41 = and(_T_40, rsel_7) @[UserYanker.scala 73:53]
    node _T_42 = and(_T_41, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_7.io.deq.ready <= _T_42 @[UserYanker.scala 73:21]
    node _T_43 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_44 = and(_T_43, arsel_7) @[UserYanker.scala 74:53]
    Queue_7.io.enq.valid <= _T_44 @[UserYanker.scala 74:21]
    Queue_7.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_7.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_7.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_45 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_46 = and(_T_45, rsel_8) @[UserYanker.scala 73:53]
    node _T_47 = and(_T_46, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_8.io.deq.ready <= _T_47 @[UserYanker.scala 73:21]
    node _T_48 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_49 = and(_T_48, arsel_8) @[UserYanker.scala 74:53]
    Queue_8.io.enq.valid <= _T_49 @[UserYanker.scala 74:21]
    Queue_8.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_8.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_8.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_50 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_51 = and(_T_50, rsel_9) @[UserYanker.scala 73:53]
    node _T_52 = and(_T_51, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_9.io.deq.ready <= _T_52 @[UserYanker.scala 73:21]
    node _T_53 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_54 = and(_T_53, arsel_9) @[UserYanker.scala 74:53]
    Queue_9.io.enq.valid <= _T_54 @[UserYanker.scala 74:21]
    Queue_9.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_9.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_9.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_55 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_56 = and(_T_55, rsel_10) @[UserYanker.scala 73:53]
    node _T_57 = and(_T_56, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_10.io.deq.ready <= _T_57 @[UserYanker.scala 73:21]
    node _T_58 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_59 = and(_T_58, arsel_10) @[UserYanker.scala 74:53]
    Queue_10.io.enq.valid <= _T_59 @[UserYanker.scala 74:21]
    Queue_10.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_10.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_10.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_60 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_61 = and(_T_60, rsel_11) @[UserYanker.scala 73:53]
    node _T_62 = and(_T_61, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_11.io.deq.ready <= _T_62 @[UserYanker.scala 73:21]
    node _T_63 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_64 = and(_T_63, arsel_11) @[UserYanker.scala 74:53]
    Queue_11.io.enq.valid <= _T_64 @[UserYanker.scala 74:21]
    Queue_11.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_11.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_11.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_65 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_66 = and(_T_65, rsel_12) @[UserYanker.scala 73:53]
    node _T_67 = and(_T_66, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_12.io.deq.ready <= _T_67 @[UserYanker.scala 73:21]
    node _T_68 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_69 = and(_T_68, arsel_12) @[UserYanker.scala 74:53]
    Queue_12.io.enq.valid <= _T_69 @[UserYanker.scala 74:21]
    Queue_12.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_12.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_12.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_70 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_71 = and(_T_70, rsel_13) @[UserYanker.scala 73:53]
    node _T_72 = and(_T_71, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_13.io.deq.ready <= _T_72 @[UserYanker.scala 73:21]
    node _T_73 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_74 = and(_T_73, arsel_13) @[UserYanker.scala 74:53]
    Queue_13.io.enq.valid <= _T_74 @[UserYanker.scala 74:21]
    Queue_13.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_13.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_13.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_75 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_76 = and(_T_75, rsel_14) @[UserYanker.scala 73:53]
    node _T_77 = and(_T_76, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_14.io.deq.ready <= _T_77 @[UserYanker.scala 73:21]
    node _T_78 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_79 = and(_T_78, arsel_14) @[UserYanker.scala 74:53]
    Queue_14.io.enq.valid <= _T_79 @[UserYanker.scala 74:21]
    Queue_14.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_14.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_14.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_80 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_81 = and(_T_80, rsel_15) @[UserYanker.scala 73:53]
    node _T_82 = and(_T_81, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_15.io.deq.ready <= _T_82 @[UserYanker.scala 73:21]
    node _T_83 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_84 = and(_T_83, arsel_15) @[UserYanker.scala 74:53]
    Queue_15.io.enq.valid <= _T_84 @[UserYanker.scala 74:21]
    Queue_15.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_15.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_15.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_85 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_86 = and(_T_85, rsel_16) @[UserYanker.scala 73:53]
    node _T_87 = and(_T_86, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_16.io.deq.ready <= _T_87 @[UserYanker.scala 73:21]
    node _T_88 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_89 = and(_T_88, arsel_16) @[UserYanker.scala 74:53]
    Queue_16.io.enq.valid <= _T_89 @[UserYanker.scala 74:21]
    Queue_16.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_16.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_16.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_90 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_91 = and(_T_90, rsel_17) @[UserYanker.scala 73:53]
    node _T_92 = and(_T_91, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_17.io.deq.ready <= _T_92 @[UserYanker.scala 73:21]
    node _T_93 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_94 = and(_T_93, arsel_17) @[UserYanker.scala 74:53]
    Queue_17.io.enq.valid <= _T_94 @[UserYanker.scala 74:21]
    Queue_17.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_17.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_17.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_95 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_96 = and(_T_95, rsel_18) @[UserYanker.scala 73:53]
    node _T_97 = and(_T_96, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_18.io.deq.ready <= _T_97 @[UserYanker.scala 73:21]
    node _T_98 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_99 = and(_T_98, arsel_18) @[UserYanker.scala 74:53]
    Queue_18.io.enq.valid <= _T_99 @[UserYanker.scala 74:21]
    Queue_18.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_18.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_18.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_100 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_101 = and(_T_100, rsel_19) @[UserYanker.scala 73:53]
    node _T_102 = and(_T_101, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_19.io.deq.ready <= _T_102 @[UserYanker.scala 73:21]
    node _T_103 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_104 = and(_T_103, arsel_19) @[UserYanker.scala 74:53]
    Queue_19.io.enq.valid <= _T_104 @[UserYanker.scala 74:21]
    Queue_19.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_19.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_19.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_105 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_106 = and(_T_105, rsel_20) @[UserYanker.scala 73:53]
    node _T_107 = and(_T_106, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_20.io.deq.ready <= _T_107 @[UserYanker.scala 73:21]
    node _T_108 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_109 = and(_T_108, arsel_20) @[UserYanker.scala 74:53]
    Queue_20.io.enq.valid <= _T_109 @[UserYanker.scala 74:21]
    Queue_20.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_20.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_20.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_110 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_111 = and(_T_110, rsel_21) @[UserYanker.scala 73:53]
    node _T_112 = and(_T_111, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_21.io.deq.ready <= _T_112 @[UserYanker.scala 73:21]
    node _T_113 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_114 = and(_T_113, arsel_21) @[UserYanker.scala 74:53]
    Queue_21.io.enq.valid <= _T_114 @[UserYanker.scala 74:21]
    Queue_21.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_21.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_21.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_115 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_116 = and(_T_115, rsel_22) @[UserYanker.scala 73:53]
    node _T_117 = and(_T_116, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_22.io.deq.ready <= _T_117 @[UserYanker.scala 73:21]
    node _T_118 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_119 = and(_T_118, arsel_22) @[UserYanker.scala 74:53]
    Queue_22.io.enq.valid <= _T_119 @[UserYanker.scala 74:21]
    Queue_22.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_22.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_22.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_120 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_121 = and(_T_120, rsel_23) @[UserYanker.scala 73:53]
    node _T_122 = and(_T_121, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_23.io.deq.ready <= _T_122 @[UserYanker.scala 73:21]
    node _T_123 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_124 = and(_T_123, arsel_23) @[UserYanker.scala 74:53]
    Queue_23.io.enq.valid <= _T_124 @[UserYanker.scala 74:21]
    Queue_23.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_23.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_23.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_125 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_126 = and(_T_125, rsel_24) @[UserYanker.scala 73:53]
    node _T_127 = and(_T_126, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_24.io.deq.ready <= _T_127 @[UserYanker.scala 73:21]
    node _T_128 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_129 = and(_T_128, arsel_24) @[UserYanker.scala 74:53]
    Queue_24.io.enq.valid <= _T_129 @[UserYanker.scala 74:21]
    Queue_24.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_24.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_24.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_130 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_131 = and(_T_130, rsel_25) @[UserYanker.scala 73:53]
    node _T_132 = and(_T_131, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_25.io.deq.ready <= _T_132 @[UserYanker.scala 73:21]
    node _T_133 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_134 = and(_T_133, arsel_25) @[UserYanker.scala 74:53]
    Queue_25.io.enq.valid <= _T_134 @[UserYanker.scala 74:21]
    Queue_25.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_25.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_25.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_135 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_136 = and(_T_135, rsel_26) @[UserYanker.scala 73:53]
    node _T_137 = and(_T_136, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_26.io.deq.ready <= _T_137 @[UserYanker.scala 73:21]
    node _T_138 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_139 = and(_T_138, arsel_26) @[UserYanker.scala 74:53]
    Queue_26.io.enq.valid <= _T_139 @[UserYanker.scala 74:21]
    Queue_26.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_26.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_26.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_140 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_141 = and(_T_140, rsel_27) @[UserYanker.scala 73:53]
    node _T_142 = and(_T_141, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_27.io.deq.ready <= _T_142 @[UserYanker.scala 73:21]
    node _T_143 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_144 = and(_T_143, arsel_27) @[UserYanker.scala 74:53]
    Queue_27.io.enq.valid <= _T_144 @[UserYanker.scala 74:21]
    Queue_27.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_27.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_27.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_145 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_146 = and(_T_145, rsel_28) @[UserYanker.scala 73:53]
    node _T_147 = and(_T_146, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_28.io.deq.ready <= _T_147 @[UserYanker.scala 73:21]
    node _T_148 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_149 = and(_T_148, arsel_28) @[UserYanker.scala 74:53]
    Queue_28.io.enq.valid <= _T_149 @[UserYanker.scala 74:21]
    Queue_28.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_28.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_28.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_150 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_151 = and(_T_150, rsel_29) @[UserYanker.scala 73:53]
    node _T_152 = and(_T_151, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_29.io.deq.ready <= _T_152 @[UserYanker.scala 73:21]
    node _T_153 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_154 = and(_T_153, arsel_29) @[UserYanker.scala 74:53]
    Queue_29.io.enq.valid <= _T_154 @[UserYanker.scala 74:21]
    Queue_29.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_29.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_29.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_155 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_156 = and(_T_155, rsel_30) @[UserYanker.scala 73:53]
    node _T_157 = and(_T_156, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_30.io.deq.ready <= _T_157 @[UserYanker.scala 73:21]
    node _T_158 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_159 = and(_T_158, arsel_30) @[UserYanker.scala 74:53]
    Queue_30.io.enq.valid <= _T_159 @[UserYanker.scala 74:21]
    Queue_30.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_30.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_30.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_160 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_161 = and(_T_160, rsel_31) @[UserYanker.scala 73:53]
    node _T_162 = and(_T_161, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_31.io.deq.ready <= _T_162 @[UserYanker.scala 73:21]
    node _T_163 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_164 = and(_T_163, arsel_31) @[UserYanker.scala 74:53]
    Queue_31.io.enq.valid <= _T_164 @[UserYanker.scala 74:21]
    Queue_31.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_31.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_31.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_165 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_166 = and(_T_165, rsel_32) @[UserYanker.scala 73:53]
    node _T_167 = and(_T_166, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_32.io.deq.ready <= _T_167 @[UserYanker.scala 73:21]
    node _T_168 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_169 = and(_T_168, arsel_32) @[UserYanker.scala 74:53]
    Queue_32.io.enq.valid <= _T_169 @[UserYanker.scala 74:21]
    Queue_32.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_32.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_32.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_170 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_171 = and(_T_170, rsel_33) @[UserYanker.scala 73:53]
    node _T_172 = and(_T_171, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_33.io.deq.ready <= _T_172 @[UserYanker.scala 73:21]
    node _T_173 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_174 = and(_T_173, arsel_33) @[UserYanker.scala 74:53]
    Queue_33.io.enq.valid <= _T_174 @[UserYanker.scala 74:21]
    Queue_33.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_33.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_33.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_175 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_176 = and(_T_175, rsel_34) @[UserYanker.scala 73:53]
    node _T_177 = and(_T_176, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_34.io.deq.ready <= _T_177 @[UserYanker.scala 73:21]
    node _T_178 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_179 = and(_T_178, arsel_34) @[UserYanker.scala 74:53]
    Queue_34.io.enq.valid <= _T_179 @[UserYanker.scala 74:21]
    Queue_34.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_34.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_34.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_180 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_181 = and(_T_180, rsel_35) @[UserYanker.scala 73:53]
    node _T_182 = and(_T_181, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_35.io.deq.ready <= _T_182 @[UserYanker.scala 73:21]
    node _T_183 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_184 = and(_T_183, arsel_35) @[UserYanker.scala 74:53]
    Queue_35.io.enq.valid <= _T_184 @[UserYanker.scala 74:21]
    Queue_35.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_35.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_35.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_185 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_186 = and(_T_185, rsel_36) @[UserYanker.scala 73:53]
    node _T_187 = and(_T_186, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_36.io.deq.ready <= _T_187 @[UserYanker.scala 73:21]
    node _T_188 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_189 = and(_T_188, arsel_36) @[UserYanker.scala 74:53]
    Queue_36.io.enq.valid <= _T_189 @[UserYanker.scala 74:21]
    Queue_36.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_36.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_36.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_190 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_191 = and(_T_190, rsel_37) @[UserYanker.scala 73:53]
    node _T_192 = and(_T_191, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_37.io.deq.ready <= _T_192 @[UserYanker.scala 73:21]
    node _T_193 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_194 = and(_T_193, arsel_37) @[UserYanker.scala 74:53]
    Queue_37.io.enq.valid <= _T_194 @[UserYanker.scala 74:21]
    Queue_37.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_37.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_37.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_195 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_196 = and(_T_195, rsel_38) @[UserYanker.scala 73:53]
    node _T_197 = and(_T_196, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_38.io.deq.ready <= _T_197 @[UserYanker.scala 73:21]
    node _T_198 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_199 = and(_T_198, arsel_38) @[UserYanker.scala 74:53]
    Queue_38.io.enq.valid <= _T_199 @[UserYanker.scala 74:21]
    Queue_38.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_38.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_38.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_200 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_201 = and(_T_200, rsel_39) @[UserYanker.scala 73:53]
    node _T_202 = and(_T_201, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_39.io.deq.ready <= _T_202 @[UserYanker.scala 73:21]
    node _T_203 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_204 = and(_T_203, arsel_39) @[UserYanker.scala 74:53]
    Queue_39.io.enq.valid <= _T_204 @[UserYanker.scala 74:21]
    Queue_39.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_39.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_39.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_205 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_206 = and(_T_205, rsel_40) @[UserYanker.scala 73:53]
    node _T_207 = and(_T_206, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_40.io.deq.ready <= _T_207 @[UserYanker.scala 73:21]
    node _T_208 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_209 = and(_T_208, arsel_40) @[UserYanker.scala 74:53]
    Queue_40.io.enq.valid <= _T_209 @[UserYanker.scala 74:21]
    Queue_40.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_40.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_40.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_210 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_211 = and(_T_210, rsel_41) @[UserYanker.scala 73:53]
    node _T_212 = and(_T_211, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_41.io.deq.ready <= _T_212 @[UserYanker.scala 73:21]
    node _T_213 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_214 = and(_T_213, arsel_41) @[UserYanker.scala 74:53]
    Queue_41.io.enq.valid <= _T_214 @[UserYanker.scala 74:21]
    Queue_41.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_41.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_41.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_215 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_216 = and(_T_215, rsel_42) @[UserYanker.scala 73:53]
    node _T_217 = and(_T_216, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_42.io.deq.ready <= _T_217 @[UserYanker.scala 73:21]
    node _T_218 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_219 = and(_T_218, arsel_42) @[UserYanker.scala 74:53]
    Queue_42.io.enq.valid <= _T_219 @[UserYanker.scala 74:21]
    Queue_42.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_42.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_42.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_220 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_221 = and(_T_220, rsel_43) @[UserYanker.scala 73:53]
    node _T_222 = and(_T_221, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_43.io.deq.ready <= _T_222 @[UserYanker.scala 73:21]
    node _T_223 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_224 = and(_T_223, arsel_43) @[UserYanker.scala 74:53]
    Queue_43.io.enq.valid <= _T_224 @[UserYanker.scala 74:21]
    Queue_43.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_43.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_43.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_225 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_226 = and(_T_225, rsel_44) @[UserYanker.scala 73:53]
    node _T_227 = and(_T_226, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_44.io.deq.ready <= _T_227 @[UserYanker.scala 73:21]
    node _T_228 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_229 = and(_T_228, arsel_44) @[UserYanker.scala 74:53]
    Queue_44.io.enq.valid <= _T_229 @[UserYanker.scala 74:21]
    Queue_44.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_44.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_44.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_230 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_231 = and(_T_230, rsel_45) @[UserYanker.scala 73:53]
    node _T_232 = and(_T_231, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_45.io.deq.ready <= _T_232 @[UserYanker.scala 73:21]
    node _T_233 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_234 = and(_T_233, arsel_45) @[UserYanker.scala 74:53]
    Queue_45.io.enq.valid <= _T_234 @[UserYanker.scala 74:21]
    Queue_45.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_45.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_45.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_235 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_236 = and(_T_235, rsel_46) @[UserYanker.scala 73:53]
    node _T_237 = and(_T_236, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_46.io.deq.ready <= _T_237 @[UserYanker.scala 73:21]
    node _T_238 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_239 = and(_T_238, arsel_46) @[UserYanker.scala 74:53]
    Queue_46.io.enq.valid <= _T_239 @[UserYanker.scala 74:21]
    Queue_46.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_46.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_46.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_240 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_241 = and(_T_240, rsel_47) @[UserYanker.scala 73:53]
    node _T_242 = and(_T_241, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_47.io.deq.ready <= _T_242 @[UserYanker.scala 73:21]
    node _T_243 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_244 = and(_T_243, arsel_47) @[UserYanker.scala 74:53]
    Queue_47.io.enq.valid <= _T_244 @[UserYanker.scala 74:21]
    Queue_47.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_47.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_47.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_245 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_246 = and(_T_245, rsel_48) @[UserYanker.scala 73:53]
    node _T_247 = and(_T_246, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_48.io.deq.ready <= _T_247 @[UserYanker.scala 73:21]
    node _T_248 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_249 = and(_T_248, arsel_48) @[UserYanker.scala 74:53]
    Queue_48.io.enq.valid <= _T_249 @[UserYanker.scala 74:21]
    Queue_48.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_48.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_48.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_250 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_251 = and(_T_250, rsel_49) @[UserYanker.scala 73:53]
    node _T_252 = and(_T_251, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_49.io.deq.ready <= _T_252 @[UserYanker.scala 73:21]
    node _T_253 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_254 = and(_T_253, arsel_49) @[UserYanker.scala 74:53]
    Queue_49.io.enq.valid <= _T_254 @[UserYanker.scala 74:21]
    Queue_49.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_49.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_49.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_255 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_256 = and(_T_255, rsel_50) @[UserYanker.scala 73:53]
    node _T_257 = and(_T_256, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_50.io.deq.ready <= _T_257 @[UserYanker.scala 73:21]
    node _T_258 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_259 = and(_T_258, arsel_50) @[UserYanker.scala 74:53]
    Queue_50.io.enq.valid <= _T_259 @[UserYanker.scala 74:21]
    Queue_50.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_50.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_50.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_260 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_261 = and(_T_260, rsel_51) @[UserYanker.scala 73:53]
    node _T_262 = and(_T_261, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_51.io.deq.ready <= _T_262 @[UserYanker.scala 73:21]
    node _T_263 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_264 = and(_T_263, arsel_51) @[UserYanker.scala 74:53]
    Queue_51.io.enq.valid <= _T_264 @[UserYanker.scala 74:21]
    Queue_51.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_51.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_51.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_265 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_266 = and(_T_265, rsel_52) @[UserYanker.scala 73:53]
    node _T_267 = and(_T_266, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_52.io.deq.ready <= _T_267 @[UserYanker.scala 73:21]
    node _T_268 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_269 = and(_T_268, arsel_52) @[UserYanker.scala 74:53]
    Queue_52.io.enq.valid <= _T_269 @[UserYanker.scala 74:21]
    Queue_52.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_52.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_52.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_270 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_271 = and(_T_270, rsel_53) @[UserYanker.scala 73:53]
    node _T_272 = and(_T_271, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_53.io.deq.ready <= _T_272 @[UserYanker.scala 73:21]
    node _T_273 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_274 = and(_T_273, arsel_53) @[UserYanker.scala 74:53]
    Queue_53.io.enq.valid <= _T_274 @[UserYanker.scala 74:21]
    Queue_53.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_53.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_53.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_275 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_276 = and(_T_275, rsel_54) @[UserYanker.scala 73:53]
    node _T_277 = and(_T_276, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_54.io.deq.ready <= _T_277 @[UserYanker.scala 73:21]
    node _T_278 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_279 = and(_T_278, arsel_54) @[UserYanker.scala 74:53]
    Queue_54.io.enq.valid <= _T_279 @[UserYanker.scala 74:21]
    Queue_54.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_54.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_54.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_280 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_281 = and(_T_280, rsel_55) @[UserYanker.scala 73:53]
    node _T_282 = and(_T_281, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_55.io.deq.ready <= _T_282 @[UserYanker.scala 73:21]
    node _T_283 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_284 = and(_T_283, arsel_55) @[UserYanker.scala 74:53]
    Queue_55.io.enq.valid <= _T_284 @[UserYanker.scala 74:21]
    Queue_55.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_55.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_55.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_285 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_286 = and(_T_285, rsel_56) @[UserYanker.scala 73:53]
    node _T_287 = and(_T_286, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_56.io.deq.ready <= _T_287 @[UserYanker.scala 73:21]
    node _T_288 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_289 = and(_T_288, arsel_56) @[UserYanker.scala 74:53]
    Queue_56.io.enq.valid <= _T_289 @[UserYanker.scala 74:21]
    Queue_56.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_56.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_56.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_290 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_291 = and(_T_290, rsel_57) @[UserYanker.scala 73:53]
    node _T_292 = and(_T_291, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_57.io.deq.ready <= _T_292 @[UserYanker.scala 73:21]
    node _T_293 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_294 = and(_T_293, arsel_57) @[UserYanker.scala 74:53]
    Queue_57.io.enq.valid <= _T_294 @[UserYanker.scala 74:21]
    Queue_57.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_57.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_57.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_295 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_296 = and(_T_295, rsel_58) @[UserYanker.scala 73:53]
    node _T_297 = and(_T_296, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_58.io.deq.ready <= _T_297 @[UserYanker.scala 73:21]
    node _T_298 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_299 = and(_T_298, arsel_58) @[UserYanker.scala 74:53]
    Queue_58.io.enq.valid <= _T_299 @[UserYanker.scala 74:21]
    Queue_58.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_58.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_58.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_300 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_301 = and(_T_300, rsel_59) @[UserYanker.scala 73:53]
    node _T_302 = and(_T_301, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_59.io.deq.ready <= _T_302 @[UserYanker.scala 73:21]
    node _T_303 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_304 = and(_T_303, arsel_59) @[UserYanker.scala 74:53]
    Queue_59.io.enq.valid <= _T_304 @[UserYanker.scala 74:21]
    Queue_59.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_59.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_59.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_305 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_306 = and(_T_305, rsel_60) @[UserYanker.scala 73:53]
    node _T_307 = and(_T_306, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_60.io.deq.ready <= _T_307 @[UserYanker.scala 73:21]
    node _T_308 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_309 = and(_T_308, arsel_60) @[UserYanker.scala 74:53]
    Queue_60.io.enq.valid <= _T_309 @[UserYanker.scala 74:21]
    Queue_60.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_60.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_60.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_310 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_311 = and(_T_310, rsel_61) @[UserYanker.scala 73:53]
    node _T_312 = and(_T_311, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_61.io.deq.ready <= _T_312 @[UserYanker.scala 73:21]
    node _T_313 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_314 = and(_T_313, arsel_61) @[UserYanker.scala 74:53]
    Queue_61.io.enq.valid <= _T_314 @[UserYanker.scala 74:21]
    Queue_61.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_61.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_61.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_315 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_316 = and(_T_315, rsel_62) @[UserYanker.scala 73:53]
    node _T_317 = and(_T_316, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_62.io.deq.ready <= _T_317 @[UserYanker.scala 73:21]
    node _T_318 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_319 = and(_T_318, arsel_62) @[UserYanker.scala 74:53]
    Queue_62.io.enq.valid <= _T_319 @[UserYanker.scala 74:21]
    Queue_62.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_62.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_62.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_320 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_321 = and(_T_320, rsel_63) @[UserYanker.scala 73:53]
    node _T_322 = and(_T_321, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_63.io.deq.ready <= _T_322 @[UserYanker.scala 73:21]
    node _T_323 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_324 = and(_T_323, arsel_63) @[UserYanker.scala 74:53]
    Queue_63.io.enq.valid <= _T_324 @[UserYanker.scala 74:21]
    Queue_63.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_63.io.enq.bits.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_63.io.enq.bits.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    wire _aw_ready_WIRE : UInt<1>[64] @[UserYanker.scala 79:29]
    _aw_ready_WIRE is invalid @[UserYanker.scala 79:29]
    _aw_ready_WIRE[0] <= Queue_64.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[1] <= Queue_65.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[2] <= Queue_66.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[3] <= Queue_67.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[4] <= Queue_68.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[5] <= Queue_69.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[6] <= Queue_70.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[7] <= Queue_71.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[8] <= Queue_72.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[9] <= Queue_73.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[10] <= Queue_74.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[11] <= Queue_75.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[12] <= Queue_76.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[13] <= Queue_77.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[14] <= Queue_78.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[15] <= Queue_79.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[16] <= Queue_80.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[17] <= Queue_81.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[18] <= Queue_82.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[19] <= Queue_83.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[20] <= Queue_84.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[21] <= Queue_85.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[22] <= Queue_86.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[23] <= Queue_87.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[24] <= Queue_88.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[25] <= Queue_89.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[26] <= Queue_90.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[27] <= Queue_91.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[28] <= Queue_92.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[29] <= Queue_93.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[30] <= Queue_94.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[31] <= Queue_95.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[32] <= Queue_96.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[33] <= Queue_97.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[34] <= Queue_98.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[35] <= Queue_99.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[36] <= Queue_100.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[37] <= Queue_101.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[38] <= Queue_102.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[39] <= Queue_103.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[40] <= Queue_104.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[41] <= Queue_105.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[42] <= Queue_106.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[43] <= Queue_107.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[44] <= Queue_108.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[45] <= Queue_109.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[46] <= Queue_110.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[47] <= Queue_111.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[48] <= Queue_112.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[49] <= Queue_113.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[50] <= Queue_114.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[51] <= Queue_115.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[52] <= Queue_116.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[53] <= Queue_117.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[54] <= Queue_118.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[55] <= Queue_119.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[56] <= Queue_120.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[57] <= Queue_121.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[58] <= Queue_122.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[59] <= Queue_123.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[60] <= Queue_124.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[61] <= Queue_125.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[62] <= Queue_126.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[63] <= Queue_127.io.enq.ready @[UserYanker.scala 79:29]
    node _bundleIn_0_aw_ready_T = and(x1.aw.ready, _aw_ready_WIRE[bundleIn_0.aw.bits.id]) @[UserYanker.scala 80:36]
    bundleIn_0.aw.ready <= _bundleIn_0_aw_ready_T @[UserYanker.scala 80:20]
    node _x1_aw_valid_T = and(bundleIn_0.aw.valid, _aw_ready_WIRE[bundleIn_0.aw.bits.id]) @[UserYanker.scala 81:36]
    x1.aw.valid <= _x1_aw_valid_T @[UserYanker.scala 81:20]
    x1.aw.bits.qos <= bundleIn_0.aw.bits.qos @[BundleMap.scala 247:19]
    x1.aw.bits.prot <= bundleIn_0.aw.bits.prot @[BundleMap.scala 247:19]
    x1.aw.bits.cache <= bundleIn_0.aw.bits.cache @[BundleMap.scala 247:19]
    x1.aw.bits.lock <= bundleIn_0.aw.bits.lock @[BundleMap.scala 247:19]
    x1.aw.bits.burst <= bundleIn_0.aw.bits.burst @[BundleMap.scala 247:19]
    x1.aw.bits.size <= bundleIn_0.aw.bits.size @[BundleMap.scala 247:19]
    x1.aw.bits.len <= bundleIn_0.aw.bits.len @[BundleMap.scala 247:19]
    x1.aw.bits.addr <= bundleIn_0.aw.bits.addr @[BundleMap.scala 247:19]
    x1.aw.bits.id <= bundleIn_0.aw.bits.id @[BundleMap.scala 247:19]
    wire _b_valid_WIRE : UInt<1>[64] @[UserYanker.scala 85:28]
    _b_valid_WIRE is invalid @[UserYanker.scala 85:28]
    _b_valid_WIRE[0] <= Queue_64.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[1] <= Queue_65.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[2] <= Queue_66.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[3] <= Queue_67.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[4] <= Queue_68.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[5] <= Queue_69.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[6] <= Queue_70.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[7] <= Queue_71.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[8] <= Queue_72.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[9] <= Queue_73.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[10] <= Queue_74.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[11] <= Queue_75.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[12] <= Queue_76.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[13] <= Queue_77.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[14] <= Queue_78.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[15] <= Queue_79.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[16] <= Queue_80.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[17] <= Queue_81.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[18] <= Queue_82.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[19] <= Queue_83.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[20] <= Queue_84.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[21] <= Queue_85.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[22] <= Queue_86.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[23] <= Queue_87.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[24] <= Queue_88.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[25] <= Queue_89.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[26] <= Queue_90.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[27] <= Queue_91.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[28] <= Queue_92.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[29] <= Queue_93.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[30] <= Queue_94.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[31] <= Queue_95.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[32] <= Queue_96.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[33] <= Queue_97.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[34] <= Queue_98.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[35] <= Queue_99.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[36] <= Queue_100.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[37] <= Queue_101.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[38] <= Queue_102.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[39] <= Queue_103.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[40] <= Queue_104.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[41] <= Queue_105.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[42] <= Queue_106.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[43] <= Queue_107.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[44] <= Queue_108.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[45] <= Queue_109.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[46] <= Queue_110.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[47] <= Queue_111.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[48] <= Queue_112.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[49] <= Queue_113.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[50] <= Queue_114.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[51] <= Queue_115.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[52] <= Queue_116.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[53] <= Queue_117.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[54] <= Queue_118.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[55] <= Queue_119.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[56] <= Queue_120.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[57] <= Queue_121.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[58] <= Queue_122.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[59] <= Queue_123.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[60] <= Queue_124.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[61] <= Queue_125.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[62] <= Queue_126.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[63] <= Queue_127.io.deq.valid @[UserYanker.scala 85:28]
    wire _b_bits_WIRE : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}[64] @[UserYanker.scala 86:27]
    _b_bits_WIRE is invalid @[UserYanker.scala 86:27]
    _b_bits_WIRE[0] <- Queue_64.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[1] <- Queue_65.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[2] <- Queue_66.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[3] <- Queue_67.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[4] <- Queue_68.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[5] <- Queue_69.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[6] <- Queue_70.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[7] <- Queue_71.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[8] <- Queue_72.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[9] <- Queue_73.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[10] <- Queue_74.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[11] <- Queue_75.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[12] <- Queue_76.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[13] <- Queue_77.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[14] <- Queue_78.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[15] <- Queue_79.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[16] <- Queue_80.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[17] <- Queue_81.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[18] <- Queue_82.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[19] <- Queue_83.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[20] <- Queue_84.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[21] <- Queue_85.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[22] <- Queue_86.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[23] <- Queue_87.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[24] <- Queue_88.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[25] <- Queue_89.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[26] <- Queue_90.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[27] <- Queue_91.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[28] <- Queue_92.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[29] <- Queue_93.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[30] <- Queue_94.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[31] <- Queue_95.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[32] <- Queue_96.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[33] <- Queue_97.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[34] <- Queue_98.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[35] <- Queue_99.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[36] <- Queue_100.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[37] <- Queue_101.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[38] <- Queue_102.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[39] <- Queue_103.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[40] <- Queue_104.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[41] <- Queue_105.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[42] <- Queue_106.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[43] <- Queue_107.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[44] <- Queue_108.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[45] <- Queue_109.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[46] <- Queue_110.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[47] <- Queue_111.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[48] <- Queue_112.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[49] <- Queue_113.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[50] <- Queue_114.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[51] <- Queue_115.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[52] <- Queue_116.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[53] <- Queue_117.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[54] <- Queue_118.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[55] <- Queue_119.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[56] <- Queue_120.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[57] <- Queue_121.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[58] <- Queue_122.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[59] <- Queue_123.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[60] <- Queue_124.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[61] <- Queue_125.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[62] <- Queue_126.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[63] <- Queue_127.io.deq.bits @[UserYanker.scala 86:27]
    node _T_325 = eq(x1.b.valid, UInt<1>("h0")) @[UserYanker.scala 87:15]
    node _T_326 = or(_T_325, _b_valid_WIRE[x1.b.bits.id]) @[UserYanker.scala 87:28]
    node _T_327 = asUInt(reset) @[UserYanker.scala 87:14]
    node _T_328 = eq(_T_327, UInt<1>("h0")) @[UserYanker.scala 87:14]
    when _T_328 : @[UserYanker.scala 87:14]
      node _T_329 = eq(_T_326, UInt<1>("h0")) @[UserYanker.scala 87:14]
      when _T_329 : @[UserYanker.scala 87:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UserYanker.scala:87 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n") : printf_1 @[UserYanker.scala 87:14]
      assert(clock, _T_326, UInt<1>("h1"), "") : assert_1 @[UserYanker.scala 87:14]
    bundleIn_0.b.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.b.bits.echo.tl_state.size <= UInt<1>("h0") @[ToAXI4.scala 23:14]
    bundleIn_0.b.bits.echo.tl_state.source <= UInt<1>("h0") @[ToAXI4.scala 24:14]
    bundleIn_0.b.bits.resp <= x1.b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= x1.b.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.b.valid <= x1.b.valid @[BundleMap.scala 247:19]
    x1.b.ready <= bundleIn_0.b.ready @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.extra_id <= _b_bits_WIRE[x1.b.bits.id].extra_id @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.tl_state.source <= _b_bits_WIRE[x1.b.bits.id].tl_state.source @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.tl_state.size <= _b_bits_WIRE[x1.b.bits.id].tl_state.size @[BundleMap.scala 247:19]
    node awsel_shiftAmount = bits(bundleIn_0.aw.bits.id, 5, 0) @[OneHot.scala 63:49]
    node _awsel_T = dshl(UInt<1>("h1"), awsel_shiftAmount) @[OneHot.scala 64:12]
    node _awsel_T_1 = bits(_awsel_T, 63, 0) @[OneHot.scala 64:27]
    node awsel_0 = bits(_awsel_T_1, 0, 0) @[UserYanker.scala 91:55]
    node awsel_1 = bits(_awsel_T_1, 1, 1) @[UserYanker.scala 91:55]
    node awsel_2 = bits(_awsel_T_1, 2, 2) @[UserYanker.scala 91:55]
    node awsel_3 = bits(_awsel_T_1, 3, 3) @[UserYanker.scala 91:55]
    node awsel_4 = bits(_awsel_T_1, 4, 4) @[UserYanker.scala 91:55]
    node awsel_5 = bits(_awsel_T_1, 5, 5) @[UserYanker.scala 91:55]
    node awsel_6 = bits(_awsel_T_1, 6, 6) @[UserYanker.scala 91:55]
    node awsel_7 = bits(_awsel_T_1, 7, 7) @[UserYanker.scala 91:55]
    node awsel_8 = bits(_awsel_T_1, 8, 8) @[UserYanker.scala 91:55]
    node awsel_9 = bits(_awsel_T_1, 9, 9) @[UserYanker.scala 91:55]
    node awsel_10 = bits(_awsel_T_1, 10, 10) @[UserYanker.scala 91:55]
    node awsel_11 = bits(_awsel_T_1, 11, 11) @[UserYanker.scala 91:55]
    node awsel_12 = bits(_awsel_T_1, 12, 12) @[UserYanker.scala 91:55]
    node awsel_13 = bits(_awsel_T_1, 13, 13) @[UserYanker.scala 91:55]
    node awsel_14 = bits(_awsel_T_1, 14, 14) @[UserYanker.scala 91:55]
    node awsel_15 = bits(_awsel_T_1, 15, 15) @[UserYanker.scala 91:55]
    node awsel_16 = bits(_awsel_T_1, 16, 16) @[UserYanker.scala 91:55]
    node awsel_17 = bits(_awsel_T_1, 17, 17) @[UserYanker.scala 91:55]
    node awsel_18 = bits(_awsel_T_1, 18, 18) @[UserYanker.scala 91:55]
    node awsel_19 = bits(_awsel_T_1, 19, 19) @[UserYanker.scala 91:55]
    node awsel_20 = bits(_awsel_T_1, 20, 20) @[UserYanker.scala 91:55]
    node awsel_21 = bits(_awsel_T_1, 21, 21) @[UserYanker.scala 91:55]
    node awsel_22 = bits(_awsel_T_1, 22, 22) @[UserYanker.scala 91:55]
    node awsel_23 = bits(_awsel_T_1, 23, 23) @[UserYanker.scala 91:55]
    node awsel_24 = bits(_awsel_T_1, 24, 24) @[UserYanker.scala 91:55]
    node awsel_25 = bits(_awsel_T_1, 25, 25) @[UserYanker.scala 91:55]
    node awsel_26 = bits(_awsel_T_1, 26, 26) @[UserYanker.scala 91:55]
    node awsel_27 = bits(_awsel_T_1, 27, 27) @[UserYanker.scala 91:55]
    node awsel_28 = bits(_awsel_T_1, 28, 28) @[UserYanker.scala 91:55]
    node awsel_29 = bits(_awsel_T_1, 29, 29) @[UserYanker.scala 91:55]
    node awsel_30 = bits(_awsel_T_1, 30, 30) @[UserYanker.scala 91:55]
    node awsel_31 = bits(_awsel_T_1, 31, 31) @[UserYanker.scala 91:55]
    node awsel_32 = bits(_awsel_T_1, 32, 32) @[UserYanker.scala 91:55]
    node awsel_33 = bits(_awsel_T_1, 33, 33) @[UserYanker.scala 91:55]
    node awsel_34 = bits(_awsel_T_1, 34, 34) @[UserYanker.scala 91:55]
    node awsel_35 = bits(_awsel_T_1, 35, 35) @[UserYanker.scala 91:55]
    node awsel_36 = bits(_awsel_T_1, 36, 36) @[UserYanker.scala 91:55]
    node awsel_37 = bits(_awsel_T_1, 37, 37) @[UserYanker.scala 91:55]
    node awsel_38 = bits(_awsel_T_1, 38, 38) @[UserYanker.scala 91:55]
    node awsel_39 = bits(_awsel_T_1, 39, 39) @[UserYanker.scala 91:55]
    node awsel_40 = bits(_awsel_T_1, 40, 40) @[UserYanker.scala 91:55]
    node awsel_41 = bits(_awsel_T_1, 41, 41) @[UserYanker.scala 91:55]
    node awsel_42 = bits(_awsel_T_1, 42, 42) @[UserYanker.scala 91:55]
    node awsel_43 = bits(_awsel_T_1, 43, 43) @[UserYanker.scala 91:55]
    node awsel_44 = bits(_awsel_T_1, 44, 44) @[UserYanker.scala 91:55]
    node awsel_45 = bits(_awsel_T_1, 45, 45) @[UserYanker.scala 91:55]
    node awsel_46 = bits(_awsel_T_1, 46, 46) @[UserYanker.scala 91:55]
    node awsel_47 = bits(_awsel_T_1, 47, 47) @[UserYanker.scala 91:55]
    node awsel_48 = bits(_awsel_T_1, 48, 48) @[UserYanker.scala 91:55]
    node awsel_49 = bits(_awsel_T_1, 49, 49) @[UserYanker.scala 91:55]
    node awsel_50 = bits(_awsel_T_1, 50, 50) @[UserYanker.scala 91:55]
    node awsel_51 = bits(_awsel_T_1, 51, 51) @[UserYanker.scala 91:55]
    node awsel_52 = bits(_awsel_T_1, 52, 52) @[UserYanker.scala 91:55]
    node awsel_53 = bits(_awsel_T_1, 53, 53) @[UserYanker.scala 91:55]
    node awsel_54 = bits(_awsel_T_1, 54, 54) @[UserYanker.scala 91:55]
    node awsel_55 = bits(_awsel_T_1, 55, 55) @[UserYanker.scala 91:55]
    node awsel_56 = bits(_awsel_T_1, 56, 56) @[UserYanker.scala 91:55]
    node awsel_57 = bits(_awsel_T_1, 57, 57) @[UserYanker.scala 91:55]
    node awsel_58 = bits(_awsel_T_1, 58, 58) @[UserYanker.scala 91:55]
    node awsel_59 = bits(_awsel_T_1, 59, 59) @[UserYanker.scala 91:55]
    node awsel_60 = bits(_awsel_T_1, 60, 60) @[UserYanker.scala 91:55]
    node awsel_61 = bits(_awsel_T_1, 61, 61) @[UserYanker.scala 91:55]
    node awsel_62 = bits(_awsel_T_1, 62, 62) @[UserYanker.scala 91:55]
    node awsel_63 = bits(_awsel_T_1, 63, 63) @[UserYanker.scala 91:55]
    node bsel_shiftAmount = bits(x1.b.bits.id, 5, 0) @[OneHot.scala 63:49]
    node _bsel_T = dshl(UInt<1>("h1"), bsel_shiftAmount) @[OneHot.scala 64:12]
    node _bsel_T_1 = bits(_bsel_T, 63, 0) @[OneHot.scala 64:27]
    node bsel_0 = bits(_bsel_T_1, 0, 0) @[UserYanker.scala 92:55]
    node bsel_1 = bits(_bsel_T_1, 1, 1) @[UserYanker.scala 92:55]
    node bsel_2 = bits(_bsel_T_1, 2, 2) @[UserYanker.scala 92:55]
    node bsel_3 = bits(_bsel_T_1, 3, 3) @[UserYanker.scala 92:55]
    node bsel_4 = bits(_bsel_T_1, 4, 4) @[UserYanker.scala 92:55]
    node bsel_5 = bits(_bsel_T_1, 5, 5) @[UserYanker.scala 92:55]
    node bsel_6 = bits(_bsel_T_1, 6, 6) @[UserYanker.scala 92:55]
    node bsel_7 = bits(_bsel_T_1, 7, 7) @[UserYanker.scala 92:55]
    node bsel_8 = bits(_bsel_T_1, 8, 8) @[UserYanker.scala 92:55]
    node bsel_9 = bits(_bsel_T_1, 9, 9) @[UserYanker.scala 92:55]
    node bsel_10 = bits(_bsel_T_1, 10, 10) @[UserYanker.scala 92:55]
    node bsel_11 = bits(_bsel_T_1, 11, 11) @[UserYanker.scala 92:55]
    node bsel_12 = bits(_bsel_T_1, 12, 12) @[UserYanker.scala 92:55]
    node bsel_13 = bits(_bsel_T_1, 13, 13) @[UserYanker.scala 92:55]
    node bsel_14 = bits(_bsel_T_1, 14, 14) @[UserYanker.scala 92:55]
    node bsel_15 = bits(_bsel_T_1, 15, 15) @[UserYanker.scala 92:55]
    node bsel_16 = bits(_bsel_T_1, 16, 16) @[UserYanker.scala 92:55]
    node bsel_17 = bits(_bsel_T_1, 17, 17) @[UserYanker.scala 92:55]
    node bsel_18 = bits(_bsel_T_1, 18, 18) @[UserYanker.scala 92:55]
    node bsel_19 = bits(_bsel_T_1, 19, 19) @[UserYanker.scala 92:55]
    node bsel_20 = bits(_bsel_T_1, 20, 20) @[UserYanker.scala 92:55]
    node bsel_21 = bits(_bsel_T_1, 21, 21) @[UserYanker.scala 92:55]
    node bsel_22 = bits(_bsel_T_1, 22, 22) @[UserYanker.scala 92:55]
    node bsel_23 = bits(_bsel_T_1, 23, 23) @[UserYanker.scala 92:55]
    node bsel_24 = bits(_bsel_T_1, 24, 24) @[UserYanker.scala 92:55]
    node bsel_25 = bits(_bsel_T_1, 25, 25) @[UserYanker.scala 92:55]
    node bsel_26 = bits(_bsel_T_1, 26, 26) @[UserYanker.scala 92:55]
    node bsel_27 = bits(_bsel_T_1, 27, 27) @[UserYanker.scala 92:55]
    node bsel_28 = bits(_bsel_T_1, 28, 28) @[UserYanker.scala 92:55]
    node bsel_29 = bits(_bsel_T_1, 29, 29) @[UserYanker.scala 92:55]
    node bsel_30 = bits(_bsel_T_1, 30, 30) @[UserYanker.scala 92:55]
    node bsel_31 = bits(_bsel_T_1, 31, 31) @[UserYanker.scala 92:55]
    node bsel_32 = bits(_bsel_T_1, 32, 32) @[UserYanker.scala 92:55]
    node bsel_33 = bits(_bsel_T_1, 33, 33) @[UserYanker.scala 92:55]
    node bsel_34 = bits(_bsel_T_1, 34, 34) @[UserYanker.scala 92:55]
    node bsel_35 = bits(_bsel_T_1, 35, 35) @[UserYanker.scala 92:55]
    node bsel_36 = bits(_bsel_T_1, 36, 36) @[UserYanker.scala 92:55]
    node bsel_37 = bits(_bsel_T_1, 37, 37) @[UserYanker.scala 92:55]
    node bsel_38 = bits(_bsel_T_1, 38, 38) @[UserYanker.scala 92:55]
    node bsel_39 = bits(_bsel_T_1, 39, 39) @[UserYanker.scala 92:55]
    node bsel_40 = bits(_bsel_T_1, 40, 40) @[UserYanker.scala 92:55]
    node bsel_41 = bits(_bsel_T_1, 41, 41) @[UserYanker.scala 92:55]
    node bsel_42 = bits(_bsel_T_1, 42, 42) @[UserYanker.scala 92:55]
    node bsel_43 = bits(_bsel_T_1, 43, 43) @[UserYanker.scala 92:55]
    node bsel_44 = bits(_bsel_T_1, 44, 44) @[UserYanker.scala 92:55]
    node bsel_45 = bits(_bsel_T_1, 45, 45) @[UserYanker.scala 92:55]
    node bsel_46 = bits(_bsel_T_1, 46, 46) @[UserYanker.scala 92:55]
    node bsel_47 = bits(_bsel_T_1, 47, 47) @[UserYanker.scala 92:55]
    node bsel_48 = bits(_bsel_T_1, 48, 48) @[UserYanker.scala 92:55]
    node bsel_49 = bits(_bsel_T_1, 49, 49) @[UserYanker.scala 92:55]
    node bsel_50 = bits(_bsel_T_1, 50, 50) @[UserYanker.scala 92:55]
    node bsel_51 = bits(_bsel_T_1, 51, 51) @[UserYanker.scala 92:55]
    node bsel_52 = bits(_bsel_T_1, 52, 52) @[UserYanker.scala 92:55]
    node bsel_53 = bits(_bsel_T_1, 53, 53) @[UserYanker.scala 92:55]
    node bsel_54 = bits(_bsel_T_1, 54, 54) @[UserYanker.scala 92:55]
    node bsel_55 = bits(_bsel_T_1, 55, 55) @[UserYanker.scala 92:55]
    node bsel_56 = bits(_bsel_T_1, 56, 56) @[UserYanker.scala 92:55]
    node bsel_57 = bits(_bsel_T_1, 57, 57) @[UserYanker.scala 92:55]
    node bsel_58 = bits(_bsel_T_1, 58, 58) @[UserYanker.scala 92:55]
    node bsel_59 = bits(_bsel_T_1, 59, 59) @[UserYanker.scala 92:55]
    node bsel_60 = bits(_bsel_T_1, 60, 60) @[UserYanker.scala 92:55]
    node bsel_61 = bits(_bsel_T_1, 61, 61) @[UserYanker.scala 92:55]
    node bsel_62 = bits(_bsel_T_1, 62, 62) @[UserYanker.scala 92:55]
    node bsel_63 = bits(_bsel_T_1, 63, 63) @[UserYanker.scala 92:55]
    node _T_330 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_331 = and(_T_330, bsel_0) @[UserYanker.scala 94:53]
    Queue_64.io.deq.ready <= _T_331 @[UserYanker.scala 94:21]
    node _T_332 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_333 = and(_T_332, awsel_0) @[UserYanker.scala 95:53]
    Queue_64.io.enq.valid <= _T_333 @[UserYanker.scala 95:21]
    Queue_64.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_64.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_64.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_334 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_335 = and(_T_334, bsel_1) @[UserYanker.scala 94:53]
    Queue_65.io.deq.ready <= _T_335 @[UserYanker.scala 94:21]
    node _T_336 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_337 = and(_T_336, awsel_1) @[UserYanker.scala 95:53]
    Queue_65.io.enq.valid <= _T_337 @[UserYanker.scala 95:21]
    Queue_65.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_65.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_65.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_338 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_339 = and(_T_338, bsel_2) @[UserYanker.scala 94:53]
    Queue_66.io.deq.ready <= _T_339 @[UserYanker.scala 94:21]
    node _T_340 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_341 = and(_T_340, awsel_2) @[UserYanker.scala 95:53]
    Queue_66.io.enq.valid <= _T_341 @[UserYanker.scala 95:21]
    Queue_66.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_66.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_66.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_342 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_343 = and(_T_342, bsel_3) @[UserYanker.scala 94:53]
    Queue_67.io.deq.ready <= _T_343 @[UserYanker.scala 94:21]
    node _T_344 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_345 = and(_T_344, awsel_3) @[UserYanker.scala 95:53]
    Queue_67.io.enq.valid <= _T_345 @[UserYanker.scala 95:21]
    Queue_67.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_67.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_67.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_346 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_347 = and(_T_346, bsel_4) @[UserYanker.scala 94:53]
    Queue_68.io.deq.ready <= _T_347 @[UserYanker.scala 94:21]
    node _T_348 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_349 = and(_T_348, awsel_4) @[UserYanker.scala 95:53]
    Queue_68.io.enq.valid <= _T_349 @[UserYanker.scala 95:21]
    Queue_68.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_68.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_68.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_350 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_351 = and(_T_350, bsel_5) @[UserYanker.scala 94:53]
    Queue_69.io.deq.ready <= _T_351 @[UserYanker.scala 94:21]
    node _T_352 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_353 = and(_T_352, awsel_5) @[UserYanker.scala 95:53]
    Queue_69.io.enq.valid <= _T_353 @[UserYanker.scala 95:21]
    Queue_69.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_69.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_69.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_354 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_355 = and(_T_354, bsel_6) @[UserYanker.scala 94:53]
    Queue_70.io.deq.ready <= _T_355 @[UserYanker.scala 94:21]
    node _T_356 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_357 = and(_T_356, awsel_6) @[UserYanker.scala 95:53]
    Queue_70.io.enq.valid <= _T_357 @[UserYanker.scala 95:21]
    Queue_70.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_70.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_70.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_358 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_359 = and(_T_358, bsel_7) @[UserYanker.scala 94:53]
    Queue_71.io.deq.ready <= _T_359 @[UserYanker.scala 94:21]
    node _T_360 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_361 = and(_T_360, awsel_7) @[UserYanker.scala 95:53]
    Queue_71.io.enq.valid <= _T_361 @[UserYanker.scala 95:21]
    Queue_71.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_71.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_71.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_362 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_363 = and(_T_362, bsel_8) @[UserYanker.scala 94:53]
    Queue_72.io.deq.ready <= _T_363 @[UserYanker.scala 94:21]
    node _T_364 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_365 = and(_T_364, awsel_8) @[UserYanker.scala 95:53]
    Queue_72.io.enq.valid <= _T_365 @[UserYanker.scala 95:21]
    Queue_72.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_72.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_72.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_366 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_367 = and(_T_366, bsel_9) @[UserYanker.scala 94:53]
    Queue_73.io.deq.ready <= _T_367 @[UserYanker.scala 94:21]
    node _T_368 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_369 = and(_T_368, awsel_9) @[UserYanker.scala 95:53]
    Queue_73.io.enq.valid <= _T_369 @[UserYanker.scala 95:21]
    Queue_73.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_73.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_73.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_370 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_371 = and(_T_370, bsel_10) @[UserYanker.scala 94:53]
    Queue_74.io.deq.ready <= _T_371 @[UserYanker.scala 94:21]
    node _T_372 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_373 = and(_T_372, awsel_10) @[UserYanker.scala 95:53]
    Queue_74.io.enq.valid <= _T_373 @[UserYanker.scala 95:21]
    Queue_74.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_74.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_74.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_374 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_375 = and(_T_374, bsel_11) @[UserYanker.scala 94:53]
    Queue_75.io.deq.ready <= _T_375 @[UserYanker.scala 94:21]
    node _T_376 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_377 = and(_T_376, awsel_11) @[UserYanker.scala 95:53]
    Queue_75.io.enq.valid <= _T_377 @[UserYanker.scala 95:21]
    Queue_75.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_75.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_75.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_378 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_379 = and(_T_378, bsel_12) @[UserYanker.scala 94:53]
    Queue_76.io.deq.ready <= _T_379 @[UserYanker.scala 94:21]
    node _T_380 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_381 = and(_T_380, awsel_12) @[UserYanker.scala 95:53]
    Queue_76.io.enq.valid <= _T_381 @[UserYanker.scala 95:21]
    Queue_76.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_76.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_76.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_382 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_383 = and(_T_382, bsel_13) @[UserYanker.scala 94:53]
    Queue_77.io.deq.ready <= _T_383 @[UserYanker.scala 94:21]
    node _T_384 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_385 = and(_T_384, awsel_13) @[UserYanker.scala 95:53]
    Queue_77.io.enq.valid <= _T_385 @[UserYanker.scala 95:21]
    Queue_77.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_77.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_77.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_386 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_387 = and(_T_386, bsel_14) @[UserYanker.scala 94:53]
    Queue_78.io.deq.ready <= _T_387 @[UserYanker.scala 94:21]
    node _T_388 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_389 = and(_T_388, awsel_14) @[UserYanker.scala 95:53]
    Queue_78.io.enq.valid <= _T_389 @[UserYanker.scala 95:21]
    Queue_78.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_78.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_78.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_390 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_391 = and(_T_390, bsel_15) @[UserYanker.scala 94:53]
    Queue_79.io.deq.ready <= _T_391 @[UserYanker.scala 94:21]
    node _T_392 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_393 = and(_T_392, awsel_15) @[UserYanker.scala 95:53]
    Queue_79.io.enq.valid <= _T_393 @[UserYanker.scala 95:21]
    Queue_79.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_79.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_79.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_394 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_395 = and(_T_394, bsel_16) @[UserYanker.scala 94:53]
    Queue_80.io.deq.ready <= _T_395 @[UserYanker.scala 94:21]
    node _T_396 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_397 = and(_T_396, awsel_16) @[UserYanker.scala 95:53]
    Queue_80.io.enq.valid <= _T_397 @[UserYanker.scala 95:21]
    Queue_80.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_80.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_80.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_398 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_399 = and(_T_398, bsel_17) @[UserYanker.scala 94:53]
    Queue_81.io.deq.ready <= _T_399 @[UserYanker.scala 94:21]
    node _T_400 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_401 = and(_T_400, awsel_17) @[UserYanker.scala 95:53]
    Queue_81.io.enq.valid <= _T_401 @[UserYanker.scala 95:21]
    Queue_81.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_81.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_81.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_402 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_403 = and(_T_402, bsel_18) @[UserYanker.scala 94:53]
    Queue_82.io.deq.ready <= _T_403 @[UserYanker.scala 94:21]
    node _T_404 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_405 = and(_T_404, awsel_18) @[UserYanker.scala 95:53]
    Queue_82.io.enq.valid <= _T_405 @[UserYanker.scala 95:21]
    Queue_82.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_82.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_82.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_406 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_407 = and(_T_406, bsel_19) @[UserYanker.scala 94:53]
    Queue_83.io.deq.ready <= _T_407 @[UserYanker.scala 94:21]
    node _T_408 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_409 = and(_T_408, awsel_19) @[UserYanker.scala 95:53]
    Queue_83.io.enq.valid <= _T_409 @[UserYanker.scala 95:21]
    Queue_83.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_83.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_83.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_410 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_411 = and(_T_410, bsel_20) @[UserYanker.scala 94:53]
    Queue_84.io.deq.ready <= _T_411 @[UserYanker.scala 94:21]
    node _T_412 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_413 = and(_T_412, awsel_20) @[UserYanker.scala 95:53]
    Queue_84.io.enq.valid <= _T_413 @[UserYanker.scala 95:21]
    Queue_84.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_84.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_84.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_414 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_415 = and(_T_414, bsel_21) @[UserYanker.scala 94:53]
    Queue_85.io.deq.ready <= _T_415 @[UserYanker.scala 94:21]
    node _T_416 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_417 = and(_T_416, awsel_21) @[UserYanker.scala 95:53]
    Queue_85.io.enq.valid <= _T_417 @[UserYanker.scala 95:21]
    Queue_85.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_85.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_85.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_418 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_419 = and(_T_418, bsel_22) @[UserYanker.scala 94:53]
    Queue_86.io.deq.ready <= _T_419 @[UserYanker.scala 94:21]
    node _T_420 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_421 = and(_T_420, awsel_22) @[UserYanker.scala 95:53]
    Queue_86.io.enq.valid <= _T_421 @[UserYanker.scala 95:21]
    Queue_86.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_86.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_86.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_422 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_423 = and(_T_422, bsel_23) @[UserYanker.scala 94:53]
    Queue_87.io.deq.ready <= _T_423 @[UserYanker.scala 94:21]
    node _T_424 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_425 = and(_T_424, awsel_23) @[UserYanker.scala 95:53]
    Queue_87.io.enq.valid <= _T_425 @[UserYanker.scala 95:21]
    Queue_87.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_87.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_87.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_426 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_427 = and(_T_426, bsel_24) @[UserYanker.scala 94:53]
    Queue_88.io.deq.ready <= _T_427 @[UserYanker.scala 94:21]
    node _T_428 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_429 = and(_T_428, awsel_24) @[UserYanker.scala 95:53]
    Queue_88.io.enq.valid <= _T_429 @[UserYanker.scala 95:21]
    Queue_88.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_88.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_88.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_430 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_431 = and(_T_430, bsel_25) @[UserYanker.scala 94:53]
    Queue_89.io.deq.ready <= _T_431 @[UserYanker.scala 94:21]
    node _T_432 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_433 = and(_T_432, awsel_25) @[UserYanker.scala 95:53]
    Queue_89.io.enq.valid <= _T_433 @[UserYanker.scala 95:21]
    Queue_89.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_89.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_89.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_434 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_435 = and(_T_434, bsel_26) @[UserYanker.scala 94:53]
    Queue_90.io.deq.ready <= _T_435 @[UserYanker.scala 94:21]
    node _T_436 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_437 = and(_T_436, awsel_26) @[UserYanker.scala 95:53]
    Queue_90.io.enq.valid <= _T_437 @[UserYanker.scala 95:21]
    Queue_90.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_90.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_90.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_438 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_439 = and(_T_438, bsel_27) @[UserYanker.scala 94:53]
    Queue_91.io.deq.ready <= _T_439 @[UserYanker.scala 94:21]
    node _T_440 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_441 = and(_T_440, awsel_27) @[UserYanker.scala 95:53]
    Queue_91.io.enq.valid <= _T_441 @[UserYanker.scala 95:21]
    Queue_91.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_91.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_91.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_442 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_443 = and(_T_442, bsel_28) @[UserYanker.scala 94:53]
    Queue_92.io.deq.ready <= _T_443 @[UserYanker.scala 94:21]
    node _T_444 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_445 = and(_T_444, awsel_28) @[UserYanker.scala 95:53]
    Queue_92.io.enq.valid <= _T_445 @[UserYanker.scala 95:21]
    Queue_92.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_92.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_92.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_446 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_447 = and(_T_446, bsel_29) @[UserYanker.scala 94:53]
    Queue_93.io.deq.ready <= _T_447 @[UserYanker.scala 94:21]
    node _T_448 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_449 = and(_T_448, awsel_29) @[UserYanker.scala 95:53]
    Queue_93.io.enq.valid <= _T_449 @[UserYanker.scala 95:21]
    Queue_93.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_93.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_93.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_450 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_451 = and(_T_450, bsel_30) @[UserYanker.scala 94:53]
    Queue_94.io.deq.ready <= _T_451 @[UserYanker.scala 94:21]
    node _T_452 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_453 = and(_T_452, awsel_30) @[UserYanker.scala 95:53]
    Queue_94.io.enq.valid <= _T_453 @[UserYanker.scala 95:21]
    Queue_94.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_94.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_94.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_454 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_455 = and(_T_454, bsel_31) @[UserYanker.scala 94:53]
    Queue_95.io.deq.ready <= _T_455 @[UserYanker.scala 94:21]
    node _T_456 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_457 = and(_T_456, awsel_31) @[UserYanker.scala 95:53]
    Queue_95.io.enq.valid <= _T_457 @[UserYanker.scala 95:21]
    Queue_95.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_95.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_95.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_458 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_459 = and(_T_458, bsel_32) @[UserYanker.scala 94:53]
    Queue_96.io.deq.ready <= _T_459 @[UserYanker.scala 94:21]
    node _T_460 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_461 = and(_T_460, awsel_32) @[UserYanker.scala 95:53]
    Queue_96.io.enq.valid <= _T_461 @[UserYanker.scala 95:21]
    Queue_96.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_96.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_96.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_462 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_463 = and(_T_462, bsel_33) @[UserYanker.scala 94:53]
    Queue_97.io.deq.ready <= _T_463 @[UserYanker.scala 94:21]
    node _T_464 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_465 = and(_T_464, awsel_33) @[UserYanker.scala 95:53]
    Queue_97.io.enq.valid <= _T_465 @[UserYanker.scala 95:21]
    Queue_97.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_97.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_97.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_466 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_467 = and(_T_466, bsel_34) @[UserYanker.scala 94:53]
    Queue_98.io.deq.ready <= _T_467 @[UserYanker.scala 94:21]
    node _T_468 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_469 = and(_T_468, awsel_34) @[UserYanker.scala 95:53]
    Queue_98.io.enq.valid <= _T_469 @[UserYanker.scala 95:21]
    Queue_98.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_98.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_98.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_470 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_471 = and(_T_470, bsel_35) @[UserYanker.scala 94:53]
    Queue_99.io.deq.ready <= _T_471 @[UserYanker.scala 94:21]
    node _T_472 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_473 = and(_T_472, awsel_35) @[UserYanker.scala 95:53]
    Queue_99.io.enq.valid <= _T_473 @[UserYanker.scala 95:21]
    Queue_99.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_99.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_99.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_474 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_475 = and(_T_474, bsel_36) @[UserYanker.scala 94:53]
    Queue_100.io.deq.ready <= _T_475 @[UserYanker.scala 94:21]
    node _T_476 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_477 = and(_T_476, awsel_36) @[UserYanker.scala 95:53]
    Queue_100.io.enq.valid <= _T_477 @[UserYanker.scala 95:21]
    Queue_100.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_100.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_100.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_478 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_479 = and(_T_478, bsel_37) @[UserYanker.scala 94:53]
    Queue_101.io.deq.ready <= _T_479 @[UserYanker.scala 94:21]
    node _T_480 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_481 = and(_T_480, awsel_37) @[UserYanker.scala 95:53]
    Queue_101.io.enq.valid <= _T_481 @[UserYanker.scala 95:21]
    Queue_101.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_101.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_101.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_482 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_483 = and(_T_482, bsel_38) @[UserYanker.scala 94:53]
    Queue_102.io.deq.ready <= _T_483 @[UserYanker.scala 94:21]
    node _T_484 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_485 = and(_T_484, awsel_38) @[UserYanker.scala 95:53]
    Queue_102.io.enq.valid <= _T_485 @[UserYanker.scala 95:21]
    Queue_102.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_102.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_102.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_486 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_487 = and(_T_486, bsel_39) @[UserYanker.scala 94:53]
    Queue_103.io.deq.ready <= _T_487 @[UserYanker.scala 94:21]
    node _T_488 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_489 = and(_T_488, awsel_39) @[UserYanker.scala 95:53]
    Queue_103.io.enq.valid <= _T_489 @[UserYanker.scala 95:21]
    Queue_103.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_103.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_103.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_490 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_491 = and(_T_490, bsel_40) @[UserYanker.scala 94:53]
    Queue_104.io.deq.ready <= _T_491 @[UserYanker.scala 94:21]
    node _T_492 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_493 = and(_T_492, awsel_40) @[UserYanker.scala 95:53]
    Queue_104.io.enq.valid <= _T_493 @[UserYanker.scala 95:21]
    Queue_104.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_104.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_104.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_494 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_495 = and(_T_494, bsel_41) @[UserYanker.scala 94:53]
    Queue_105.io.deq.ready <= _T_495 @[UserYanker.scala 94:21]
    node _T_496 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_497 = and(_T_496, awsel_41) @[UserYanker.scala 95:53]
    Queue_105.io.enq.valid <= _T_497 @[UserYanker.scala 95:21]
    Queue_105.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_105.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_105.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_498 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_499 = and(_T_498, bsel_42) @[UserYanker.scala 94:53]
    Queue_106.io.deq.ready <= _T_499 @[UserYanker.scala 94:21]
    node _T_500 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_501 = and(_T_500, awsel_42) @[UserYanker.scala 95:53]
    Queue_106.io.enq.valid <= _T_501 @[UserYanker.scala 95:21]
    Queue_106.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_106.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_106.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_502 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_503 = and(_T_502, bsel_43) @[UserYanker.scala 94:53]
    Queue_107.io.deq.ready <= _T_503 @[UserYanker.scala 94:21]
    node _T_504 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_505 = and(_T_504, awsel_43) @[UserYanker.scala 95:53]
    Queue_107.io.enq.valid <= _T_505 @[UserYanker.scala 95:21]
    Queue_107.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_107.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_107.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_506 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_507 = and(_T_506, bsel_44) @[UserYanker.scala 94:53]
    Queue_108.io.deq.ready <= _T_507 @[UserYanker.scala 94:21]
    node _T_508 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_509 = and(_T_508, awsel_44) @[UserYanker.scala 95:53]
    Queue_108.io.enq.valid <= _T_509 @[UserYanker.scala 95:21]
    Queue_108.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_108.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_108.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_510 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_511 = and(_T_510, bsel_45) @[UserYanker.scala 94:53]
    Queue_109.io.deq.ready <= _T_511 @[UserYanker.scala 94:21]
    node _T_512 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_513 = and(_T_512, awsel_45) @[UserYanker.scala 95:53]
    Queue_109.io.enq.valid <= _T_513 @[UserYanker.scala 95:21]
    Queue_109.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_109.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_109.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_514 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_515 = and(_T_514, bsel_46) @[UserYanker.scala 94:53]
    Queue_110.io.deq.ready <= _T_515 @[UserYanker.scala 94:21]
    node _T_516 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_517 = and(_T_516, awsel_46) @[UserYanker.scala 95:53]
    Queue_110.io.enq.valid <= _T_517 @[UserYanker.scala 95:21]
    Queue_110.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_110.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_110.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_518 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_519 = and(_T_518, bsel_47) @[UserYanker.scala 94:53]
    Queue_111.io.deq.ready <= _T_519 @[UserYanker.scala 94:21]
    node _T_520 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_521 = and(_T_520, awsel_47) @[UserYanker.scala 95:53]
    Queue_111.io.enq.valid <= _T_521 @[UserYanker.scala 95:21]
    Queue_111.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_111.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_111.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_522 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_523 = and(_T_522, bsel_48) @[UserYanker.scala 94:53]
    Queue_112.io.deq.ready <= _T_523 @[UserYanker.scala 94:21]
    node _T_524 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_525 = and(_T_524, awsel_48) @[UserYanker.scala 95:53]
    Queue_112.io.enq.valid <= _T_525 @[UserYanker.scala 95:21]
    Queue_112.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_112.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_112.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_526 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_527 = and(_T_526, bsel_49) @[UserYanker.scala 94:53]
    Queue_113.io.deq.ready <= _T_527 @[UserYanker.scala 94:21]
    node _T_528 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_529 = and(_T_528, awsel_49) @[UserYanker.scala 95:53]
    Queue_113.io.enq.valid <= _T_529 @[UserYanker.scala 95:21]
    Queue_113.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_113.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_113.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_530 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_531 = and(_T_530, bsel_50) @[UserYanker.scala 94:53]
    Queue_114.io.deq.ready <= _T_531 @[UserYanker.scala 94:21]
    node _T_532 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_533 = and(_T_532, awsel_50) @[UserYanker.scala 95:53]
    Queue_114.io.enq.valid <= _T_533 @[UserYanker.scala 95:21]
    Queue_114.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_114.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_114.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_534 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_535 = and(_T_534, bsel_51) @[UserYanker.scala 94:53]
    Queue_115.io.deq.ready <= _T_535 @[UserYanker.scala 94:21]
    node _T_536 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_537 = and(_T_536, awsel_51) @[UserYanker.scala 95:53]
    Queue_115.io.enq.valid <= _T_537 @[UserYanker.scala 95:21]
    Queue_115.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_115.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_115.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_538 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_539 = and(_T_538, bsel_52) @[UserYanker.scala 94:53]
    Queue_116.io.deq.ready <= _T_539 @[UserYanker.scala 94:21]
    node _T_540 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_541 = and(_T_540, awsel_52) @[UserYanker.scala 95:53]
    Queue_116.io.enq.valid <= _T_541 @[UserYanker.scala 95:21]
    Queue_116.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_116.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_116.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_542 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_543 = and(_T_542, bsel_53) @[UserYanker.scala 94:53]
    Queue_117.io.deq.ready <= _T_543 @[UserYanker.scala 94:21]
    node _T_544 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_545 = and(_T_544, awsel_53) @[UserYanker.scala 95:53]
    Queue_117.io.enq.valid <= _T_545 @[UserYanker.scala 95:21]
    Queue_117.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_117.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_117.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_546 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_547 = and(_T_546, bsel_54) @[UserYanker.scala 94:53]
    Queue_118.io.deq.ready <= _T_547 @[UserYanker.scala 94:21]
    node _T_548 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_549 = and(_T_548, awsel_54) @[UserYanker.scala 95:53]
    Queue_118.io.enq.valid <= _T_549 @[UserYanker.scala 95:21]
    Queue_118.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_118.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_118.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_550 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_551 = and(_T_550, bsel_55) @[UserYanker.scala 94:53]
    Queue_119.io.deq.ready <= _T_551 @[UserYanker.scala 94:21]
    node _T_552 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_553 = and(_T_552, awsel_55) @[UserYanker.scala 95:53]
    Queue_119.io.enq.valid <= _T_553 @[UserYanker.scala 95:21]
    Queue_119.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_119.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_119.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_554 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_555 = and(_T_554, bsel_56) @[UserYanker.scala 94:53]
    Queue_120.io.deq.ready <= _T_555 @[UserYanker.scala 94:21]
    node _T_556 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_557 = and(_T_556, awsel_56) @[UserYanker.scala 95:53]
    Queue_120.io.enq.valid <= _T_557 @[UserYanker.scala 95:21]
    Queue_120.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_120.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_120.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_558 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_559 = and(_T_558, bsel_57) @[UserYanker.scala 94:53]
    Queue_121.io.deq.ready <= _T_559 @[UserYanker.scala 94:21]
    node _T_560 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_561 = and(_T_560, awsel_57) @[UserYanker.scala 95:53]
    Queue_121.io.enq.valid <= _T_561 @[UserYanker.scala 95:21]
    Queue_121.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_121.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_121.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_562 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_563 = and(_T_562, bsel_58) @[UserYanker.scala 94:53]
    Queue_122.io.deq.ready <= _T_563 @[UserYanker.scala 94:21]
    node _T_564 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_565 = and(_T_564, awsel_58) @[UserYanker.scala 95:53]
    Queue_122.io.enq.valid <= _T_565 @[UserYanker.scala 95:21]
    Queue_122.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_122.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_122.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_566 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_567 = and(_T_566, bsel_59) @[UserYanker.scala 94:53]
    Queue_123.io.deq.ready <= _T_567 @[UserYanker.scala 94:21]
    node _T_568 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_569 = and(_T_568, awsel_59) @[UserYanker.scala 95:53]
    Queue_123.io.enq.valid <= _T_569 @[UserYanker.scala 95:21]
    Queue_123.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_123.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_123.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_570 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_571 = and(_T_570, bsel_60) @[UserYanker.scala 94:53]
    Queue_124.io.deq.ready <= _T_571 @[UserYanker.scala 94:21]
    node _T_572 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_573 = and(_T_572, awsel_60) @[UserYanker.scala 95:53]
    Queue_124.io.enq.valid <= _T_573 @[UserYanker.scala 95:21]
    Queue_124.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_124.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_124.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_574 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_575 = and(_T_574, bsel_61) @[UserYanker.scala 94:53]
    Queue_125.io.deq.ready <= _T_575 @[UserYanker.scala 94:21]
    node _T_576 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_577 = and(_T_576, awsel_61) @[UserYanker.scala 95:53]
    Queue_125.io.enq.valid <= _T_577 @[UserYanker.scala 95:21]
    Queue_125.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_125.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_125.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_578 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_579 = and(_T_578, bsel_62) @[UserYanker.scala 94:53]
    Queue_126.io.deq.ready <= _T_579 @[UserYanker.scala 94:21]
    node _T_580 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_581 = and(_T_580, awsel_62) @[UserYanker.scala 95:53]
    Queue_126.io.enq.valid <= _T_581 @[UserYanker.scala 95:21]
    Queue_126.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_126.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_126.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    node _T_582 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_583 = and(_T_582, bsel_63) @[UserYanker.scala 94:53]
    Queue_127.io.deq.ready <= _T_583 @[UserYanker.scala 94:21]
    node _T_584 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_585 = and(_T_584, awsel_63) @[UserYanker.scala 95:53]
    Queue_127.io.enq.valid <= _T_585 @[UserYanker.scala 95:21]
    Queue_127.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    Queue_127.io.enq.bits.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    Queue_127.io.enq.bits.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    x1.w.bits.last <= bundleIn_0.w.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= bundleIn_0.w.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= bundleIn_0.w.bits.data @[BundleMap.scala 247:19]
    x1.w.valid <= bundleIn_0.w.valid @[BundleMap.scala 247:19]
    bundleIn_0.w.ready <= x1.w.ready @[BundleMap.scala 247:19]

  module Queue_161 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_162 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_163 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_164 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_165 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_4 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_161 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.echo.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_162 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_163 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.echo.extra_id <= x1.b.bits.echo.extra_id @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.source <= x1.b.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.size <= x1.b.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_164 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.echo.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_165 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.extra_id <= x1.r.bits.echo.extra_id @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.source <= x1.r.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.size <= x1.r.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module AXI4IdIndexer :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}, extra_id : UInt<2>}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    x1.ar.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.ar.bits.echo.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    x1.ar.bits.echo.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    x1.ar.bits.qos <= bundleIn_0.ar.bits.qos @[BundleMap.scala 247:19]
    x1.ar.bits.prot <= bundleIn_0.ar.bits.prot @[BundleMap.scala 247:19]
    x1.ar.bits.cache <= bundleIn_0.ar.bits.cache @[BundleMap.scala 247:19]
    x1.ar.bits.lock <= bundleIn_0.ar.bits.lock @[BundleMap.scala 247:19]
    x1.ar.bits.burst <= bundleIn_0.ar.bits.burst @[BundleMap.scala 247:19]
    x1.ar.bits.size <= bundleIn_0.ar.bits.size @[BundleMap.scala 247:19]
    x1.ar.bits.len <= bundleIn_0.ar.bits.len @[BundleMap.scala 247:19]
    x1.ar.bits.addr <= bundleIn_0.ar.bits.addr @[BundleMap.scala 247:19]
    x1.ar.bits.id <= bundleIn_0.ar.bits.id @[BundleMap.scala 247:19]
    x1.ar.valid <= bundleIn_0.ar.valid @[BundleMap.scala 247:19]
    bundleIn_0.ar.ready <= x1.ar.ready @[BundleMap.scala 247:19]
    x1.aw.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.aw.bits.echo.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    x1.aw.bits.echo.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    x1.aw.bits.qos <= bundleIn_0.aw.bits.qos @[BundleMap.scala 247:19]
    x1.aw.bits.prot <= bundleIn_0.aw.bits.prot @[BundleMap.scala 247:19]
    x1.aw.bits.cache <= bundleIn_0.aw.bits.cache @[BundleMap.scala 247:19]
    x1.aw.bits.lock <= bundleIn_0.aw.bits.lock @[BundleMap.scala 247:19]
    x1.aw.bits.burst <= bundleIn_0.aw.bits.burst @[BundleMap.scala 247:19]
    x1.aw.bits.size <= bundleIn_0.aw.bits.size @[BundleMap.scala 247:19]
    x1.aw.bits.len <= bundleIn_0.aw.bits.len @[BundleMap.scala 247:19]
    x1.aw.bits.addr <= bundleIn_0.aw.bits.addr @[BundleMap.scala 247:19]
    x1.aw.bits.id <= bundleIn_0.aw.bits.id @[BundleMap.scala 247:19]
    x1.aw.valid <= bundleIn_0.aw.valid @[BundleMap.scala 247:19]
    bundleIn_0.aw.ready <= x1.aw.ready @[BundleMap.scala 247:19]
    x1.w.bits.last <= bundleIn_0.w.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= bundleIn_0.w.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= bundleIn_0.w.bits.data @[BundleMap.scala 247:19]
    x1.w.valid <= bundleIn_0.w.valid @[BundleMap.scala 247:19]
    bundleIn_0.w.ready <= x1.w.ready @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.tl_state.source <= x1.b.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.tl_state.size <= x1.b.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.resp <= x1.b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= x1.b.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.b.valid <= x1.b.valid @[BundleMap.scala 247:19]
    x1.b.ready <= bundleIn_0.b.ready @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.last <= x1.r.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.tl_state.source <= x1.r.bits.echo.tl_state.source @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.tl_state.size <= x1.r.bits.echo.tl_state.size @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.resp <= x1.r.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= x1.r.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= x1.r.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= x1.r.valid @[BundleMap.scala 247:19]
    x1.r.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    node _x1_ar_bits_echo_extra_id_T = shr(bundleIn_0.ar.bits.id, 6) @[IdIndexer.scala 73:56]
    x1.ar.bits.echo.extra_id <= _x1_ar_bits_echo_extra_id_T @[IdIndexer.scala 73:39]
    node _x1_aw_bits_echo_extra_id_T = shr(bundleIn_0.aw.bits.id, 6) @[IdIndexer.scala 74:56]
    x1.aw.bits.echo.extra_id <= _x1_aw_bits_echo_extra_id_T @[IdIndexer.scala 74:39]
    node _bundleIn_0_r_bits_id_T = cat(x1.r.bits.echo.extra_id, x1.r.bits.id) @[Cat.scala 33:92]
    bundleIn_0.r.bits.id <= _bundleIn_0_r_bits_id_T @[IdIndexer.scala 82:24]
    node _bundleIn_0_b_bits_id_T = cat(x1.b.bits.echo.extra_id, x1.b.bits.id) @[Cat.scala 33:92]
    bundleIn_0.b.bits.id <= _bundleIn_0_b_bits_id_T @[IdIndexer.scala 83:24]

  module Queue_166 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_167 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_168 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_169 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, count : UInt<2>}

    cmem ram : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_170 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_5 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_166 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.aw.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.aw.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_167 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_168 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.source <= x1.b.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.echo.tl_state.size <= x1.b.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_169 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.echo.tl_state.source <= bundleIn_0.ar.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.echo.tl_state.size <= bundleIn_0.ar.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_170 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.source <= x1.r.bits.echo.tl_state.source @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.echo.tl_state.size <= x1.r.bits.echo.tl_state.size @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<8>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module MCRFileTL :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}}}}
    output io : { mcr : { flip read : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}[8], write : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}[8], wstrb : UInt<4>}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    wire in : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}}} @[Nodes.scala 1215:84]
    in is invalid @[Nodes.scala 1215:84]
    in <- auto.in @[LazyModule.scala 366:16]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MCR.scala 268:22]
    reg address : UInt<3>, clock with :
      reset => (UInt<1>("h0"), address) @[MCR.scala 270:20]
    reg writeData : UInt<32>, clock with :
      reset => (UInt<1>("h0"), writeData) @[MCR.scala 271:22]
    reg readData : UInt<32>, clock with :
      reset => (UInt<1>("h0"), readData) @[MCR.scala 272:21]
    reg id : UInt<4>, clock with :
      reset => (UInt<1>("h0"), id) @[MCR.scala 273:15]
    reg opLen : UInt<8>, clock with :
      reset => (UInt<1>("h0"), opLen) @[MCR.scala 274:18]
    reg param : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param) @[MCR.scala 275:18]
    io.mcr.read[0].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[1].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[2].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[3].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[4].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[5].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[6].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.read[7].ready <= UInt<1>("h0") @[MCR.scala 280:20]
    io.mcr.write[0].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[0].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[1].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[1].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[2].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[2].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[3].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[3].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[4].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[4].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[5].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[5].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[6].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[6].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    io.mcr.write[7].bits is invalid @[MCR.scala 283:19]
    io.mcr.write[7].valid <= UInt<1>("h0") @[MCR.scala 284:20]
    in.a.ready <= UInt<1>("h0") @[MCR.scala 287:14]
    in.d.valid <= UInt<1>("h0") @[MCR.scala 288:14]
    in.d.bits.corrupt is invalid @[MCR.scala 289:13]
    in.d.bits.data is invalid @[MCR.scala 289:13]
    in.d.bits.denied is invalid @[MCR.scala 289:13]
    in.d.bits.sink is invalid @[MCR.scala 289:13]
    in.d.bits.source is invalid @[MCR.scala 289:13]
    in.d.bits.size is invalid @[MCR.scala 289:13]
    in.d.bits.param is invalid @[MCR.scala 289:13]
    in.d.bits.opcode is invalid @[MCR.scala 289:13]
    node _T = eq(UInt<3>("h0"), state) @[MCR.scala 292:17]
    when _T : @[MCR.scala 292:17]
      in.a.ready <= UInt<1>("h1") @[MCR.scala 294:18]
      node _T_1 = and(in.a.ready, in.a.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[MCR.scala 295:24]
        id <= in.a.bits.source @[MCR.scala 296:12]
        param <= in.a.bits.size @[MCR.scala 297:15]
        node _address_T = bits(in.a.bits.address, 4, 2) @[MCR.scala 301:37]
        address <= _address_T @[MCR.scala 301:17]
        node _T_2 = eq(in.a.bits.opcode, UInt<1>("h0")) @[MCR.scala 302:32]
        node _T_3 = eq(in.a.bits.opcode, UInt<1>("h1")) @[MCR.scala 302:79]
        node _T_4 = or(_T_2, _T_3) @[MCR.scala 302:59]
        when _T_4 : @[MCR.scala 302:110]
          state <= UInt<3>("h3") @[MCR.scala 303:17]
          node _writeData_T = bits(in.a.bits.data, 31, 0) @[MCR.scala 304:38]
          writeData <= _writeData_T @[MCR.scala 304:21]
        node _T_5 = eq(in.a.bits.opcode, UInt<3>("h4")) @[MCR.scala 306:32]
        when _T_5 : @[MCR.scala 306:52]
          state <= UInt<3>("h1") @[MCR.scala 307:17]
    else :
      node _T_6 = eq(UInt<3>("h3"), state) @[MCR.scala 292:17]
      when _T_6 : @[MCR.scala 292:17]
        io.mcr.write[address].bits <= writeData @[MCR.scala 312:34]
        io.mcr.write[address].valid <= UInt<1>("h1") @[MCR.scala 313:35]
        state <= UInt<3>("h4") @[MCR.scala 314:13]
      else :
        node _T_7 = eq(UInt<3>("h4"), state) @[MCR.scala 292:17]
        when _T_7 : @[MCR.scala 292:17]
          in.d.valid <= UInt<1>("h1") @[MCR.scala 317:18]
          wire bundleIn_0_d_bits_d : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>} @[Edges.scala 755:17]
          bundleIn_0_d_bits_d is invalid @[Edges.scala 755:17]
          bundleIn_0_d_bits_d.opcode <= UInt<1>("h0") @[Edges.scala 756:15]
          bundleIn_0_d_bits_d.param <= UInt<1>("h0") @[Edges.scala 757:15]
          bundleIn_0_d_bits_d.size <= param @[Edges.scala 758:15]
          bundleIn_0_d_bits_d.source <= id @[Edges.scala 759:15]
          bundleIn_0_d_bits_d.sink <= UInt<1>("h0") @[Edges.scala 760:15]
          bundleIn_0_d_bits_d.denied <= UInt<1>("h0") @[Edges.scala 761:15]
          bundleIn_0_d_bits_d.data <= UInt<1>("h0") @[Edges.scala 762:15]
          bundleIn_0_d_bits_d.corrupt <= UInt<1>("h0") @[Edges.scala 763:15]
          in.d.bits.corrupt <= bundleIn_0_d_bits_d.corrupt @[MCR.scala 318:17]
          in.d.bits.data <= bundleIn_0_d_bits_d.data @[MCR.scala 318:17]
          in.d.bits.denied <= bundleIn_0_d_bits_d.denied @[MCR.scala 318:17]
          in.d.bits.sink <= bundleIn_0_d_bits_d.sink @[MCR.scala 318:17]
          in.d.bits.source <= bundleIn_0_d_bits_d.source @[MCR.scala 318:17]
          in.d.bits.size <= bundleIn_0_d_bits_d.size @[MCR.scala 318:17]
          in.d.bits.param <= bundleIn_0_d_bits_d.param @[MCR.scala 318:17]
          in.d.bits.opcode <= bundleIn_0_d_bits_d.opcode @[MCR.scala 318:17]
          node _T_8 = and(in.d.ready, in.d.valid) @[Decoupled.scala 51:35]
          when _T_8 : @[MCR.scala 319:24]
            state <= UInt<3>("h0") @[MCR.scala 320:15]
        else :
          node _T_9 = eq(UInt<3>("h1"), state) @[MCR.scala 292:17]
          when _T_9 : @[MCR.scala 292:17]
            io.mcr.read[address].ready <= UInt<1>("h1") @[MCR.scala 324:34]
            readData <= io.mcr.read[address].bits @[MCR.scala 325:16]
            node _T_10 = and(io.mcr.read[address].ready, io.mcr.read[address].valid) @[Decoupled.scala 51:35]
            when _T_10 : @[MCR.scala 326:39]
              state <= UInt<3>("h2") @[MCR.scala 327:15]
          else :
            node _T_11 = eq(UInt<3>("h2"), state) @[MCR.scala 292:17]
            when _T_11 : @[MCR.scala 292:17]
              in.d.valid <= UInt<1>("h1") @[MCR.scala 331:18]
              wire bundleIn_0_d_bits_d_1 : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>} @[Edges.scala 771:17]
              bundleIn_0_d_bits_d_1 is invalid @[Edges.scala 771:17]
              bundleIn_0_d_bits_d_1.opcode <= UInt<1>("h1") @[Edges.scala 772:15]
              bundleIn_0_d_bits_d_1.param <= UInt<1>("h0") @[Edges.scala 773:15]
              bundleIn_0_d_bits_d_1.size <= param @[Edges.scala 774:15]
              bundleIn_0_d_bits_d_1.source <= id @[Edges.scala 775:15]
              bundleIn_0_d_bits_d_1.sink <= UInt<1>("h0") @[Edges.scala 776:15]
              bundleIn_0_d_bits_d_1.denied <= UInt<1>("h0") @[Edges.scala 777:15]
              bundleIn_0_d_bits_d_1.data <= readData @[Edges.scala 778:15]
              bundleIn_0_d_bits_d_1.corrupt <= UInt<1>("h0") @[Edges.scala 779:15]
              in.d.bits.corrupt <= bundleIn_0_d_bits_d_1.corrupt @[MCR.scala 332:17]
              in.d.bits.data <= bundleIn_0_d_bits_d_1.data @[MCR.scala 332:17]
              in.d.bits.denied <= bundleIn_0_d_bits_d_1.denied @[MCR.scala 332:17]
              in.d.bits.sink <= bundleIn_0_d_bits_d_1.sink @[MCR.scala 332:17]
              in.d.bits.source <= bundleIn_0_d_bits_d_1.source @[MCR.scala 332:17]
              in.d.bits.size <= bundleIn_0_d_bits_d_1.size @[MCR.scala 332:17]
              in.d.bits.param <= bundleIn_0_d_bits_d_1.param @[MCR.scala 332:17]
              in.d.bits.opcode <= bundleIn_0_d_bits_d_1.opcode @[MCR.scala 332:17]
              node _T_12 = and(in.d.ready, in.d.valid) @[Decoupled.scala 51:35]
              when _T_12 : @[MCR.scala 333:24]
                state <= UInt<3>("h0") @[MCR.scala 334:15]


  module Queue_171 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, count : UInt<1>}

    cmem ram : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_172 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, count : UInt<1>}

    cmem ram : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4ToTL :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { a : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}}, flip d : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, sink : UInt<1>, denied : UInt<1>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    wire r_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}} @[ToTL.scala 97:30]
    r_out.bits <= x1.a.bits @[ToTL.scala 97:30]
    r_out.valid <= x1.a.valid @[ToTL.scala 97:30]
    r_out.ready <= x1.a.ready @[ToTL.scala 97:30]
    node _r_size1_T = cat(bundleIn_0.ar.bits.len, UInt<8>("hff")) @[Cat.scala 33:92]
    node _r_size1_T_1 = dshl(_r_size1_T, bundleIn_0.ar.bits.size) @[Bundles.scala 33:21]
    node r_size1 = shr(_r_size1_T_1, 8) @[Bundles.scala 33:30]
    node _r_size_T = shl(r_size1, 1) @[package.scala 233:35]
    node _r_size_T_1 = or(_r_size_T, UInt<1>("h1")) @[package.scala 233:40]
    node _r_size_T_2 = cat(UInt<1>("h0"), r_size1) @[Cat.scala 33:92]
    node _r_size_T_3 = not(_r_size_T_2) @[package.scala 233:49]
    node _r_size_T_4 = and(_r_size_T_1, _r_size_T_3) @[package.scala 233:47]
    node r_size_hi = bits(_r_size_T_4, 15, 8) @[OneHot.scala 30:18]
    node r_size_lo = bits(_r_size_T_4, 7, 0) @[OneHot.scala 31:18]
    node _r_size_T_5 = orr(r_size_hi) @[OneHot.scala 32:14]
    node _r_size_T_6 = or(r_size_hi, r_size_lo) @[OneHot.scala 32:28]
    node r_size_hi_1 = bits(_r_size_T_6, 7, 4) @[OneHot.scala 30:18]
    node r_size_lo_1 = bits(_r_size_T_6, 3, 0) @[OneHot.scala 31:18]
    node _r_size_T_7 = orr(r_size_hi_1) @[OneHot.scala 32:14]
    node _r_size_T_8 = or(r_size_hi_1, r_size_lo_1) @[OneHot.scala 32:28]
    node r_size_hi_2 = bits(_r_size_T_8, 3, 2) @[OneHot.scala 30:18]
    node r_size_lo_2 = bits(_r_size_T_8, 1, 0) @[OneHot.scala 31:18]
    node _r_size_T_9 = orr(r_size_hi_2) @[OneHot.scala 32:14]
    node _r_size_T_10 = or(r_size_hi_2, r_size_lo_2) @[OneHot.scala 32:28]
    node _r_size_T_11 = bits(_r_size_T_10, 1, 1) @[CircuitMath.scala 28:8]
    node _r_size_T_12 = cat(_r_size_T_9, _r_size_T_11) @[Cat.scala 33:92]
    node _r_size_T_13 = cat(_r_size_T_7, _r_size_T_12) @[Cat.scala 33:92]
    node r_size = cat(_r_size_T_5, _r_size_T_13) @[Cat.scala 33:92]
    wire _r_count_WIRE : UInt<3>[2] @[ToTL.scala 102:50]
    _r_count_WIRE[0] <= UInt<3>("h0") @[ToTL.scala 102:50]
    _r_count_WIRE[1] <= UInt<3>("h0") @[ToTL.scala 102:50]
    reg r_count : UInt<3>[2], clock with :
      reset => (reset, _r_count_WIRE) @[ToTL.scala 102:28]
    node _r_id_T = bits(r_count[bundleIn_0.ar.bits.id], 1, 0) @[ToTL.scala 106:50]
    node r_id_hi = cat(bundleIn_0.ar.bits.id, _r_id_T) @[Cat.scala 33:92]
    node r_id = cat(r_id_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node _T = eq(bundleIn_0.ar.valid, UInt<1>("h0")) @[ToTL.scala 109:15]
    node _T_1 = asUInt(asSInt(UInt<15>("h7fff"))) @[package.scala 235:64]
    node _T_2 = dshl(_T_1, r_size) @[package.scala 235:71]
    node _T_3 = bits(_T_2, 14, 0) @[package.scala 235:76]
    node _T_4 = not(_T_3) @[package.scala 235:46]
    node _T_5 = eq(r_size1, _T_4) @[ToTL.scala 109:39]
    node _T_6 = or(_T, _T_5) @[ToTL.scala 109:28]
    node _T_7 = asUInt(reset) @[ToTL.scala 109:14]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[ToTL.scala 109:14]
    when _T_8 : @[ToTL.scala 109:14]
      node _T_9 = eq(_T_6, UInt<1>("h0")) @[ToTL.scala 109:14]
      when _T_9 : @[ToTL.scala 109:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToTL.scala:109 assert (!in.ar.valid || r_size1 === UIntToOH1(r_size, beatCountBits)) // because aligned\n") : printf @[ToTL.scala 109:14]
      assert(clock, _T_6, UInt<1>("h1"), "") : assert @[ToTL.scala 109:14]
    bundleIn_0.ar.ready <= r_out.ready @[ToTL.scala 110:19]
    r_out.valid <= bundleIn_0.ar.valid @[ToTL.scala 111:19]
    node _legal_T = leq(UInt<1>("h0"), r_size) @[Parameters.scala 92:32]
    node _legal_T_1 = leq(r_size, UInt<2>("h2")) @[Parameters.scala 92:42]
    node _legal_T_2 = and(_legal_T, _legal_T_1) @[Parameters.scala 92:37]
    node _legal_T_3 = or(UInt<1>("h0"), _legal_T_2) @[Parameters.scala 670:31]
    node _legal_T_4 = xor(bundleIn_0.ar.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _legal_T_5 = cvt(_legal_T_4) @[Parameters.scala 137:45]
    node _legal_T_6 = and(_legal_T_5, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _legal_T_7 = asSInt(_legal_T_6) @[Parameters.scala 137:50]
    node _legal_T_8 = eq(_legal_T_7, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _legal_T_9 = and(_legal_T_3, _legal_T_8) @[Parameters.scala 670:56]
    node legal = or(UInt<1>("h0"), _legal_T_9) @[Parameters.scala 672:30]
    wire a : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>} @[Edges.scala 447:17]
    a is invalid @[Edges.scala 447:17]
    a.opcode <= UInt<3>("h4") @[Edges.scala 448:15]
    a.param <= UInt<1>("h0") @[Edges.scala 449:15]
    a.size <= r_size @[Edges.scala 450:15]
    a.source <= r_id @[Edges.scala 451:15]
    a.address <= bundleIn_0.ar.bits.addr @[Edges.scala 452:15]
    node _a_mask_sizeOH_T = or(r_size, UInt<2>("h0")) @[Misc.scala 201:34]
    node a_mask_sizeOH_shiftAmount = bits(_a_mask_sizeOH_T, 0, 0) @[OneHot.scala 63:49]
    node _a_mask_sizeOH_T_1 = dshl(UInt<1>("h1"), a_mask_sizeOH_shiftAmount) @[OneHot.scala 64:12]
    node _a_mask_sizeOH_T_2 = bits(_a_mask_sizeOH_T_1, 1, 0) @[OneHot.scala 64:27]
    node a_mask_sizeOH = or(_a_mask_sizeOH_T_2, UInt<1>("h1")) @[Misc.scala 201:81]
    node _a_mask_T = geq(r_size, UInt<2>("h2")) @[Misc.scala 205:21]
    node a_mask_size = bits(a_mask_sizeOH, 1, 1) @[Misc.scala 208:26]
    node a_mask_bit = bits(bundleIn_0.ar.bits.addr, 1, 1) @[Misc.scala 209:26]
    node a_mask_nbit = eq(a_mask_bit, UInt<1>("h0")) @[Misc.scala 210:20]
    node a_mask_eq = and(UInt<1>("h1"), a_mask_nbit) @[Misc.scala 213:27]
    node _a_mask_acc_T = and(a_mask_size, a_mask_eq) @[Misc.scala 214:38]
    node a_mask_acc = or(_a_mask_T, _a_mask_acc_T) @[Misc.scala 214:29]
    node a_mask_eq_1 = and(UInt<1>("h1"), a_mask_bit) @[Misc.scala 213:27]
    node _a_mask_acc_T_1 = and(a_mask_size, a_mask_eq_1) @[Misc.scala 214:38]
    node a_mask_acc_1 = or(_a_mask_T, _a_mask_acc_T_1) @[Misc.scala 214:29]
    node a_mask_size_1 = bits(a_mask_sizeOH, 0, 0) @[Misc.scala 208:26]
    node a_mask_bit_1 = bits(bundleIn_0.ar.bits.addr, 0, 0) @[Misc.scala 209:26]
    node a_mask_nbit_1 = eq(a_mask_bit_1, UInt<1>("h0")) @[Misc.scala 210:20]
    node a_mask_eq_2 = and(a_mask_eq, a_mask_nbit_1) @[Misc.scala 213:27]
    node _a_mask_acc_T_2 = and(a_mask_size_1, a_mask_eq_2) @[Misc.scala 214:38]
    node a_mask_acc_2 = or(a_mask_acc, _a_mask_acc_T_2) @[Misc.scala 214:29]
    node a_mask_eq_3 = and(a_mask_eq, a_mask_bit_1) @[Misc.scala 213:27]
    node _a_mask_acc_T_3 = and(a_mask_size_1, a_mask_eq_3) @[Misc.scala 214:38]
    node a_mask_acc_3 = or(a_mask_acc, _a_mask_acc_T_3) @[Misc.scala 214:29]
    node a_mask_eq_4 = and(a_mask_eq_1, a_mask_nbit_1) @[Misc.scala 213:27]
    node _a_mask_acc_T_4 = and(a_mask_size_1, a_mask_eq_4) @[Misc.scala 214:38]
    node a_mask_acc_4 = or(a_mask_acc_1, _a_mask_acc_T_4) @[Misc.scala 214:29]
    node a_mask_eq_5 = and(a_mask_eq_1, a_mask_bit_1) @[Misc.scala 213:27]
    node _a_mask_acc_T_5 = and(a_mask_size_1, a_mask_eq_5) @[Misc.scala 214:38]
    node a_mask_acc_5 = or(a_mask_acc_1, _a_mask_acc_T_5) @[Misc.scala 214:29]
    node a_mask_lo = cat(a_mask_acc_3, a_mask_acc_2) @[Cat.scala 33:92]
    node a_mask_hi = cat(a_mask_acc_5, a_mask_acc_4) @[Cat.scala 33:92]
    node _a_mask_T_1 = cat(a_mask_hi, a_mask_lo) @[Cat.scala 33:92]
    a.mask <= _a_mask_T_1 @[Edges.scala 453:15]
    a.data <= UInt<1>("h0") @[Edges.scala 454:15]
    a.corrupt <= UInt<1>("h0") @[Edges.scala 455:15]
    r_out.bits.corrupt <= a.corrupt @[BundleMap.scala 247:19]
    r_out.bits.data <= a.data @[BundleMap.scala 247:19]
    r_out.bits.mask <= a.mask @[BundleMap.scala 247:19]
    r_out.bits.address <= a.address @[BundleMap.scala 247:19]
    r_out.bits.source <= a.source @[BundleMap.scala 247:19]
    r_out.bits.size <= a.size @[BundleMap.scala 247:19]
    r_out.bits.param <= a.param @[BundleMap.scala 247:19]
    r_out.bits.opcode <= a.opcode @[BundleMap.scala 247:19]
    node r_sel_shiftAmount = bits(bundleIn_0.ar.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _r_sel_T = dshl(UInt<1>("h1"), r_sel_shiftAmount) @[OneHot.scala 64:12]
    node r_sel = bits(_r_sel_T, 1, 0) @[OneHot.scala 64:27]
    node _T_10 = bits(r_sel, 0, 0) @[ToTL.scala 126:14]
    node _T_11 = bits(r_sel, 1, 1) @[ToTL.scala 126:14]
    node _T_12 = and(bundleIn_0.ar.ready, bundleIn_0.ar.valid) @[Decoupled.scala 51:35]
    node _T_13 = and(_T_12, _T_10) @[ToTL.scala 127:26]
    when _T_13 : @[ToTL.scala 127:32]
      node _r_count_0_T = add(r_count[0], UInt<1>("h1")) @[ToTL.scala 127:41]
      node _r_count_0_T_1 = tail(_r_count_0_T, 1) @[ToTL.scala 127:41]
      r_count[0] <= _r_count_0_T_1 @[ToTL.scala 127:36]
    node _T_14 = and(bundleIn_0.ar.ready, bundleIn_0.ar.valid) @[Decoupled.scala 51:35]
    node _T_15 = and(_T_14, _T_11) @[ToTL.scala 127:26]
    when _T_15 : @[ToTL.scala 127:32]
      node _r_count_1_T = add(r_count[1], UInt<1>("h1")) @[ToTL.scala 127:41]
      node _r_count_1_T_1 = tail(_r_count_1_T, 1) @[ToTL.scala 127:41]
      r_count[1] <= _r_count_1_T_1 @[ToTL.scala 127:36]
    wire w_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}} @[ToTL.scala 130:30]
    w_out.bits <= x1.a.bits @[ToTL.scala 130:30]
    w_out.valid <= x1.a.valid @[ToTL.scala 130:30]
    w_out.ready <= x1.a.ready @[ToTL.scala 130:30]
    node _w_size1_T = cat(bundleIn_0.aw.bits.len, UInt<8>("hff")) @[Cat.scala 33:92]
    node _w_size1_T_1 = dshl(_w_size1_T, bundleIn_0.aw.bits.size) @[Bundles.scala 33:21]
    node w_size1 = shr(_w_size1_T_1, 8) @[Bundles.scala 33:30]
    node _w_size_T = shl(w_size1, 1) @[package.scala 233:35]
    node _w_size_T_1 = or(_w_size_T, UInt<1>("h1")) @[package.scala 233:40]
    node _w_size_T_2 = cat(UInt<1>("h0"), w_size1) @[Cat.scala 33:92]
    node _w_size_T_3 = not(_w_size_T_2) @[package.scala 233:49]
    node _w_size_T_4 = and(_w_size_T_1, _w_size_T_3) @[package.scala 233:47]
    node w_size_hi = bits(_w_size_T_4, 15, 8) @[OneHot.scala 30:18]
    node w_size_lo = bits(_w_size_T_4, 7, 0) @[OneHot.scala 31:18]
    node _w_size_T_5 = orr(w_size_hi) @[OneHot.scala 32:14]
    node _w_size_T_6 = or(w_size_hi, w_size_lo) @[OneHot.scala 32:28]
    node w_size_hi_1 = bits(_w_size_T_6, 7, 4) @[OneHot.scala 30:18]
    node w_size_lo_1 = bits(_w_size_T_6, 3, 0) @[OneHot.scala 31:18]
    node _w_size_T_7 = orr(w_size_hi_1) @[OneHot.scala 32:14]
    node _w_size_T_8 = or(w_size_hi_1, w_size_lo_1) @[OneHot.scala 32:28]
    node w_size_hi_2 = bits(_w_size_T_8, 3, 2) @[OneHot.scala 30:18]
    node w_size_lo_2 = bits(_w_size_T_8, 1, 0) @[OneHot.scala 31:18]
    node _w_size_T_9 = orr(w_size_hi_2) @[OneHot.scala 32:14]
    node _w_size_T_10 = or(w_size_hi_2, w_size_lo_2) @[OneHot.scala 32:28]
    node _w_size_T_11 = bits(_w_size_T_10, 1, 1) @[CircuitMath.scala 28:8]
    node _w_size_T_12 = cat(_w_size_T_9, _w_size_T_11) @[Cat.scala 33:92]
    node _w_size_T_13 = cat(_w_size_T_7, _w_size_T_12) @[Cat.scala 33:92]
    node w_size = cat(_w_size_T_5, _w_size_T_13) @[Cat.scala 33:92]
    wire _w_count_WIRE : UInt<3>[2] @[ToTL.scala 135:50]
    _w_count_WIRE[0] <= UInt<3>("h0") @[ToTL.scala 135:50]
    _w_count_WIRE[1] <= UInt<3>("h0") @[ToTL.scala 135:50]
    reg w_count : UInt<3>[2], clock with :
      reset => (reset, _w_count_WIRE) @[ToTL.scala 135:28]
    node _w_id_T = bits(w_count[bundleIn_0.aw.bits.id], 1, 0) @[ToTL.scala 139:50]
    node w_id_hi = cat(bundleIn_0.aw.bits.id, _w_id_T) @[Cat.scala 33:92]
    node w_id = cat(w_id_hi, UInt<1>("h1")) @[Cat.scala 33:92]
    node _T_16 = eq(bundleIn_0.aw.valid, UInt<1>("h0")) @[ToTL.scala 142:15]
    node _T_17 = asUInt(asSInt(UInt<15>("h7fff"))) @[package.scala 235:64]
    node _T_18 = dshl(_T_17, w_size) @[package.scala 235:71]
    node _T_19 = bits(_T_18, 14, 0) @[package.scala 235:76]
    node _T_20 = not(_T_19) @[package.scala 235:46]
    node _T_21 = eq(w_size1, _T_20) @[ToTL.scala 142:39]
    node _T_22 = or(_T_16, _T_21) @[ToTL.scala 142:28]
    node _T_23 = asUInt(reset) @[ToTL.scala 142:14]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[ToTL.scala 142:14]
    when _T_24 : @[ToTL.scala 142:14]
      node _T_25 = eq(_T_22, UInt<1>("h0")) @[ToTL.scala 142:14]
      when _T_25 : @[ToTL.scala 142:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToTL.scala:142 assert (!in.aw.valid || w_size1 === UIntToOH1(w_size, beatCountBits)) // because aligned\n") : printf_1 @[ToTL.scala 142:14]
      assert(clock, _T_22, UInt<1>("h1"), "") : assert_1 @[ToTL.scala 142:14]
    node _T_26 = eq(bundleIn_0.aw.valid, UInt<1>("h0")) @[ToTL.scala 143:15]
    node _T_27 = eq(bundleIn_0.aw.bits.len, UInt<1>("h0")) @[ToTL.scala 143:46]
    node _T_28 = or(_T_26, _T_27) @[ToTL.scala 143:28]
    node _T_29 = eq(bundleIn_0.aw.bits.size, UInt<2>("h2")) @[ToTL.scala 143:73]
    node _T_30 = or(_T_28, _T_29) @[ToTL.scala 143:54]
    node _T_31 = asUInt(reset) @[ToTL.scala 143:14]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[ToTL.scala 143:14]
    when _T_32 : @[ToTL.scala 143:14]
      node _T_33 = eq(_T_30, UInt<1>("h0")) @[ToTL.scala 143:14]
      when _T_33 : @[ToTL.scala 143:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at ToTL.scala:143 assert (!in.aw.valid || in.aw.bits.len === 0.U || in.aw.bits.size === log2Ceil(beatBytes).U) // because aligned\n") : printf_2 @[ToTL.scala 143:14]
      assert(clock, _T_30, UInt<1>("h1"), "") : assert_2 @[ToTL.scala 143:14]
    node _bundleIn_0_aw_ready_T = and(w_out.ready, bundleIn_0.w.valid) @[ToTL.scala 144:34]
    node _bundleIn_0_aw_ready_T_1 = and(_bundleIn_0_aw_ready_T, bundleIn_0.w.bits.last) @[ToTL.scala 144:48]
    bundleIn_0.aw.ready <= _bundleIn_0_aw_ready_T_1 @[ToTL.scala 144:19]
    node _bundleIn_0_w_ready_T = and(w_out.ready, bundleIn_0.aw.valid) @[ToTL.scala 145:34]
    bundleIn_0.w.ready <= _bundleIn_0_w_ready_T @[ToTL.scala 145:19]
    node _w_out_valid_T = and(bundleIn_0.aw.valid, bundleIn_0.w.valid) @[ToTL.scala 146:34]
    w_out.valid <= _w_out_valid_T @[ToTL.scala 146:19]
    node _legal_T_10 = leq(UInt<1>("h0"), w_size) @[Parameters.scala 92:32]
    node _legal_T_11 = leq(w_size, UInt<2>("h2")) @[Parameters.scala 92:42]
    node _legal_T_12 = and(_legal_T_10, _legal_T_11) @[Parameters.scala 92:37]
    node _legal_T_13 = or(UInt<1>("h0"), _legal_T_12) @[Parameters.scala 670:31]
    node _legal_T_14 = xor(bundleIn_0.aw.bits.addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _legal_T_15 = cvt(_legal_T_14) @[Parameters.scala 137:45]
    node _legal_T_16 = and(_legal_T_15, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _legal_T_17 = asSInt(_legal_T_16) @[Parameters.scala 137:50]
    node _legal_T_18 = eq(_legal_T_17, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _legal_T_19 = and(_legal_T_13, _legal_T_18) @[Parameters.scala 670:56]
    node legal_1 = or(UInt<1>("h0"), _legal_T_19) @[Parameters.scala 672:30]
    wire a_1 : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>} @[Edges.scala 483:17]
    a_1 is invalid @[Edges.scala 483:17]
    a_1.opcode <= UInt<1>("h1") @[Edges.scala 484:15]
    a_1.param <= UInt<1>("h0") @[Edges.scala 485:15]
    a_1.size <= w_size @[Edges.scala 486:15]
    a_1.source <= w_id @[Edges.scala 487:15]
    a_1.address <= bundleIn_0.aw.bits.addr @[Edges.scala 488:15]
    a_1.mask <= bundleIn_0.w.bits.strb @[Edges.scala 489:15]
    a_1.data <= bundleIn_0.w.bits.data @[Edges.scala 490:15]
    a_1.corrupt <= UInt<1>("h0") @[Edges.scala 491:15]
    w_out.bits.corrupt <= a_1.corrupt @[BundleMap.scala 247:19]
    w_out.bits.data <= a_1.data @[BundleMap.scala 247:19]
    w_out.bits.mask <= a_1.mask @[BundleMap.scala 247:19]
    w_out.bits.address <= a_1.address @[BundleMap.scala 247:19]
    w_out.bits.source <= a_1.source @[BundleMap.scala 247:19]
    w_out.bits.size <= a_1.size @[BundleMap.scala 247:19]
    w_out.bits.param <= a_1.param @[BundleMap.scala 247:19]
    w_out.bits.opcode <= a_1.opcode @[BundleMap.scala 247:19]
    node w_sel_shiftAmount = bits(bundleIn_0.aw.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _w_sel_T = dshl(UInt<1>("h1"), w_sel_shiftAmount) @[OneHot.scala 64:12]
    node w_sel = bits(_w_sel_T, 1, 0) @[OneHot.scala 64:27]
    node _T_34 = bits(w_sel, 0, 0) @[ToTL.scala 162:14]
    node _T_35 = bits(w_sel, 1, 1) @[ToTL.scala 162:14]
    node _T_36 = and(bundleIn_0.aw.ready, bundleIn_0.aw.valid) @[Decoupled.scala 51:35]
    node _T_37 = and(_T_36, _T_34) @[ToTL.scala 163:26]
    when _T_37 : @[ToTL.scala 163:32]
      node _w_count_0_T = add(w_count[0], UInt<1>("h1")) @[ToTL.scala 163:41]
      node _w_count_0_T_1 = tail(_w_count_0_T, 1) @[ToTL.scala 163:41]
      w_count[0] <= _w_count_0_T_1 @[ToTL.scala 163:36]
    node _T_38 = and(bundleIn_0.aw.ready, bundleIn_0.aw.valid) @[Decoupled.scala 51:35]
    node _T_39 = and(_T_38, _T_35) @[ToTL.scala 163:26]
    when _T_39 : @[ToTL.scala 163:32]
      node _w_count_1_T = add(w_count[1], UInt<1>("h1")) @[ToTL.scala 163:41]
      node _w_count_1_T_1 = tail(_w_count_1_T, 1) @[ToTL.scala 163:41]
      w_count[1] <= _w_count_1_T_1 @[ToTL.scala 163:36]
    wire sink_ACancel : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}, flip ready : UInt<1>} @[Arbiter.scala 67:28]
    wire out : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out.earlyValid <= r_out.valid @[ReadyValidCancel.scala 69:20]
    out.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out.bits <= r_out.bits @[ReadyValidCancel.scala 71:14]
    r_out.ready <= out.ready @[ReadyValidCancel.scala 72:14]
    wire out_1 : { earlyValid : UInt<1>, lateCancel : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}, flip ready : UInt<1>} @[ReadyValidCancel.scala 68:19]
    out_1.earlyValid <= w_out.valid @[ReadyValidCancel.scala 69:20]
    out_1.lateCancel <= UInt<1>("h0") @[ReadyValidCancel.scala 70:20]
    out_1.bits <= w_out.bits @[ReadyValidCancel.scala 71:14]
    w_out.ready <= out_1.ready @[ReadyValidCancel.scala 72:14]
    reg beatsLeft : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Arbiter.scala 88:30]
    node idle = eq(beatsLeft, UInt<1>("h0")) @[Arbiter.scala 89:28]
    node latch = and(idle, sink_ACancel.ready) @[Arbiter.scala 90:24]
    node _validQuals_T = eq(out.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_0 = and(out.earlyValid, _validQuals_T) @[ReadyValidCancel.scala 21:38]
    node _validQuals_T_1 = eq(out_1.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node validQuals_1 = and(out_1.earlyValid, _validQuals_T_1) @[ReadyValidCancel.scala 21:38]
    node _readys_T = cat(out_1.earlyValid, out.earlyValid) @[Cat.scala 33:92]
    node readys_valid = bits(_readys_T, 1, 0) @[Arbiter.scala 22:23]
    node _readys_T_1 = eq(readys_valid, _readys_T) @[Arbiter.scala 23:19]
    node _readys_T_2 = asUInt(reset) @[Arbiter.scala 23:12]
    node _readys_T_3 = eq(_readys_T_2, UInt<1>("h0")) @[Arbiter.scala 23:12]
    when _readys_T_3 : @[Arbiter.scala 23:12]
      node _readys_T_4 = eq(_readys_T_1, UInt<1>("h0")) @[Arbiter.scala 23:12]
      when _readys_T_4 : @[Arbiter.scala 23:12]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:23 assert (valid === valids)\n") : readys_printf @[Arbiter.scala 23:12]
      assert(clock, _readys_T_1, UInt<1>("h1"), "") : readys_assert @[Arbiter.scala 23:12]
    reg readys_mask : UInt<2>, clock with :
      reset => (reset, UInt<2>("h3")) @[Arbiter.scala 24:23]
    node _readys_filter_T = not(readys_mask) @[Arbiter.scala 25:30]
    node _readys_filter_T_1 = and(readys_valid, _readys_filter_T) @[Arbiter.scala 25:28]
    node readys_filter = cat(_readys_filter_T_1, readys_valid) @[Cat.scala 33:92]
    node _readys_unready_T = shr(readys_filter, 1) @[package.scala 254:48]
    node _readys_unready_T_1 = or(readys_filter, _readys_unready_T) @[package.scala 254:43]
    node _readys_unready_T_2 = bits(_readys_unready_T_1, 3, 0) @[package.scala 255:17]
    node _readys_unready_T_3 = shr(_readys_unready_T_2, 1) @[Arbiter.scala 26:52]
    node _readys_unready_T_4 = shl(readys_mask, 2) @[Arbiter.scala 26:66]
    node readys_unready = or(_readys_unready_T_3, _readys_unready_T_4) @[Arbiter.scala 26:58]
    node _readys_readys_T = shr(readys_unready, 2) @[Arbiter.scala 27:29]
    node _readys_readys_T_1 = bits(readys_unready, 1, 0) @[Arbiter.scala 27:48]
    node _readys_readys_T_2 = and(_readys_readys_T, _readys_readys_T_1) @[Arbiter.scala 27:39]
    node readys_readys = not(_readys_readys_T_2) @[Arbiter.scala 27:18]
    node _readys_T_5 = orr(readys_valid) @[Arbiter.scala 28:27]
    node _readys_T_6 = and(latch, _readys_T_5) @[Arbiter.scala 28:18]
    when _readys_T_6 : @[Arbiter.scala 28:32]
      node _readys_mask_T = and(readys_readys, readys_valid) @[Arbiter.scala 29:29]
      node _readys_mask_T_1 = shl(_readys_mask_T, 1) @[package.scala 245:48]
      node _readys_mask_T_2 = bits(_readys_mask_T_1, 1, 0) @[package.scala 245:53]
      node _readys_mask_T_3 = or(_readys_mask_T, _readys_mask_T_2) @[package.scala 245:43]
      node _readys_mask_T_4 = bits(_readys_mask_T_3, 1, 0) @[package.scala 246:17]
      readys_mask <= _readys_mask_T_4 @[Arbiter.scala 29:12]
    node _readys_T_7 = bits(readys_readys, 1, 0) @[Arbiter.scala 31:11]
    node _readys_T_8 = bits(_readys_T_7, 0, 0) @[Arbiter.scala 96:86]
    node _readys_T_9 = bits(_readys_T_7, 1, 1) @[Arbiter.scala 96:86]
    wire readys : UInt<1>[2] @[Arbiter.scala 96:27]
    readys[0] <= _readys_T_8 @[Arbiter.scala 96:27]
    readys[1] <= _readys_T_9 @[Arbiter.scala 96:27]
    node _earlyWinner_T = and(readys[0], out.earlyValid) @[Arbiter.scala 98:79]
    node _earlyWinner_T_1 = and(readys[1], out_1.earlyValid) @[Arbiter.scala 98:79]
    wire earlyWinner : UInt<1>[2] @[Arbiter.scala 98:32]
    earlyWinner[0] <= _earlyWinner_T @[Arbiter.scala 98:32]
    earlyWinner[1] <= _earlyWinner_T_1 @[Arbiter.scala 98:32]
    node _winnerQual_T = and(readys[0], validQuals_0) @[Arbiter.scala 99:79]
    node _winnerQual_T_1 = and(readys[1], validQuals_1) @[Arbiter.scala 99:79]
    wire winnerQual : UInt<1>[2] @[Arbiter.scala 99:32]
    winnerQual[0] <= _winnerQual_T @[Arbiter.scala 99:32]
    winnerQual[1] <= _winnerQual_T_1 @[Arbiter.scala 99:32]
    node prefixOR_1 = or(UInt<1>("h0"), earlyWinner[0]) @[Arbiter.scala 105:53]
    node _prefixOR_T = or(prefixOR_1, earlyWinner[1]) @[Arbiter.scala 105:53]
    node _T_40 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_41 = eq(earlyWinner[0], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_42 = or(_T_40, _T_41) @[Arbiter.scala 106:64]
    node _T_43 = eq(prefixOR_1, UInt<1>("h0")) @[Arbiter.scala 106:61]
    node _T_44 = eq(earlyWinner[1], UInt<1>("h0")) @[Arbiter.scala 106:67]
    node _T_45 = or(_T_43, _T_44) @[Arbiter.scala 106:64]
    node _T_46 = and(_T_42, _T_45) @[Arbiter.scala 106:82]
    node _T_47 = asUInt(reset) @[Arbiter.scala 106:13]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[Arbiter.scala 106:13]
    when _T_48 : @[Arbiter.scala 106:13]
      node _T_49 = eq(_T_46, UInt<1>("h0")) @[Arbiter.scala 106:13]
      when _T_49 : @[Arbiter.scala 106:13]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:106 assert((prefixOR zip earlyWinner) map { case (p,w) => !p || !w } reduce {_ && _})\n") : printf_3 @[Arbiter.scala 106:13]
      assert(clock, _T_46, UInt<1>("h1"), "") : assert_3 @[Arbiter.scala 106:13]
    node _T_50 = or(out.earlyValid, out_1.earlyValid) @[Arbiter.scala 108:36]
    node _T_51 = eq(_T_50, UInt<1>("h0")) @[Arbiter.scala 108:15]
    node _T_52 = or(earlyWinner[0], earlyWinner[1]) @[Arbiter.scala 108:64]
    node _T_53 = or(_T_51, _T_52) @[Arbiter.scala 108:41]
    node _T_54 = asUInt(reset) @[Arbiter.scala 108:14]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[Arbiter.scala 108:14]
    when _T_55 : @[Arbiter.scala 108:14]
      node _T_56 = eq(_T_53, UInt<1>("h0")) @[Arbiter.scala 108:14]
      when _T_56 : @[Arbiter.scala 108:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:108 assert (!earlyValids.reduce(_||_) || earlyWinner.reduce(_||_))\n") : printf_4 @[Arbiter.scala 108:14]
      assert(clock, _T_53, UInt<1>("h1"), "") : assert_4 @[Arbiter.scala 108:14]
    node _T_57 = or(validQuals_0, validQuals_1) @[Arbiter.scala 109:36]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[Arbiter.scala 109:15]
    node _T_59 = or(validQuals_0, validQuals_1) @[Arbiter.scala 109:64]
    node _T_60 = or(_T_58, _T_59) @[Arbiter.scala 109:41]
    node _T_61 = asUInt(reset) @[Arbiter.scala 109:14]
    node _T_62 = eq(_T_61, UInt<1>("h0")) @[Arbiter.scala 109:14]
    when _T_62 : @[Arbiter.scala 109:14]
      node _T_63 = eq(_T_60, UInt<1>("h0")) @[Arbiter.scala 109:14]
      when _T_63 : @[Arbiter.scala 109:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Arbiter.scala:109 assert (!validQuals .reduce(_||_) || validQuals .reduce(_||_))\n") : printf_5 @[Arbiter.scala 109:14]
      assert(clock, _T_60, UInt<1>("h1"), "") : assert_5 @[Arbiter.scala 109:14]
    node maskedBeats_0 = mux(winnerQual[0], UInt<1>("h0"), UInt<1>("h0")) @[Arbiter.scala 112:73]
    node maskedBeats_1 = mux(winnerQual[1], bundleIn_0.aw.bits.len, UInt<1>("h0")) @[Arbiter.scala 112:73]
    node initBeats = or(maskedBeats_0, maskedBeats_1) @[Arbiter.scala 113:44]
    node _beatsLeft_T = eq(sink_ACancel.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _beatsLeft_T_1 = and(sink_ACancel.earlyValid, _beatsLeft_T) @[ReadyValidCancel.scala 21:38]
    node _beatsLeft_T_2 = and(sink_ACancel.ready, _beatsLeft_T_1) @[ReadyValidCancel.scala 49:33]
    node _beatsLeft_T_3 = sub(beatsLeft, _beatsLeft_T_2) @[Arbiter.scala 114:52]
    node _beatsLeft_T_4 = tail(_beatsLeft_T_3, 1) @[Arbiter.scala 114:52]
    node _beatsLeft_T_5 = mux(latch, initBeats, _beatsLeft_T_4) @[Arbiter.scala 114:23]
    beatsLeft <= _beatsLeft_T_5 @[Arbiter.scala 114:17]
    wire _state_WIRE : UInt<1>[2] @[Arbiter.scala 117:34]
    _state_WIRE[0] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    _state_WIRE[1] <= UInt<1>("h0") @[Arbiter.scala 117:34]
    reg state : UInt<1>[2], clock with :
      reset => (reset, _state_WIRE) @[Arbiter.scala 117:26]
    node muxStateEarly = mux(idle, earlyWinner, state) @[Arbiter.scala 118:30]
    node muxStateQual = mux(idle, winnerQual, state) @[Arbiter.scala 119:30]
    state <= muxStateQual @[Arbiter.scala 120:13]
    node allowed = mux(idle, readys, state) @[Arbiter.scala 122:24]
    node _out_ready_T = and(sink_ACancel.ready, allowed[0]) @[Arbiter.scala 124:31]
    out.ready <= _out_ready_T @[Arbiter.scala 124:17]
    node _out_ready_T_1 = and(sink_ACancel.ready, allowed[1]) @[Arbiter.scala 124:31]
    out_1.ready <= _out_ready_T_1 @[Arbiter.scala 124:17]
    node _sink_ACancel_earlyValid_T = or(out.earlyValid, out_1.earlyValid) @[Arbiter.scala 126:56]
    node _sink_ACancel_earlyValid_T_1 = mux(state[0], out.earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _sink_ACancel_earlyValid_T_2 = mux(state[1], out_1.earlyValid, UInt<1>("h0")) @[Mux.scala 27:73]
    node _sink_ACancel_earlyValid_T_3 = or(_sink_ACancel_earlyValid_T_1, _sink_ACancel_earlyValid_T_2) @[Mux.scala 27:73]
    wire _sink_ACancel_earlyValid_WIRE : UInt<1> @[Mux.scala 27:73]
    _sink_ACancel_earlyValid_WIRE <= _sink_ACancel_earlyValid_T_3 @[Mux.scala 27:73]
    node _sink_ACancel_earlyValid_T_4 = mux(idle, _sink_ACancel_earlyValid_T, _sink_ACancel_earlyValid_WIRE) @[Arbiter.scala 126:29]
    sink_ACancel.earlyValid <= _sink_ACancel_earlyValid_T_4 @[Arbiter.scala 126:23]
    node _sink_ACancel_lateCancel_T = mux(muxStateEarly[0], out.lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _sink_ACancel_lateCancel_T_1 = mux(muxStateEarly[1], out_1.lateCancel, UInt<1>("h0")) @[Mux.scala 27:73]
    node _sink_ACancel_lateCancel_T_2 = or(_sink_ACancel_lateCancel_T, _sink_ACancel_lateCancel_T_1) @[Mux.scala 27:73]
    wire _sink_ACancel_lateCancel_WIRE : UInt<1> @[Mux.scala 27:73]
    _sink_ACancel_lateCancel_WIRE <= _sink_ACancel_lateCancel_T_2 @[Mux.scala 27:73]
    sink_ACancel.lateCancel <= _sink_ACancel_lateCancel_WIRE @[Arbiter.scala 127:23]
    wire _WIRE : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>} @[Mux.scala 27:73]
    node _T_64 = mux(muxStateEarly[0], out.bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_65 = mux(muxStateEarly[1], out_1.bits.corrupt, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_66 = or(_T_64, _T_65) @[Mux.scala 27:73]
    wire _WIRE_1 : UInt<1> @[Mux.scala 27:73]
    _WIRE_1 <= _T_66 @[Mux.scala 27:73]
    _WIRE.corrupt <= _WIRE_1 @[Mux.scala 27:73]
    node _T_67 = mux(muxStateEarly[0], out.bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_68 = mux(muxStateEarly[1], out_1.bits.data, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_69 = or(_T_67, _T_68) @[Mux.scala 27:73]
    wire _WIRE_2 : UInt<32> @[Mux.scala 27:73]
    _WIRE_2 <= _T_69 @[Mux.scala 27:73]
    _WIRE.data <= _WIRE_2 @[Mux.scala 27:73]
    node _T_70 = mux(muxStateEarly[0], out.bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_71 = mux(muxStateEarly[1], out_1.bits.mask, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_72 = or(_T_70, _T_71) @[Mux.scala 27:73]
    wire _WIRE_3 : UInt<4> @[Mux.scala 27:73]
    _WIRE_3 <= _T_72 @[Mux.scala 27:73]
    _WIRE.mask <= _WIRE_3 @[Mux.scala 27:73]
    wire _WIRE_4 : { } @[Mux.scala 27:73]
    _WIRE.echo <= _WIRE_4 @[Mux.scala 27:73]
    wire _WIRE_5 : { } @[Mux.scala 27:73]
    _WIRE.user <= _WIRE_5 @[Mux.scala 27:73]
    node _T_73 = mux(muxStateEarly[0], out.bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_74 = mux(muxStateEarly[1], out_1.bits.address, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_75 = or(_T_73, _T_74) @[Mux.scala 27:73]
    wire _WIRE_6 : UInt<16> @[Mux.scala 27:73]
    _WIRE_6 <= _T_75 @[Mux.scala 27:73]
    _WIRE.address <= _WIRE_6 @[Mux.scala 27:73]
    node _T_76 = mux(muxStateEarly[0], out.bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_77 = mux(muxStateEarly[1], out_1.bits.source, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_78 = or(_T_76, _T_77) @[Mux.scala 27:73]
    wire _WIRE_7 : UInt<4> @[Mux.scala 27:73]
    _WIRE_7 <= _T_78 @[Mux.scala 27:73]
    _WIRE.source <= _WIRE_7 @[Mux.scala 27:73]
    node _T_79 = mux(muxStateEarly[0], out.bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_80 = mux(muxStateEarly[1], out_1.bits.size, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_81 = or(_T_79, _T_80) @[Mux.scala 27:73]
    wire _WIRE_8 : UInt<2> @[Mux.scala 27:73]
    _WIRE_8 <= _T_81 @[Mux.scala 27:73]
    _WIRE.size <= _WIRE_8 @[Mux.scala 27:73]
    node _T_82 = mux(muxStateEarly[0], out.bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_83 = mux(muxStateEarly[1], out_1.bits.param, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_84 = or(_T_82, _T_83) @[Mux.scala 27:73]
    wire _WIRE_9 : UInt<3> @[Mux.scala 27:73]
    _WIRE_9 <= _T_84 @[Mux.scala 27:73]
    _WIRE.param <= _WIRE_9 @[Mux.scala 27:73]
    node _T_85 = mux(muxStateEarly[0], out.bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_86 = mux(muxStateEarly[1], out_1.bits.opcode, UInt<1>("h0")) @[Mux.scala 27:73]
    node _T_87 = or(_T_85, _T_86) @[Mux.scala 27:73]
    wire _WIRE_10 : UInt<3> @[Mux.scala 27:73]
    _WIRE_10 <= _T_87 @[Mux.scala 27:73]
    _WIRE.opcode <= _WIRE_10 @[Mux.scala 27:73]
    sink_ACancel.bits.corrupt <= _WIRE.corrupt @[BundleMap.scala 247:19]
    sink_ACancel.bits.data <= _WIRE.data @[BundleMap.scala 247:19]
    sink_ACancel.bits.mask <= _WIRE.mask @[BundleMap.scala 247:19]
    sink_ACancel.bits.address <= _WIRE.address @[BundleMap.scala 247:19]
    sink_ACancel.bits.source <= _WIRE.source @[BundleMap.scala 247:19]
    sink_ACancel.bits.size <= _WIRE.size @[BundleMap.scala 247:19]
    sink_ACancel.bits.param <= _WIRE.param @[BundleMap.scala 247:19]
    sink_ACancel.bits.opcode <= _WIRE.opcode @[BundleMap.scala 247:19]
    wire out_2 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}} @[ReadyValidCancel.scala 53:19]
    node _out_valid_T = eq(sink_ACancel.lateCancel, UInt<1>("h0")) @[ReadyValidCancel.scala 21:41]
    node _out_valid_T_1 = and(sink_ACancel.earlyValid, _out_valid_T) @[ReadyValidCancel.scala 21:38]
    out_2.valid <= _out_valid_T_1 @[ReadyValidCancel.scala 54:15]
    out_2.bits <= sink_ACancel.bits @[ReadyValidCancel.scala 55:15]
    sink_ACancel.ready <= out_2.ready @[ReadyValidCancel.scala 56:11]
    x1.a.bits.corrupt <= out_2.bits.corrupt @[BundleMap.scala 247:19]
    x1.a.bits.data <= out_2.bits.data @[BundleMap.scala 247:19]
    x1.a.bits.mask <= out_2.bits.mask @[BundleMap.scala 247:19]
    x1.a.bits.address <= out_2.bits.address @[BundleMap.scala 247:19]
    x1.a.bits.source <= out_2.bits.source @[BundleMap.scala 247:19]
    x1.a.bits.size <= out_2.bits.size @[BundleMap.scala 247:19]
    x1.a.bits.param <= out_2.bits.param @[BundleMap.scala 247:19]
    x1.a.bits.opcode <= out_2.bits.opcode @[BundleMap.scala 247:19]
    x1.a.valid <= out_2.valid @[BundleMap.scala 247:19]
    out_2.ready <= x1.a.ready @[BundleMap.scala 247:19]
    wire ok_b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}} @[ToTL.scala 168:30]
    ok_b.bits.resp <= bundleIn_0.b.bits.resp @[ToTL.scala 168:30]
    ok_b.bits.id <= bundleIn_0.b.bits.id @[ToTL.scala 168:30]
    ok_b.valid <= bundleIn_0.b.valid @[ToTL.scala 168:30]
    ok_b.ready <= bundleIn_0.b.ready @[ToTL.scala 168:30]
    wire ok_r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}} @[ToTL.scala 169:30]
    ok_r.bits.last <= bundleIn_0.r.bits.last @[ToTL.scala 169:30]
    ok_r.bits.resp <= bundleIn_0.r.bits.resp @[ToTL.scala 169:30]
    ok_r.bits.data <= bundleIn_0.r.bits.data @[ToTL.scala 169:30]
    ok_r.bits.id <= bundleIn_0.r.bits.id @[ToTL.scala 169:30]
    ok_r.valid <= bundleIn_0.r.valid @[ToTL.scala 169:30]
    ok_r.ready <= bundleIn_0.r.ready @[ToTL.scala 169:30]
    node _d_resp_T = or(x1.d.bits.denied, x1.d.bits.corrupt) @[ToTL.scala 171:42]
    node d_resp = mux(_d_resp_T, UInt<2>("h2"), UInt<2>("h0")) @[ToTL.scala 171:23]
    node d_hasData = bits(x1.d.bits.opcode, 0, 0) @[Edges.scala 105:36]
    node _d_last_T = and(x1.d.ready, x1.d.valid) @[Decoupled.scala 51:35]
    node _d_last_beats1_decode_T = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 235:64]
    node _d_last_beats1_decode_T_1 = dshl(_d_last_beats1_decode_T, x1.d.bits.size) @[package.scala 235:71]
    node _d_last_beats1_decode_T_2 = bits(_d_last_beats1_decode_T_1, 1, 0) @[package.scala 235:76]
    node _d_last_beats1_decode_T_3 = not(_d_last_beats1_decode_T_2) @[package.scala 235:46]
    node d_last_beats1_decode = shr(_d_last_beats1_decode_T_3, 2) @[Edges.scala 219:59]
    node d_last_beats1_opdata = bits(x1.d.bits.opcode, 0, 0) @[Edges.scala 105:36]
    node d_last_beats1 = mux(d_last_beats1_opdata, d_last_beats1_decode, UInt<1>("h0")) @[Edges.scala 220:14]
    reg d_last_counter : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Edges.scala 228:27]
    node _d_last_counter1_T = sub(d_last_counter, UInt<1>("h1")) @[Edges.scala 229:28]
    node d_last_counter1 = tail(_d_last_counter1_T, 1) @[Edges.scala 229:28]
    node d_last_first = eq(d_last_counter, UInt<1>("h0")) @[Edges.scala 230:25]
    node _d_last_last_T = eq(d_last_counter, UInt<1>("h1")) @[Edges.scala 231:25]
    node _d_last_last_T_1 = eq(d_last_beats1, UInt<1>("h0")) @[Edges.scala 231:47]
    node d_last = or(_d_last_last_T, _d_last_last_T_1) @[Edges.scala 231:37]
    node d_last_done = and(d_last, _d_last_T) @[Edges.scala 232:22]
    node _d_last_count_T = not(d_last_counter1) @[Edges.scala 233:27]
    node d_last_count = and(d_last_beats1, _d_last_count_T) @[Edges.scala 233:25]
    when _d_last_T : @[Edges.scala 234:17]
      node _d_last_counter_T = mux(d_last_first, d_last_beats1, d_last_counter1) @[Edges.scala 235:21]
      d_last_counter <= _d_last_counter_T @[Edges.scala 235:15]
    node _x1_d_ready_T = mux(d_hasData, ok_r.ready, ok_b.ready) @[ToTL.scala 175:25]
    x1.d.ready <= _x1_d_ready_T @[ToTL.scala 175:19]
    node _ok_r_valid_T = and(x1.d.valid, d_hasData) @[ToTL.scala 176:33]
    ok_r.valid <= _ok_r_valid_T @[ToTL.scala 176:18]
    node _ok_b_valid_T = eq(d_hasData, UInt<1>("h0")) @[ToTL.scala 177:36]
    node _ok_b_valid_T_1 = and(x1.d.valid, _ok_b_valid_T) @[ToTL.scala 177:33]
    ok_b.valid <= _ok_b_valid_T_1 @[ToTL.scala 177:18]
    node _ok_r_bits_id_T = shr(x1.d.bits.source, 3) @[ToTL.scala 179:43]
    ok_r.bits.id <= _ok_r_bits_id_T @[ToTL.scala 179:22]
    ok_r.bits.data <= x1.d.bits.data @[ToTL.scala 180:22]
    ok_r.bits.resp <= d_resp @[ToTL.scala 181:22]
    ok_r.bits.last <= d_last @[ToTL.scala 182:22]
    inst deq of Queue_171 @[Decoupled.scala 375:21]
    deq.clock <= clock
    deq.reset <= reset
    deq.io.enq.valid <= ok_r.valid @[Decoupled.scala 377:22]
    deq.io.enq.bits.last <= ok_r.bits.last @[Decoupled.scala 378:21]
    deq.io.enq.bits.resp <= ok_r.bits.resp @[Decoupled.scala 378:21]
    deq.io.enq.bits.data <= ok_r.bits.data @[Decoupled.scala 378:21]
    deq.io.enq.bits.id <= ok_r.bits.id @[Decoupled.scala 378:21]
    ok_r.ready <= deq.io.enq.ready @[Decoupled.scala 379:17]
    wire irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}} @[Decoupled.scala 414:19]
    irr.bits <= deq.io.deq.bits @[Decoupled.scala 415:14]
    irr.valid <= deq.io.deq.valid @[Decoupled.scala 416:15]
    deq.io.deq.ready <= irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r.bits.last <= irr.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.resp <= irr.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= irr.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= irr.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= irr.valid @[BundleMap.scala 247:19]
    irr.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    node _ok_b_bits_id_T = shr(x1.d.bits.source, 3) @[ToTL.scala 188:43]
    ok_b.bits.id <= _ok_b_bits_id_T @[ToTL.scala 188:22]
    ok_b.bits.resp <= d_resp @[ToTL.scala 189:22]
    inst q_b_deq of Queue_172 @[Decoupled.scala 375:21]
    q_b_deq.clock <= clock
    q_b_deq.reset <= reset
    q_b_deq.io.enq.valid <= ok_b.valid @[Decoupled.scala 377:22]
    q_b_deq.io.enq.bits.resp <= ok_b.bits.resp @[Decoupled.scala 378:21]
    q_b_deq.io.enq.bits.id <= ok_b.bits.id @[Decoupled.scala 378:21]
    ok_b.ready <= q_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire q_b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    q_b.bits <= q_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    q_b.valid <= q_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    q_b_deq.io.deq.ready <= q_b.ready @[Decoupled.scala 417:15]
    wire _b_count_WIRE : UInt<3>[2] @[ToTL.scala 197:50]
    _b_count_WIRE[0] <= UInt<3>("h0") @[ToTL.scala 197:50]
    _b_count_WIRE[1] <= UInt<3>("h0") @[ToTL.scala 197:50]
    reg b_count : UInt<3>[2], clock with :
      reset => (reset, _b_count_WIRE) @[ToTL.scala 197:28]
    node b_allow = neq(b_count[bundleIn_0.b.bits.id], w_count[bundleIn_0.b.bits.id]) @[ToTL.scala 198:43]
    node b_sel_shiftAmount = bits(bundleIn_0.b.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _b_sel_T = dshl(UInt<1>("h1"), b_sel_shiftAmount) @[OneHot.scala 64:12]
    node b_sel = bits(_b_sel_T, 1, 0) @[OneHot.scala 64:27]
    node _T_88 = bits(b_sel, 0, 0) @[ToTL.scala 201:14]
    node _T_89 = bits(b_sel, 1, 1) @[ToTL.scala 201:14]
    node _T_90 = and(bundleIn_0.b.ready, bundleIn_0.b.valid) @[Decoupled.scala 51:35]
    node _T_91 = and(_T_90, _T_88) @[ToTL.scala 202:25]
    when _T_91 : @[ToTL.scala 202:31]
      node _b_count_0_T = add(b_count[0], UInt<1>("h1")) @[ToTL.scala 202:40]
      node _b_count_0_T_1 = tail(_b_count_0_T, 1) @[ToTL.scala 202:40]
      b_count[0] <= _b_count_0_T_1 @[ToTL.scala 202:35]
    node _T_92 = and(bundleIn_0.b.ready, bundleIn_0.b.valid) @[Decoupled.scala 51:35]
    node _T_93 = and(_T_92, _T_89) @[ToTL.scala 202:25]
    when _T_93 : @[ToTL.scala 202:31]
      node _b_count_1_T = add(b_count[1], UInt<1>("h1")) @[ToTL.scala 202:40]
      node _b_count_1_T_1 = tail(_b_count_1_T, 1) @[ToTL.scala 202:40]
      b_count[1] <= _b_count_1_T_1 @[ToTL.scala 202:35]
    bundleIn_0.b.bits.resp <= q_b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= q_b.bits.id @[BundleMap.scala 247:19]
    node _bundleIn_0_b_valid_T = and(q_b.valid, b_allow) @[ToTL.scala 206:31]
    bundleIn_0.b.valid <= _bundleIn_0_b_valid_T @[ToTL.scala 206:18]
    node _q_b_ready_T = and(bundleIn_0.b.ready, b_allow) @[ToTL.scala 207:31]
    q_b.ready <= _q_b_ready_T @[ToTL.scala 207:17]
    wire _WIRE_11 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, address : UInt<16>, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}} @[Bundles.scala 259:74]
    _WIRE_11.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.data <= UInt<32>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.mask <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.address <= UInt<16>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.source <= UInt<4>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.size <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.param <= UInt<2>("h0") @[Bundles.scala 259:74]
    _WIRE_11.bits.opcode <= UInt<3>("h0") @[Bundles.scala 259:74]
    _WIRE_11.valid <= UInt<1>("h0") @[Bundles.scala 259:74]
    _WIRE_11.ready <= UInt<1>("h0") @[Bundles.scala 259:74]
    wire _WIRE_12 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<4>, address : UInt<16>, mask : UInt<4>, data : UInt<32>, corrupt : UInt<1>}} @[Bundles.scala 259:61]
    _WIRE_12.bits <= _WIRE_11.bits @[Bundles.scala 259:61]
    _WIRE_12.valid <= _WIRE_11.valid @[Bundles.scala 259:61]
    _WIRE_12.ready <= _WIRE_11.ready @[Bundles.scala 259:61]
    _WIRE_12.ready <= UInt<1>("h1") @[ToTL.scala 210:19]
    wire _WIRE_13 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}} @[Bundles.scala 260:74]
    _WIRE_13.bits.corrupt <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.data <= UInt<32>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.address <= UInt<16>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.source <= UInt<4>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.size <= UInt<2>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.param <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_13.bits.opcode <= UInt<3>("h0") @[Bundles.scala 260:74]
    _WIRE_13.valid <= UInt<1>("h0") @[Bundles.scala 260:74]
    _WIRE_13.ready <= UInt<1>("h0") @[Bundles.scala 260:74]
    wire _WIRE_14 : { flip ready : UInt<1>, valid : UInt<1>, bits : { opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<4>, address : UInt<16>, user : { }, echo : { }, data : UInt<32>, corrupt : UInt<1>}} @[Bundles.scala 260:61]
    _WIRE_14.bits <= _WIRE_13.bits @[Bundles.scala 260:61]
    _WIRE_14.valid <= _WIRE_13.valid @[Bundles.scala 260:61]
    _WIRE_14.ready <= _WIRE_13.ready @[Bundles.scala 260:61]
    _WIRE_14.valid <= UInt<1>("h0") @[ToTL.scala 211:19]
    wire _WIRE_15 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:74]
    _WIRE_15.bits.sink <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_15.valid <= UInt<1>("h0") @[Bundles.scala 262:74]
    _WIRE_15.ready <= UInt<1>("h0") @[Bundles.scala 262:74]
    wire _WIRE_16 : { flip ready : UInt<1>, valid : UInt<1>, bits : { sink : UInt<1>}} @[Bundles.scala 262:61]
    _WIRE_16.bits <= _WIRE_15.bits @[Bundles.scala 262:61]
    _WIRE_16.valid <= _WIRE_15.valid @[Bundles.scala 262:61]
    _WIRE_16.ready <= _WIRE_15.ready @[Bundles.scala 262:61]
    _WIRE_16.valid <= UInt<1>("h0") @[ToTL.scala 212:19]

  module Queue_173 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { extra_id : UInt<15>, real_last : UInt<1>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <- io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_174 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { extra_id : UInt<15>, real_last : UInt<1>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <- io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_175 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { extra_id : UInt<15>, real_last : UInt<1>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <- io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_176 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { extra_id : UInt<15>, real_last : UInt<1>}}, count : UInt<3>}

    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { extra_id : UInt<15>, real_last : UInt<1>} [4] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq is invalid @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq is invalid @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <- io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <- io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <- io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4UserYanker_1 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst Queue of Queue_173 @[UserYanker.scala 50:17]
    Queue.clock is invalid
    Queue.reset is invalid
    Queue.io is invalid
    Queue.clock <= clock
    Queue.reset <= reset
    inst Queue_1 of Queue_174 @[UserYanker.scala 50:17]
    Queue_1.clock is invalid
    Queue_1.reset is invalid
    Queue_1.io is invalid
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    inst Queue_2 of Queue_175 @[UserYanker.scala 50:17]
    Queue_2.clock is invalid
    Queue_2.reset is invalid
    Queue_2.io is invalid
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    inst Queue_3 of Queue_176 @[UserYanker.scala 50:17]
    Queue_3.clock is invalid
    Queue_3.reset is invalid
    Queue_3.io is invalid
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    wire _ar_ready_WIRE : UInt<1>[2] @[UserYanker.scala 58:29]
    _ar_ready_WIRE is invalid @[UserYanker.scala 58:29]
    _ar_ready_WIRE[0] <= Queue.io.enq.ready @[UserYanker.scala 58:29]
    _ar_ready_WIRE[1] <= Queue_1.io.enq.ready @[UserYanker.scala 58:29]
    node _bundleIn_0_ar_ready_T = and(x1.ar.ready, _ar_ready_WIRE[bundleIn_0.ar.bits.id]) @[UserYanker.scala 59:36]
    bundleIn_0.ar.ready <= _bundleIn_0_ar_ready_T @[UserYanker.scala 59:20]
    node _x1_ar_valid_T = and(bundleIn_0.ar.valid, _ar_ready_WIRE[bundleIn_0.ar.bits.id]) @[UserYanker.scala 60:36]
    x1.ar.valid <= _x1_ar_valid_T @[UserYanker.scala 60:20]
    x1.ar.bits.qos <= bundleIn_0.ar.bits.qos @[BundleMap.scala 247:19]
    x1.ar.bits.prot <= bundleIn_0.ar.bits.prot @[BundleMap.scala 247:19]
    x1.ar.bits.cache <= bundleIn_0.ar.bits.cache @[BundleMap.scala 247:19]
    x1.ar.bits.lock <= bundleIn_0.ar.bits.lock @[BundleMap.scala 247:19]
    x1.ar.bits.burst <= bundleIn_0.ar.bits.burst @[BundleMap.scala 247:19]
    x1.ar.bits.size <= bundleIn_0.ar.bits.size @[BundleMap.scala 247:19]
    x1.ar.bits.len <= bundleIn_0.ar.bits.len @[BundleMap.scala 247:19]
    x1.ar.bits.addr <= bundleIn_0.ar.bits.addr @[BundleMap.scala 247:19]
    x1.ar.bits.id <= bundleIn_0.ar.bits.id @[BundleMap.scala 247:19]
    wire _r_valid_WIRE : UInt<1>[2] @[UserYanker.scala 64:28]
    _r_valid_WIRE is invalid @[UserYanker.scala 64:28]
    _r_valid_WIRE[0] <= Queue.io.deq.valid @[UserYanker.scala 64:28]
    _r_valid_WIRE[1] <= Queue_1.io.deq.valid @[UserYanker.scala 64:28]
    wire _r_bits_WIRE : { extra_id : UInt<15>, real_last : UInt<1>}[2] @[UserYanker.scala 65:27]
    _r_bits_WIRE is invalid @[UserYanker.scala 65:27]
    _r_bits_WIRE[0] <- Queue.io.deq.bits @[UserYanker.scala 65:27]
    _r_bits_WIRE[1] <- Queue_1.io.deq.bits @[UserYanker.scala 65:27]
    node _T = eq(x1.r.valid, UInt<1>("h0")) @[UserYanker.scala 66:15]
    node _T_1 = or(_T, _r_valid_WIRE[x1.r.bits.id]) @[UserYanker.scala 66:28]
    node _T_2 = asUInt(reset) @[UserYanker.scala 66:14]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[UserYanker.scala 66:14]
    when _T_3 : @[UserYanker.scala 66:14]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[UserYanker.scala 66:14]
      when _T_4 : @[UserYanker.scala 66:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UserYanker.scala:66 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n") : printf @[UserYanker.scala 66:14]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[UserYanker.scala 66:14]
    bundleIn_0.r.bits.last <= x1.r.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.real_last <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.r.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.r.bits.resp <= x1.r.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= x1.r.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= x1.r.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= x1.r.valid @[BundleMap.scala 247:19]
    x1.r.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.real_last <= _r_bits_WIRE[x1.r.bits.id].real_last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.extra_id <= _r_bits_WIRE[x1.r.bits.id].extra_id @[BundleMap.scala 247:19]
    node arsel_shiftAmount = bits(bundleIn_0.ar.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _arsel_T = dshl(UInt<1>("h1"), arsel_shiftAmount) @[OneHot.scala 64:12]
    node _arsel_T_1 = bits(_arsel_T, 1, 0) @[OneHot.scala 64:27]
    node arsel_0 = bits(_arsel_T_1, 0, 0) @[UserYanker.scala 70:55]
    node arsel_1 = bits(_arsel_T_1, 1, 1) @[UserYanker.scala 70:55]
    node rsel_shiftAmount = bits(x1.r.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _rsel_T = dshl(UInt<1>("h1"), rsel_shiftAmount) @[OneHot.scala 64:12]
    node _rsel_T_1 = bits(_rsel_T, 1, 0) @[OneHot.scala 64:27]
    node rsel_0 = bits(_rsel_T_1, 0, 0) @[UserYanker.scala 71:55]
    node rsel_1 = bits(_rsel_T_1, 1, 1) @[UserYanker.scala 71:55]
    node _T_5 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_6 = and(_T_5, rsel_0) @[UserYanker.scala 73:53]
    node _T_7 = and(_T_6, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue.io.deq.ready <= _T_7 @[UserYanker.scala 73:21]
    node _T_8 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_9 = and(_T_8, arsel_0) @[UserYanker.scala 74:53]
    Queue.io.enq.valid <= _T_9 @[UserYanker.scala 74:21]
    Queue.io.enq.bits.real_last <= bundleIn_0.ar.bits.echo.real_last @[BundleMap.scala 247:19]
    Queue.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    node _T_10 = and(x1.r.valid, bundleIn_0.r.ready) @[UserYanker.scala 73:37]
    node _T_11 = and(_T_10, rsel_1) @[UserYanker.scala 73:53]
    node _T_12 = and(_T_11, x1.r.bits.last) @[UserYanker.scala 73:58]
    Queue_1.io.deq.ready <= _T_12 @[UserYanker.scala 73:21]
    node _T_13 = and(bundleIn_0.ar.valid, x1.ar.ready) @[UserYanker.scala 74:37]
    node _T_14 = and(_T_13, arsel_1) @[UserYanker.scala 74:53]
    Queue_1.io.enq.valid <= _T_14 @[UserYanker.scala 74:21]
    Queue_1.io.enq.bits.real_last <= bundleIn_0.ar.bits.echo.real_last @[BundleMap.scala 247:19]
    Queue_1.io.enq.bits.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    wire _aw_ready_WIRE : UInt<1>[2] @[UserYanker.scala 79:29]
    _aw_ready_WIRE is invalid @[UserYanker.scala 79:29]
    _aw_ready_WIRE[0] <= Queue_2.io.enq.ready @[UserYanker.scala 79:29]
    _aw_ready_WIRE[1] <= Queue_3.io.enq.ready @[UserYanker.scala 79:29]
    node _bundleIn_0_aw_ready_T = and(x1.aw.ready, _aw_ready_WIRE[bundleIn_0.aw.bits.id]) @[UserYanker.scala 80:36]
    bundleIn_0.aw.ready <= _bundleIn_0_aw_ready_T @[UserYanker.scala 80:20]
    node _x1_aw_valid_T = and(bundleIn_0.aw.valid, _aw_ready_WIRE[bundleIn_0.aw.bits.id]) @[UserYanker.scala 81:36]
    x1.aw.valid <= _x1_aw_valid_T @[UserYanker.scala 81:20]
    x1.aw.bits.qos <= bundleIn_0.aw.bits.qos @[BundleMap.scala 247:19]
    x1.aw.bits.prot <= bundleIn_0.aw.bits.prot @[BundleMap.scala 247:19]
    x1.aw.bits.cache <= bundleIn_0.aw.bits.cache @[BundleMap.scala 247:19]
    x1.aw.bits.lock <= bundleIn_0.aw.bits.lock @[BundleMap.scala 247:19]
    x1.aw.bits.burst <= bundleIn_0.aw.bits.burst @[BundleMap.scala 247:19]
    x1.aw.bits.size <= bundleIn_0.aw.bits.size @[BundleMap.scala 247:19]
    x1.aw.bits.len <= bundleIn_0.aw.bits.len @[BundleMap.scala 247:19]
    x1.aw.bits.addr <= bundleIn_0.aw.bits.addr @[BundleMap.scala 247:19]
    x1.aw.bits.id <= bundleIn_0.aw.bits.id @[BundleMap.scala 247:19]
    wire _b_valid_WIRE : UInt<1>[2] @[UserYanker.scala 85:28]
    _b_valid_WIRE is invalid @[UserYanker.scala 85:28]
    _b_valid_WIRE[0] <= Queue_2.io.deq.valid @[UserYanker.scala 85:28]
    _b_valid_WIRE[1] <= Queue_3.io.deq.valid @[UserYanker.scala 85:28]
    wire _b_bits_WIRE : { extra_id : UInt<15>, real_last : UInt<1>}[2] @[UserYanker.scala 86:27]
    _b_bits_WIRE is invalid @[UserYanker.scala 86:27]
    _b_bits_WIRE[0] <- Queue_2.io.deq.bits @[UserYanker.scala 86:27]
    _b_bits_WIRE[1] <- Queue_3.io.deq.bits @[UserYanker.scala 86:27]
    node _T_15 = eq(x1.b.valid, UInt<1>("h0")) @[UserYanker.scala 87:15]
    node _T_16 = or(_T_15, _b_valid_WIRE[x1.b.bits.id]) @[UserYanker.scala 87:28]
    node _T_17 = asUInt(reset) @[UserYanker.scala 87:14]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[UserYanker.scala 87:14]
    when _T_18 : @[UserYanker.scala 87:14]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[UserYanker.scala 87:14]
      when _T_19 : @[UserYanker.scala 87:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UserYanker.scala:87 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n") : printf_1 @[UserYanker.scala 87:14]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_1 @[UserYanker.scala 87:14]
    bundleIn_0.b.bits.echo.real_last <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.b.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    bundleIn_0.b.bits.resp <= x1.b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= x1.b.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.b.valid <= x1.b.valid @[BundleMap.scala 247:19]
    x1.b.ready <= bundleIn_0.b.ready @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.real_last <= _b_bits_WIRE[x1.b.bits.id].real_last @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.echo.extra_id <= _b_bits_WIRE[x1.b.bits.id].extra_id @[BundleMap.scala 247:19]
    node awsel_shiftAmount = bits(bundleIn_0.aw.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _awsel_T = dshl(UInt<1>("h1"), awsel_shiftAmount) @[OneHot.scala 64:12]
    node _awsel_T_1 = bits(_awsel_T, 1, 0) @[OneHot.scala 64:27]
    node awsel_0 = bits(_awsel_T_1, 0, 0) @[UserYanker.scala 91:55]
    node awsel_1 = bits(_awsel_T_1, 1, 1) @[UserYanker.scala 91:55]
    node bsel_shiftAmount = bits(x1.b.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _bsel_T = dshl(UInt<1>("h1"), bsel_shiftAmount) @[OneHot.scala 64:12]
    node _bsel_T_1 = bits(_bsel_T, 1, 0) @[OneHot.scala 64:27]
    node bsel_0 = bits(_bsel_T_1, 0, 0) @[UserYanker.scala 92:55]
    node bsel_1 = bits(_bsel_T_1, 1, 1) @[UserYanker.scala 92:55]
    node _T_20 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_21 = and(_T_20, bsel_0) @[UserYanker.scala 94:53]
    Queue_2.io.deq.ready <= _T_21 @[UserYanker.scala 94:21]
    node _T_22 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_23 = and(_T_22, awsel_0) @[UserYanker.scala 95:53]
    Queue_2.io.enq.valid <= _T_23 @[UserYanker.scala 95:21]
    Queue_2.io.enq.bits.real_last <= bundleIn_0.aw.bits.echo.real_last @[BundleMap.scala 247:19]
    Queue_2.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    node _T_24 = and(x1.b.valid, bundleIn_0.b.ready) @[UserYanker.scala 94:37]
    node _T_25 = and(_T_24, bsel_1) @[UserYanker.scala 94:53]
    Queue_3.io.deq.ready <= _T_25 @[UserYanker.scala 94:21]
    node _T_26 = and(bundleIn_0.aw.valid, x1.aw.ready) @[UserYanker.scala 95:37]
    node _T_27 = and(_T_26, awsel_1) @[UserYanker.scala 95:53]
    Queue_3.io.enq.valid <= _T_27 @[UserYanker.scala 95:21]
    Queue_3.io.enq.bits.real_last <= bundleIn_0.aw.bits.echo.real_last @[BundleMap.scala 247:19]
    Queue_3.io.enq.bits.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    x1.w.bits.last <= bundleIn_0.w.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= bundleIn_0.w.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= bundleIn_0.w.bits.data @[BundleMap.scala 247:19]
    x1.w.valid <= bundleIn_0.w.valid @[BundleMap.scala 247:19]
    bundleIn_0.w.ready <= x1.w.ready @[BundleMap.scala 247:19]

  module Queue_177 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, count : UInt<1>}

    cmem ram : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_178 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, count : UInt<1>}

    cmem ram : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_179 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, count : UInt<1>}

    cmem ram : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }} [1] @[Decoupled.scala 273:95]
    wire enq_ptr_value : UInt @[Counter.scala 61:73]
    enq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    wire deq_ptr_value : UInt @[Counter.scala 61:73]
    deq_ptr_value <= UInt<1>("h0") @[Counter.scala 61:73]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
    when do_deq : @[Decoupled.scala 290:16]
      skip
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[UInt<1>("h0")], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    when io.enq.valid : @[Decoupled.scala 314:24]
      io.deq.valid <= UInt<1>("h1") @[Decoupled.scala 314:39]
    when empty : @[Decoupled.scala 315:17]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 316:19]
      do_deq <= UInt<1>("h0") @[Decoupled.scala 317:14]
      when io.deq.ready : @[Decoupled.scala 318:26]
        do_enq <= UInt<1>("h0") @[Decoupled.scala 318:35]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<1>("h1"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Fragmenter :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>, real_last : UInt<1>}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst deq of Queue_177 @[Decoupled.scala 375:21]
    deq.clock <= clock
    deq.reset <= reset
    deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    deq.io.enq.bits.echo.extra_id <= bundleIn_0.ar.bits.echo.extra_id @[Decoupled.scala 378:21]
    deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= deq.io.enq.ready @[Decoupled.scala 379:17]
    wire irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}} @[Decoupled.scala 414:19]
    irr.bits <= deq.io.deq.bits @[Decoupled.scala 415:14]
    irr.valid <= deq.io.deq.valid @[Decoupled.scala 416:15]
    deq.io.deq.ready <= irr.ready @[Decoupled.scala 417:15]
    wire in_ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}} @[Fragmenter.scala 63:23]
    reg busy : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Fragmenter.scala 65:29]
    reg r_addr : UInt<16>, clock with :
      reset => (UInt<1>("h0"), r_addr) @[Fragmenter.scala 66:25]
    reg r_len : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_len) @[Fragmenter.scala 67:25]
    node len = mux(busy, r_len, irr.bits.len) @[Fragmenter.scala 69:23]
    node addr = mux(busy, r_addr, irr.bits.addr) @[Fragmenter.scala 70:23]
    node lo = bits(addr, 1, 0) @[Fragmenter.scala 72:49]
    node alignment = bits(addr, 9, 2) @[Fragmenter.scala 74:29]
    node _support1_T = xor(addr, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _support1_T_1 = cvt(_support1_T) @[Parameters.scala 137:45]
    node _support1_T_2 = and(_support1_T_1, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _support1_T_3 = asSInt(_support1_T_2) @[Parameters.scala 137:50]
    node _support1_T_4 = eq(_support1_T_3, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _fillLow_T = shr(len, 1) @[package.scala 254:48]
    node _fillLow_T_1 = or(len, _fillLow_T) @[package.scala 254:43]
    node _fillLow_T_2 = shr(_fillLow_T_1, 2) @[package.scala 254:48]
    node _fillLow_T_3 = or(_fillLow_T_1, _fillLow_T_2) @[package.scala 254:43]
    node _fillLow_T_4 = shr(_fillLow_T_3, 4) @[package.scala 254:48]
    node _fillLow_T_5 = or(_fillLow_T_3, _fillLow_T_4) @[package.scala 254:43]
    node _fillLow_T_6 = bits(_fillLow_T_5, 7, 0) @[package.scala 255:17]
    node fillLow = shr(_fillLow_T_6, 1) @[Fragmenter.scala 90:37]
    node _wipeHigh_T = not(len) @[Fragmenter.scala 91:33]
    node _wipeHigh_T_1 = shl(_wipeHigh_T, 1) @[package.scala 245:48]
    node _wipeHigh_T_2 = bits(_wipeHigh_T_1, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_3 = or(_wipeHigh_T, _wipeHigh_T_2) @[package.scala 245:43]
    node _wipeHigh_T_4 = shl(_wipeHigh_T_3, 2) @[package.scala 245:48]
    node _wipeHigh_T_5 = bits(_wipeHigh_T_4, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_6 = or(_wipeHigh_T_3, _wipeHigh_T_5) @[package.scala 245:43]
    node _wipeHigh_T_7 = shl(_wipeHigh_T_6, 4) @[package.scala 245:48]
    node _wipeHigh_T_8 = bits(_wipeHigh_T_7, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_9 = or(_wipeHigh_T_6, _wipeHigh_T_8) @[package.scala 245:43]
    node _wipeHigh_T_10 = bits(_wipeHigh_T_9, 7, 0) @[package.scala 246:17]
    node wipeHigh = not(_wipeHigh_T_10) @[Fragmenter.scala 91:24]
    node remain1 = or(fillLow, wipeHigh) @[Fragmenter.scala 92:32]
    node _align1_T = shl(alignment, 1) @[package.scala 245:48]
    node _align1_T_1 = bits(_align1_T, 7, 0) @[package.scala 245:53]
    node _align1_T_2 = or(alignment, _align1_T_1) @[package.scala 245:43]
    node _align1_T_3 = shl(_align1_T_2, 2) @[package.scala 245:48]
    node _align1_T_4 = bits(_align1_T_3, 7, 0) @[package.scala 245:53]
    node _align1_T_5 = or(_align1_T_2, _align1_T_4) @[package.scala 245:43]
    node _align1_T_6 = shl(_align1_T_5, 4) @[package.scala 245:48]
    node _align1_T_7 = bits(_align1_T_6, 7, 0) @[package.scala 245:53]
    node _align1_T_8 = or(_align1_T_5, _align1_T_7) @[package.scala 245:43]
    node _align1_T_9 = bits(_align1_T_8, 7, 0) @[package.scala 246:17]
    node align1 = not(_align1_T_9) @[Fragmenter.scala 93:24]
    node _maxSupported1_T = and(remain1, align1) @[Fragmenter.scala 94:37]
    node maxSupported1 = and(_maxSupported1_T, UInt<1>("h0")) @[Fragmenter.scala 94:46]
    node fixed = eq(irr.bits.burst, UInt<2>("h0")) @[Fragmenter.scala 97:34]
    node narrow = neq(irr.bits.size, UInt<2>("h2")) @[Fragmenter.scala 98:34]
    node bad = or(fixed, narrow) @[Fragmenter.scala 99:25]
    node beats1 = mux(bad, UInt<1>("h0"), maxSupported1) @[Fragmenter.scala 102:25]
    node _beats_T = shl(beats1, 1) @[package.scala 233:35]
    node _beats_T_1 = or(_beats_T, UInt<1>("h1")) @[package.scala 233:40]
    node _beats_T_2 = cat(UInt<1>("h0"), beats1) @[Cat.scala 33:92]
    node _beats_T_3 = not(_beats_T_2) @[package.scala 233:49]
    node beats = and(_beats_T_1, _beats_T_3) @[package.scala 233:47]
    node _inc_addr_T = dshl(beats, irr.bits.size) @[Fragmenter.scala 105:38]
    node _inc_addr_T_1 = add(addr, _inc_addr_T) @[Fragmenter.scala 105:29]
    node inc_addr = tail(_inc_addr_T_1, 1) @[Fragmenter.scala 105:29]
    node _wrapMask_T = cat(irr.bits.len, UInt<8>("hff")) @[Cat.scala 33:92]
    node _wrapMask_T_1 = dshl(_wrapMask_T, irr.bits.size) @[Bundles.scala 33:21]
    node wrapMask = shr(_wrapMask_T_1, 8) @[Bundles.scala 33:30]
    wire mux_addr : UInt @[Fragmenter.scala 107:35]
    mux_addr <= inc_addr @[Fragmenter.scala 107:35]
    node _T = eq(irr.bits.burst, UInt<2>("h2")) @[Fragmenter.scala 108:28]
    when _T : @[Fragmenter.scala 108:59]
      node _mux_addr_T = and(inc_addr, wrapMask) @[Fragmenter.scala 109:33]
      node _mux_addr_T_1 = not(irr.bits.addr) @[Fragmenter.scala 109:49]
      node _mux_addr_T_2 = or(_mux_addr_T_1, wrapMask) @[Fragmenter.scala 109:62]
      node _mux_addr_T_3 = not(_mux_addr_T_2) @[Fragmenter.scala 109:47]
      node _mux_addr_T_4 = or(_mux_addr_T, _mux_addr_T_3) @[Fragmenter.scala 109:45]
      mux_addr <= _mux_addr_T_4 @[Fragmenter.scala 109:20]
    node _T_1 = eq(irr.bits.burst, UInt<2>("h0")) @[Fragmenter.scala 111:28]
    when _T_1 : @[Fragmenter.scala 111:60]
      mux_addr <= irr.bits.addr @[Fragmenter.scala 112:20]
    node ar_last = eq(beats1, len) @[Fragmenter.scala 115:27]
    node _irr_ready_T = and(in_ar.ready, ar_last) @[Fragmenter.scala 116:30]
    irr.ready <= _irr_ready_T @[Fragmenter.scala 116:17]
    in_ar.valid <= irr.valid @[Fragmenter.scala 117:19]
    in_ar.bits.echo.extra_id <= irr.bits.echo.extra_id @[BundleMap.scala 247:19]
    in_ar.bits.qos <= irr.bits.qos @[BundleMap.scala 247:19]
    in_ar.bits.prot <= irr.bits.prot @[BundleMap.scala 247:19]
    in_ar.bits.cache <= irr.bits.cache @[BundleMap.scala 247:19]
    in_ar.bits.lock <= irr.bits.lock @[BundleMap.scala 247:19]
    in_ar.bits.burst <= irr.bits.burst @[BundleMap.scala 247:19]
    in_ar.bits.size <= irr.bits.size @[BundleMap.scala 247:19]
    in_ar.bits.len <= irr.bits.len @[BundleMap.scala 247:19]
    in_ar.bits.addr <= irr.bits.addr @[BundleMap.scala 247:19]
    in_ar.bits.id <= irr.bits.id @[BundleMap.scala 247:19]
    in_ar.bits.len <= beats1 @[Fragmenter.scala 120:22]
    node _out_bits_addr_T = not(addr) @[Fragmenter.scala 127:28]
    node _out_bits_addr_T_1 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 235:64]
    node _out_bits_addr_T_2 = dshl(_out_bits_addr_T_1, irr.bits.size) @[package.scala 235:71]
    node _out_bits_addr_T_3 = bits(_out_bits_addr_T_2, 1, 0) @[package.scala 235:76]
    node _out_bits_addr_T_4 = not(_out_bits_addr_T_3) @[package.scala 235:46]
    node _out_bits_addr_T_5 = or(_out_bits_addr_T, _out_bits_addr_T_4) @[Fragmenter.scala 127:34]
    node _out_bits_addr_T_6 = not(_out_bits_addr_T_5) @[Fragmenter.scala 127:26]
    in_ar.bits.addr <= _out_bits_addr_T_6 @[Fragmenter.scala 127:23]
    node _T_2 = and(in_ar.ready, in_ar.valid) @[Decoupled.scala 51:35]
    when _T_2 : @[Fragmenter.scala 129:25]
      node _busy_T = eq(ar_last, UInt<1>("h0")) @[Fragmenter.scala 130:19]
      busy <= _busy_T @[Fragmenter.scala 130:16]
      r_addr <= mux_addr @[Fragmenter.scala 131:18]
      node _r_len_T = sub(len, beats) @[Fragmenter.scala 132:25]
      node _r_len_T_1 = tail(_r_len_T, 1) @[Fragmenter.scala 132:25]
      r_len <= _r_len_T_1 @[Fragmenter.scala 132:18]
    inst deq_1 of Queue_178 @[Decoupled.scala 375:21]
    deq_1.clock <= clock
    deq_1.reset <= reset
    deq_1.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    deq_1.io.enq.bits.echo.extra_id <= bundleIn_0.aw.bits.echo.extra_id @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    deq_1.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= deq_1.io.enq.ready @[Decoupled.scala 379:17]
    wire irr_1 : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}} @[Decoupled.scala 414:19]
    irr_1.bits <= deq_1.io.deq.bits @[Decoupled.scala 415:14]
    irr_1.valid <= deq_1.io.deq.valid @[Decoupled.scala 416:15]
    deq_1.io.deq.ready <= irr_1.ready @[Decoupled.scala 417:15]
    wire in_aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}} @[Fragmenter.scala 63:23]
    reg busy_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Fragmenter.scala 65:29]
    reg r_addr_1 : UInt<16>, clock with :
      reset => (UInt<1>("h0"), r_addr_1) @[Fragmenter.scala 66:25]
    reg r_len_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_len_1) @[Fragmenter.scala 67:25]
    node len_1 = mux(busy_1, r_len_1, irr_1.bits.len) @[Fragmenter.scala 69:23]
    node addr_1 = mux(busy_1, r_addr_1, irr_1.bits.addr) @[Fragmenter.scala 70:23]
    node lo_1 = bits(addr_1, 1, 0) @[Fragmenter.scala 72:49]
    node alignment_1 = bits(addr_1, 9, 2) @[Fragmenter.scala 74:29]
    node _support1_T_5 = xor(addr_1, UInt<1>("h0")) @[Parameters.scala 137:31]
    node _support1_T_6 = cvt(_support1_T_5) @[Parameters.scala 137:45]
    node _support1_T_7 = and(_support1_T_6, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:50]
    node _support1_T_8 = asSInt(_support1_T_7) @[Parameters.scala 137:50]
    node _support1_T_9 = eq(_support1_T_8, asSInt(UInt<1>("h0"))) @[Parameters.scala 137:65]
    node _fillLow_T_7 = shr(len_1, 1) @[package.scala 254:48]
    node _fillLow_T_8 = or(len_1, _fillLow_T_7) @[package.scala 254:43]
    node _fillLow_T_9 = shr(_fillLow_T_8, 2) @[package.scala 254:48]
    node _fillLow_T_10 = or(_fillLow_T_8, _fillLow_T_9) @[package.scala 254:43]
    node _fillLow_T_11 = shr(_fillLow_T_10, 4) @[package.scala 254:48]
    node _fillLow_T_12 = or(_fillLow_T_10, _fillLow_T_11) @[package.scala 254:43]
    node _fillLow_T_13 = bits(_fillLow_T_12, 7, 0) @[package.scala 255:17]
    node fillLow_1 = shr(_fillLow_T_13, 1) @[Fragmenter.scala 90:37]
    node _wipeHigh_T_11 = not(len_1) @[Fragmenter.scala 91:33]
    node _wipeHigh_T_12 = shl(_wipeHigh_T_11, 1) @[package.scala 245:48]
    node _wipeHigh_T_13 = bits(_wipeHigh_T_12, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_14 = or(_wipeHigh_T_11, _wipeHigh_T_13) @[package.scala 245:43]
    node _wipeHigh_T_15 = shl(_wipeHigh_T_14, 2) @[package.scala 245:48]
    node _wipeHigh_T_16 = bits(_wipeHigh_T_15, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_17 = or(_wipeHigh_T_14, _wipeHigh_T_16) @[package.scala 245:43]
    node _wipeHigh_T_18 = shl(_wipeHigh_T_17, 4) @[package.scala 245:48]
    node _wipeHigh_T_19 = bits(_wipeHigh_T_18, 7, 0) @[package.scala 245:53]
    node _wipeHigh_T_20 = or(_wipeHigh_T_17, _wipeHigh_T_19) @[package.scala 245:43]
    node _wipeHigh_T_21 = bits(_wipeHigh_T_20, 7, 0) @[package.scala 246:17]
    node wipeHigh_1 = not(_wipeHigh_T_21) @[Fragmenter.scala 91:24]
    node remain1_1 = or(fillLow_1, wipeHigh_1) @[Fragmenter.scala 92:32]
    node _align1_T_10 = shl(alignment_1, 1) @[package.scala 245:48]
    node _align1_T_11 = bits(_align1_T_10, 7, 0) @[package.scala 245:53]
    node _align1_T_12 = or(alignment_1, _align1_T_11) @[package.scala 245:43]
    node _align1_T_13 = shl(_align1_T_12, 2) @[package.scala 245:48]
    node _align1_T_14 = bits(_align1_T_13, 7, 0) @[package.scala 245:53]
    node _align1_T_15 = or(_align1_T_12, _align1_T_14) @[package.scala 245:43]
    node _align1_T_16 = shl(_align1_T_15, 4) @[package.scala 245:48]
    node _align1_T_17 = bits(_align1_T_16, 7, 0) @[package.scala 245:53]
    node _align1_T_18 = or(_align1_T_15, _align1_T_17) @[package.scala 245:43]
    node _align1_T_19 = bits(_align1_T_18, 7, 0) @[package.scala 246:17]
    node align1_1 = not(_align1_T_19) @[Fragmenter.scala 93:24]
    node _maxSupported1_T_1 = and(remain1_1, align1_1) @[Fragmenter.scala 94:37]
    node maxSupported1_1 = and(_maxSupported1_T_1, UInt<1>("h0")) @[Fragmenter.scala 94:46]
    node fixed_1 = eq(irr_1.bits.burst, UInt<2>("h0")) @[Fragmenter.scala 97:34]
    node narrow_1 = neq(irr_1.bits.size, UInt<2>("h2")) @[Fragmenter.scala 98:34]
    node bad_1 = or(fixed_1, narrow_1) @[Fragmenter.scala 99:25]
    node beats1_1 = mux(bad_1, UInt<1>("h0"), maxSupported1_1) @[Fragmenter.scala 102:25]
    node _beats_T_4 = shl(beats1_1, 1) @[package.scala 233:35]
    node _beats_T_5 = or(_beats_T_4, UInt<1>("h1")) @[package.scala 233:40]
    node _beats_T_6 = cat(UInt<1>("h0"), beats1_1) @[Cat.scala 33:92]
    node _beats_T_7 = not(_beats_T_6) @[package.scala 233:49]
    node w_beats = and(_beats_T_5, _beats_T_7) @[package.scala 233:47]
    node _inc_addr_T_2 = dshl(w_beats, irr_1.bits.size) @[Fragmenter.scala 105:38]
    node _inc_addr_T_3 = add(addr_1, _inc_addr_T_2) @[Fragmenter.scala 105:29]
    node inc_addr_1 = tail(_inc_addr_T_3, 1) @[Fragmenter.scala 105:29]
    node _wrapMask_T_2 = cat(irr_1.bits.len, UInt<8>("hff")) @[Cat.scala 33:92]
    node _wrapMask_T_3 = dshl(_wrapMask_T_2, irr_1.bits.size) @[Bundles.scala 33:21]
    node wrapMask_1 = shr(_wrapMask_T_3, 8) @[Bundles.scala 33:30]
    wire mux_addr_1 : UInt @[Fragmenter.scala 107:35]
    mux_addr_1 <= inc_addr_1 @[Fragmenter.scala 107:35]
    node _T_3 = eq(irr_1.bits.burst, UInt<2>("h2")) @[Fragmenter.scala 108:28]
    when _T_3 : @[Fragmenter.scala 108:59]
      node _mux_addr_T_5 = and(inc_addr_1, wrapMask_1) @[Fragmenter.scala 109:33]
      node _mux_addr_T_6 = not(irr_1.bits.addr) @[Fragmenter.scala 109:49]
      node _mux_addr_T_7 = or(_mux_addr_T_6, wrapMask_1) @[Fragmenter.scala 109:62]
      node _mux_addr_T_8 = not(_mux_addr_T_7) @[Fragmenter.scala 109:47]
      node _mux_addr_T_9 = or(_mux_addr_T_5, _mux_addr_T_8) @[Fragmenter.scala 109:45]
      mux_addr_1 <= _mux_addr_T_9 @[Fragmenter.scala 109:20]
    node _T_4 = eq(irr_1.bits.burst, UInt<2>("h0")) @[Fragmenter.scala 111:28]
    when _T_4 : @[Fragmenter.scala 111:60]
      mux_addr_1 <= irr_1.bits.addr @[Fragmenter.scala 112:20]
    node aw_last = eq(beats1_1, len_1) @[Fragmenter.scala 115:27]
    node _irr_ready_T_1 = and(in_aw.ready, aw_last) @[Fragmenter.scala 116:30]
    irr_1.ready <= _irr_ready_T_1 @[Fragmenter.scala 116:17]
    in_aw.valid <= irr_1.valid @[Fragmenter.scala 117:19]
    in_aw.bits.echo.extra_id <= irr_1.bits.echo.extra_id @[BundleMap.scala 247:19]
    in_aw.bits.qos <= irr_1.bits.qos @[BundleMap.scala 247:19]
    in_aw.bits.prot <= irr_1.bits.prot @[BundleMap.scala 247:19]
    in_aw.bits.cache <= irr_1.bits.cache @[BundleMap.scala 247:19]
    in_aw.bits.lock <= irr_1.bits.lock @[BundleMap.scala 247:19]
    in_aw.bits.burst <= irr_1.bits.burst @[BundleMap.scala 247:19]
    in_aw.bits.size <= irr_1.bits.size @[BundleMap.scala 247:19]
    in_aw.bits.len <= irr_1.bits.len @[BundleMap.scala 247:19]
    in_aw.bits.addr <= irr_1.bits.addr @[BundleMap.scala 247:19]
    in_aw.bits.id <= irr_1.bits.id @[BundleMap.scala 247:19]
    in_aw.bits.len <= beats1_1 @[Fragmenter.scala 120:22]
    node _out_bits_addr_T_7 = not(addr_1) @[Fragmenter.scala 127:28]
    node _out_bits_addr_T_8 = asUInt(asSInt(UInt<2>("h3"))) @[package.scala 235:64]
    node _out_bits_addr_T_9 = dshl(_out_bits_addr_T_8, irr_1.bits.size) @[package.scala 235:71]
    node _out_bits_addr_T_10 = bits(_out_bits_addr_T_9, 1, 0) @[package.scala 235:76]
    node _out_bits_addr_T_11 = not(_out_bits_addr_T_10) @[package.scala 235:46]
    node _out_bits_addr_T_12 = or(_out_bits_addr_T_7, _out_bits_addr_T_11) @[Fragmenter.scala 127:34]
    node _out_bits_addr_T_13 = not(_out_bits_addr_T_12) @[Fragmenter.scala 127:26]
    in_aw.bits.addr <= _out_bits_addr_T_13 @[Fragmenter.scala 127:23]
    node _T_5 = and(in_aw.ready, in_aw.valid) @[Decoupled.scala 51:35]
    when _T_5 : @[Fragmenter.scala 129:25]
      node _busy_T_1 = eq(aw_last, UInt<1>("h0")) @[Fragmenter.scala 130:19]
      busy_1 <= _busy_T_1 @[Fragmenter.scala 130:16]
      r_addr_1 <= mux_addr_1 @[Fragmenter.scala 131:18]
      node _r_len_T_2 = sub(len_1, w_beats) @[Fragmenter.scala 132:25]
      node _r_len_T_3 = tail(_r_len_T_2, 1) @[Fragmenter.scala 132:25]
      r_len_1 <= _r_len_T_3 @[Fragmenter.scala 132:18]
    inst in_w_deq of Queue_179 @[Decoupled.scala 375:21]
    in_w_deq.clock <= clock
    in_w_deq.reset <= reset
    in_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    in_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    in_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    in_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= in_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire in_w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    in_w.bits <= in_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    in_w.valid <= in_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    in_w_deq.io.deq.ready <= in_w.ready @[Decoupled.scala 417:15]
    x1.ar.bits.echo.real_last <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.ar.bits.echo.extra_id <= in_ar.bits.echo.extra_id @[BundleMap.scala 247:19]
    x1.ar.bits.qos <= in_ar.bits.qos @[BundleMap.scala 247:19]
    x1.ar.bits.prot <= in_ar.bits.prot @[BundleMap.scala 247:19]
    x1.ar.bits.cache <= in_ar.bits.cache @[BundleMap.scala 247:19]
    x1.ar.bits.lock <= in_ar.bits.lock @[BundleMap.scala 247:19]
    x1.ar.bits.burst <= in_ar.bits.burst @[BundleMap.scala 247:19]
    x1.ar.bits.size <= in_ar.bits.size @[BundleMap.scala 247:19]
    x1.ar.bits.len <= in_ar.bits.len @[BundleMap.scala 247:19]
    x1.ar.bits.addr <= in_ar.bits.addr @[BundleMap.scala 247:19]
    x1.ar.bits.id <= in_ar.bits.id @[BundleMap.scala 247:19]
    x1.ar.valid <= in_ar.valid @[BundleMap.scala 247:19]
    in_ar.ready <= x1.ar.ready @[BundleMap.scala 247:19]
    x1.ar.bits.echo.real_last <= ar_last @[Fragmenter.scala 152:38]
    reg wbeats_latched : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Fragmenter.scala 155:35]
    wire wbeats_ready : UInt<1> @[Fragmenter.scala 156:30]
    wire wbeats_valid : UInt<1> @[Fragmenter.scala 157:30]
    node _T_6 = and(wbeats_valid, wbeats_ready) @[Fragmenter.scala 158:26]
    when _T_6 : @[Fragmenter.scala 158:43]
      wbeats_latched <= UInt<1>("h1") @[Fragmenter.scala 158:60]
    node _T_7 = and(x1.aw.ready, x1.aw.valid) @[Decoupled.scala 51:35]
    when _T_7 : @[Fragmenter.scala 159:26]
      wbeats_latched <= UInt<1>("h0") @[Fragmenter.scala 159:43]
    node _x1_aw_valid_T = or(wbeats_ready, wbeats_latched) @[Fragmenter.scala 162:52]
    node _x1_aw_valid_T_1 = and(in_aw.valid, _x1_aw_valid_T) @[Fragmenter.scala 162:35]
    x1.aw.valid <= _x1_aw_valid_T_1 @[Fragmenter.scala 162:20]
    node _in_aw_ready_T = or(wbeats_ready, wbeats_latched) @[Fragmenter.scala 163:52]
    node _in_aw_ready_T_1 = and(x1.aw.ready, _in_aw_ready_T) @[Fragmenter.scala 163:35]
    in_aw.ready <= _in_aw_ready_T_1 @[Fragmenter.scala 163:19]
    node _wbeats_valid_T = eq(wbeats_latched, UInt<1>("h0")) @[Fragmenter.scala 164:38]
    node _wbeats_valid_T_1 = and(in_aw.valid, _wbeats_valid_T) @[Fragmenter.scala 164:35]
    wbeats_valid <= _wbeats_valid_T_1 @[Fragmenter.scala 164:20]
    x1.aw.bits.echo.real_last <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.aw.bits.echo.extra_id <= in_aw.bits.echo.extra_id @[BundleMap.scala 247:19]
    x1.aw.bits.qos <= in_aw.bits.qos @[BundleMap.scala 247:19]
    x1.aw.bits.prot <= in_aw.bits.prot @[BundleMap.scala 247:19]
    x1.aw.bits.cache <= in_aw.bits.cache @[BundleMap.scala 247:19]
    x1.aw.bits.lock <= in_aw.bits.lock @[BundleMap.scala 247:19]
    x1.aw.bits.burst <= in_aw.bits.burst @[BundleMap.scala 247:19]
    x1.aw.bits.size <= in_aw.bits.size @[BundleMap.scala 247:19]
    x1.aw.bits.len <= in_aw.bits.len @[BundleMap.scala 247:19]
    x1.aw.bits.addr <= in_aw.bits.addr @[BundleMap.scala 247:19]
    x1.aw.bits.id <= in_aw.bits.id @[BundleMap.scala 247:19]
    x1.aw.bits.echo.real_last <= aw_last @[Fragmenter.scala 166:38]
    reg w_counter : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Fragmenter.scala 169:30]
    node w_idle = eq(w_counter, UInt<1>("h0")) @[Fragmenter.scala 170:30]
    node _w_todo_T = mux(wbeats_valid, w_beats, UInt<1>("h0")) @[Fragmenter.scala 171:35]
    node w_todo = mux(w_idle, _w_todo_T, w_counter) @[Fragmenter.scala 171:23]
    node w_last = eq(w_todo, UInt<1>("h1")) @[Fragmenter.scala 172:27]
    node _w_counter_T = and(x1.w.ready, x1.w.valid) @[Decoupled.scala 51:35]
    node _w_counter_T_1 = sub(w_todo, _w_counter_T) @[Fragmenter.scala 173:27]
    node _w_counter_T_2 = tail(_w_counter_T_1, 1) @[Fragmenter.scala 173:27]
    w_counter <= _w_counter_T_2 @[Fragmenter.scala 173:17]
    node _T_8 = and(x1.w.ready, x1.w.valid) @[Decoupled.scala 51:35]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[Fragmenter.scala 174:15]
    node _T_10 = neq(w_todo, UInt<1>("h0")) @[Fragmenter.scala 174:37]
    node _T_11 = or(_T_9, _T_10) @[Fragmenter.scala 174:27]
    node _T_12 = asUInt(reset) @[Fragmenter.scala 174:14]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[Fragmenter.scala 174:14]
    when _T_13 : @[Fragmenter.scala 174:14]
      node _T_14 = eq(_T_11, UInt<1>("h0")) @[Fragmenter.scala 174:14]
      when _T_14 : @[Fragmenter.scala 174:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Fragmenter.scala:174 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n") : printf @[Fragmenter.scala 174:14]
      assert(clock, _T_11, UInt<1>("h1"), "") : assert @[Fragmenter.scala 174:14]
    wbeats_ready <= w_idle @[Fragmenter.scala 177:20]
    node _x1_w_valid_T = eq(wbeats_ready, UInt<1>("h0")) @[Fragmenter.scala 178:37]
    node _x1_w_valid_T_1 = or(_x1_w_valid_T, wbeats_valid) @[Fragmenter.scala 178:51]
    node _x1_w_valid_T_2 = and(in_w.valid, _x1_w_valid_T_1) @[Fragmenter.scala 178:33]
    x1.w.valid <= _x1_w_valid_T_2 @[Fragmenter.scala 178:19]
    node _in_w_ready_T = eq(wbeats_ready, UInt<1>("h0")) @[Fragmenter.scala 179:37]
    node _in_w_ready_T_1 = or(_in_w_ready_T, wbeats_valid) @[Fragmenter.scala 179:51]
    node _in_w_ready_T_2 = and(x1.w.ready, _in_w_ready_T_1) @[Fragmenter.scala 179:33]
    in_w.ready <= _in_w_ready_T_2 @[Fragmenter.scala 179:18]
    x1.w.bits.last <= in_w.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= in_w.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= in_w.bits.data @[BundleMap.scala 247:19]
    x1.w.bits.last <= w_last @[Fragmenter.scala 181:23]
    node _T_15 = eq(x1.w.valid, UInt<1>("h0")) @[Fragmenter.scala 183:15]
    node _T_16 = eq(in_w.bits.last, UInt<1>("h0")) @[Fragmenter.scala 183:31]
    node _T_17 = or(_T_15, _T_16) @[Fragmenter.scala 183:28]
    node _T_18 = or(_T_17, w_last) @[Fragmenter.scala 183:47]
    node _T_19 = asUInt(reset) @[Fragmenter.scala 183:14]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[Fragmenter.scala 183:14]
    when _T_20 : @[Fragmenter.scala 183:14]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[Fragmenter.scala 183:14]
      when _T_21 : @[Fragmenter.scala 183:14]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Fragmenter.scala:183 assert (!out.w.valid || !in_w.bits.last || w_last)\n") : printf_1 @[Fragmenter.scala 183:14]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert_1 @[Fragmenter.scala 183:14]
    bundleIn_0.r.bits.last <= x1.r.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.echo.extra_id <= x1.r.bits.echo.extra_id @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.resp <= x1.r.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= x1.r.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= x1.r.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= x1.r.valid @[BundleMap.scala 247:19]
    x1.r.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    node _bundleIn_0_r_bits_last_T = and(x1.r.bits.last, x1.r.bits.echo.real_last) @[Fragmenter.scala 188:41]
    bundleIn_0.r.bits.last <= _bundleIn_0_r_bits_last_T @[Fragmenter.scala 188:22]
    bundleIn_0.b.bits.echo.extra_id <= x1.b.bits.echo.extra_id @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.resp <= x1.b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= x1.b.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.b.valid <= x1.b.valid @[BundleMap.scala 247:19]
    x1.b.ready <= bundleIn_0.b.ready @[BundleMap.scala 247:19]
    node _bundleIn_0_b_valid_T = and(x1.b.valid, x1.b.bits.echo.real_last) @[Fragmenter.scala 193:33]
    bundleIn_0.b.valid <= _bundleIn_0_b_valid_T @[Fragmenter.scala 193:18]
    node _x1_b_ready_T = eq(x1.b.bits.echo.real_last, UInt<1>("h0")) @[Fragmenter.scala 194:36]
    node _x1_b_ready_T_1 = or(bundleIn_0.b.ready, _x1_b_ready_T) @[Fragmenter.scala 194:33]
    x1.b.ready <= _x1_b_ready_T_1 @[Fragmenter.scala 194:19]
    wire _error_WIRE : UInt<2>[2] @[Fragmenter.scala 197:60]
    _error_WIRE[0] <= UInt<2>("h0") @[Fragmenter.scala 197:60]
    _error_WIRE[1] <= UInt<2>("h0") @[Fragmenter.scala 197:60]
    reg error : UInt<2>[2], clock with :
      reset => (reset, _error_WIRE) @[Fragmenter.scala 197:26]
    node _bundleIn_0_b_bits_resp_T = or(x1.b.bits.resp, error[x1.b.bits.id]) @[Fragmenter.scala 198:41]
    bundleIn_0.b.bits.resp <= _bundleIn_0_b_bits_resp_T @[Fragmenter.scala 198:22]
    node shiftAmount = bits(x1.b.bits.id, 0, 0) @[OneHot.scala 63:49]
    node _T_22 = dshl(UInt<1>("h1"), shiftAmount) @[OneHot.scala 64:12]
    node _T_23 = bits(_T_22, 1, 0) @[OneHot.scala 64:27]
    node _T_24 = bits(_T_23, 0, 0) @[Fragmenter.scala 199:63]
    node _T_25 = bits(_T_23, 1, 1) @[Fragmenter.scala 199:63]
    node _T_26 = and(x1.b.ready, x1.b.valid) @[Decoupled.scala 51:35]
    node _T_27 = and(_T_24, _T_26) @[Fragmenter.scala 200:19]
    when _T_27 : @[Fragmenter.scala 200:34]
      node _error_0_T = or(error[0], x1.b.bits.resp) @[Fragmenter.scala 200:64]
      node _error_0_T_1 = mux(x1.b.bits.echo.real_last, UInt<1>("h0"), _error_0_T) @[Fragmenter.scala 200:46]
      error[0] <= _error_0_T_1 @[Fragmenter.scala 200:40]
    node _T_28 = and(x1.b.ready, x1.b.valid) @[Decoupled.scala 51:35]
    node _T_29 = and(_T_25, _T_28) @[Fragmenter.scala 200:19]
    when _T_29 : @[Fragmenter.scala 200:34]
      node _error_1_T = or(error[1], x1.b.bits.resp) @[Fragmenter.scala 200:64]
      node _error_1_T_1 = mux(x1.b.bits.echo.real_last, UInt<1>("h0"), _error_1_T) @[Fragmenter.scala 200:46]
      error[1] <= _error_1_T_1 @[Fragmenter.scala 200:40]


  module AXI4IdIndexer_1 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { extra_id : UInt<15>}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<1>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { extra_id : UInt<15>}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    x1.ar.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.ar.bits.qos <= bundleIn_0.ar.bits.qos @[BundleMap.scala 247:19]
    x1.ar.bits.prot <= bundleIn_0.ar.bits.prot @[BundleMap.scala 247:19]
    x1.ar.bits.cache <= bundleIn_0.ar.bits.cache @[BundleMap.scala 247:19]
    x1.ar.bits.lock <= bundleIn_0.ar.bits.lock @[BundleMap.scala 247:19]
    x1.ar.bits.burst <= bundleIn_0.ar.bits.burst @[BundleMap.scala 247:19]
    x1.ar.bits.size <= bundleIn_0.ar.bits.size @[BundleMap.scala 247:19]
    x1.ar.bits.len <= bundleIn_0.ar.bits.len @[BundleMap.scala 247:19]
    x1.ar.bits.addr <= bundleIn_0.ar.bits.addr @[BundleMap.scala 247:19]
    x1.ar.bits.id <= bundleIn_0.ar.bits.id @[BundleMap.scala 247:19]
    x1.ar.valid <= bundleIn_0.ar.valid @[BundleMap.scala 247:19]
    bundleIn_0.ar.ready <= x1.ar.ready @[BundleMap.scala 247:19]
    x1.aw.bits.echo.extra_id <= UInt<1>("h0") @[BundleMap.scala 51:33]
    x1.aw.bits.qos <= bundleIn_0.aw.bits.qos @[BundleMap.scala 247:19]
    x1.aw.bits.prot <= bundleIn_0.aw.bits.prot @[BundleMap.scala 247:19]
    x1.aw.bits.cache <= bundleIn_0.aw.bits.cache @[BundleMap.scala 247:19]
    x1.aw.bits.lock <= bundleIn_0.aw.bits.lock @[BundleMap.scala 247:19]
    x1.aw.bits.burst <= bundleIn_0.aw.bits.burst @[BundleMap.scala 247:19]
    x1.aw.bits.size <= bundleIn_0.aw.bits.size @[BundleMap.scala 247:19]
    x1.aw.bits.len <= bundleIn_0.aw.bits.len @[BundleMap.scala 247:19]
    x1.aw.bits.addr <= bundleIn_0.aw.bits.addr @[BundleMap.scala 247:19]
    x1.aw.bits.id <= bundleIn_0.aw.bits.id @[BundleMap.scala 247:19]
    x1.aw.valid <= bundleIn_0.aw.valid @[BundleMap.scala 247:19]
    bundleIn_0.aw.ready <= x1.aw.ready @[BundleMap.scala 247:19]
    x1.w.bits.last <= bundleIn_0.w.bits.last @[BundleMap.scala 247:19]
    x1.w.bits.strb <= bundleIn_0.w.bits.strb @[BundleMap.scala 247:19]
    x1.w.bits.data <= bundleIn_0.w.bits.data @[BundleMap.scala 247:19]
    x1.w.valid <= bundleIn_0.w.valid @[BundleMap.scala 247:19]
    bundleIn_0.w.ready <= x1.w.ready @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.resp <= x1.b.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.b.bits.id <= x1.b.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.b.valid <= x1.b.valid @[BundleMap.scala 247:19]
    x1.b.ready <= bundleIn_0.b.ready @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.last <= x1.r.bits.last @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.resp <= x1.r.bits.resp @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.data <= x1.r.bits.data @[BundleMap.scala 247:19]
    bundleIn_0.r.bits.id <= x1.r.bits.id @[BundleMap.scala 247:19]
    bundleIn_0.r.valid <= x1.r.valid @[BundleMap.scala 247:19]
    x1.r.ready <= bundleIn_0.r.ready @[BundleMap.scala 247:19]
    node _x1_ar_bits_echo_extra_id_T = shr(bundleIn_0.ar.bits.id, 1) @[IdIndexer.scala 73:56]
    x1.ar.bits.echo.extra_id <= _x1_ar_bits_echo_extra_id_T @[IdIndexer.scala 73:39]
    node _x1_aw_bits_echo_extra_id_T = shr(bundleIn_0.aw.bits.id, 1) @[IdIndexer.scala 74:56]
    x1.aw.bits.echo.extra_id <= _x1_aw_bits_echo_extra_id_T @[IdIndexer.scala 74:39]
    node _bundleIn_0_r_bits_id_T = cat(x1.r.bits.echo.extra_id, x1.r.bits.id) @[Cat.scala 33:92]
    bundleIn_0.r.bits.id <= _bundleIn_0_r_bits_id_T @[IdIndexer.scala 82:24]
    node _bundleIn_0_b_bits_id_T = cat(x1.b.bits.echo.extra_id, x1.b.bits.id) @[Cat.scala 33:92]
    bundleIn_0.b.bits.id <= _bundleIn_0_b_bits_id_T @[IdIndexer.scala 83:24]

  module Queue_180 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<5>}

    cmem ram : UInt<32> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_181 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<5>}

    cmem ram : UInt<32> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXILWidget :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}
    output io : { cmds : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip resp : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    inst crFile of MCRFileTL @[AXILWidget.scala 13:35]
    crFile.clock is invalid
    crFile.reset is invalid
    crFile.auto is invalid
    crFile.io is invalid
    crFile.clock <= clock
    crFile.reset <= reset
    inst axi42tl of AXI4ToTL @[ToTL.scala 227:29]
    axi42tl.clock is invalid
    axi42tl.reset is invalid
    axi42tl.auto is invalid
    axi42tl.clock <= clock
    axi42tl.reset <= reset
    inst axi4yank of AXI4UserYanker_1 @[UserYanker.scala 108:30]
    axi4yank.clock is invalid
    axi4yank.reset is invalid
    axi4yank.auto is invalid
    axi4yank.clock <= clock
    axi4yank.reset <= reset
    inst axi4frag of AXI4Fragmenter @[Fragmenter.scala 210:30]
    axi4frag.clock is invalid
    axi4frag.reset is invalid
    axi4frag.auto is invalid
    axi4frag.clock <= clock
    axi4frag.reset <= reset
    inst axi4index of AXI4IdIndexer_1 @[IdIndexer.scala 94:31]
    axi4index.clock is invalid
    axi4index.reset is invalid
    axi4index.auto is invalid
    axi4index.clock <= clock
    axi4index.reset <= reset
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    wire x1_1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_1 is invalid @[Nodes.scala 1215:84]
    x1 <- x1_1 @[Nodes.scala 1509:55]
    axi4index.auto.in <- x1 @[LazyModule.scala 355:16]
    crFile.auto.in <- axi42tl.auto.out @[LazyModule.scala 353:16]
    axi42tl.auto.in <- axi4yank.auto.out @[LazyModule.scala 353:16]
    axi4yank.auto.in <- axi4frag.auto.out @[LazyModule.scala 353:16]
    axi4frag.auto.in <- axi4index.auto.out @[LazyModule.scala 353:16]
    x1_1 <- auto.in @[LazyModule.scala 366:16]
    inst roccCmdFifo of Queue_180 @[AXILWidget.scala 25:27]
    roccCmdFifo.clock <= clock
    roccCmdFifo.reset <= reset
    inst roccRespFifo of Queue_181 @[AXILWidget.scala 26:28]
    roccRespFifo.clock <= clock
    roccRespFifo.reset <= reset
    reg resp_bits : UInt<32>, clock with :
      reset => (UInt<1>("h0"), resp_bits) @[Widgets.scala 93:23]
    resp_bits <= roccRespFifo.io.deq.bits @[Widgets.scala 96:44]
    reg resp_valid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), resp_valid) @[Widgets.scala 93:23]
    resp_valid <= roccRespFifo.io.deq.valid @[Widgets.scala 96:44]
    reg resp_ready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Widgets.scala 94:33]
    roccRespFifo.io.deq.ready <= resp_ready @[Widgets.scala 96:28]
    when resp_ready : @[Widgets.scala 149:16]
      resp_ready <= UInt<1>("h0") @[Widgets.scala 150:12]
    reg cmd_bits : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cmd_bits) @[Widgets.scala 93:23]
    roccCmdFifo.io.enq.bits <= cmd_bits @[Widgets.scala 96:28]
    reg cmd_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Widgets.scala 94:33]
    roccCmdFifo.io.enq.valid <= cmd_valid @[Widgets.scala 96:28]
    when cmd_valid : @[Widgets.scala 149:16]
      cmd_valid <= UInt<1>("h0") @[Widgets.scala 150:12]
    reg cmd_ready : UInt<1>, clock with :
      reset => (UInt<1>("h0"), cmd_ready) @[Widgets.scala 93:23]
    cmd_ready <= roccCmdFifo.io.enq.ready @[Widgets.scala 96:44]
    wire _WIRE : UInt<32> @[AXILWidget.scala 36:20]
    _WIRE <= UInt<32>("hdeadcafe") @[AXILWidget.scala 36:20]
    reg AXIL_DEBUG : UInt<32>, clock with :
      reset => (UInt<1>("h0"), AXIL_DEBUG) @[Widgets.scala 93:23]
    AXIL_DEBUG <= _WIRE @[Widgets.scala 96:44]
    when crFile.io.mcr.write[0].valid : @[MCR.scala 83:31]
      resp_bits <= crFile.io.mcr.write[0].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[0].bits <= resp_bits @[MCR.scala 91:23]
    crFile.io.mcr.read[0].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[0].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[1].valid : @[MCR.scala 83:31]
      resp_valid <= crFile.io.mcr.write[1].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[1].bits <= resp_valid @[MCR.scala 91:23]
    crFile.io.mcr.read[1].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[1].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[2].valid : @[MCR.scala 83:31]
      resp_ready <= crFile.io.mcr.write[2].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[2].bits <= resp_ready @[MCR.scala 91:23]
    crFile.io.mcr.read[2].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[2].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[3].valid : @[MCR.scala 83:31]
      cmd_bits <= crFile.io.mcr.write[3].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[3].bits <= cmd_bits @[MCR.scala 91:23]
    crFile.io.mcr.read[3].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[3].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[4].valid : @[MCR.scala 83:31]
      cmd_valid <= crFile.io.mcr.write[4].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[4].bits <= cmd_valid @[MCR.scala 91:23]
    crFile.io.mcr.read[4].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[4].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[5].valid : @[MCR.scala 83:31]
      cmd_ready <= crFile.io.mcr.write[5].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[5].bits <= cmd_ready @[MCR.scala 91:23]
    crFile.io.mcr.read[5].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[5].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    when crFile.io.mcr.write[6].valid : @[MCR.scala 83:31]
      AXIL_DEBUG <= crFile.io.mcr.write[6].bits @[MCR.scala 84:18]
    crFile.io.mcr.read[6].bits <= AXIL_DEBUG @[MCR.scala 91:23]
    crFile.io.mcr.read[6].valid <= UInt<1>("h1") @[MCR.scala 96:22]
    crFile.io.mcr.write[6].ready <= UInt<1>("h1") @[MCR.scala 97:23]
    io.cmds.bits <= roccCmdFifo.io.deq.bits @[AXILWidget.scala 40:11]
    io.cmds.valid <= roccCmdFifo.io.deq.valid @[AXILWidget.scala 40:11]
    roccCmdFifo.io.deq.ready <= io.cmds.ready @[AXILWidget.scala 40:11]
    roccRespFifo.io.enq <= io.resp @[AXILWidget.scala 41:23]

  module AXILToRocc :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, rocc : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}}

    reg counter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXILToRocc.scala 24:24]
    reg bitsBuffer : UInt<32>[5], clock with :
      reset => (UInt<1>("h0"), bitsBuffer) @[AXILToRocc.scala 25:23]
    wire rocc : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}} @[AXILToRocc.scala 27:18]
    wire _rocc_inst_WIRE : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>} @[AXILToRocc.scala 29:38]
    wire _rocc_inst_WIRE_1 : UInt<32> @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE_1 <= bitsBuffer[0] @[AXILToRocc.scala 29:38]
    node _rocc_inst_T = bits(_rocc_inst_WIRE_1, 6, 0) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.opcode <= _rocc_inst_T @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_1 = bits(_rocc_inst_WIRE_1, 11, 7) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.rd <= _rocc_inst_T_1 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_2 = bits(_rocc_inst_WIRE_1, 12, 12) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.xs2 <= _rocc_inst_T_2 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_3 = bits(_rocc_inst_WIRE_1, 13, 13) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.xs1 <= _rocc_inst_T_3 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_4 = bits(_rocc_inst_WIRE_1, 14, 14) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.xd <= _rocc_inst_T_4 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_5 = bits(_rocc_inst_WIRE_1, 19, 15) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.rs1 <= _rocc_inst_T_5 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_6 = bits(_rocc_inst_WIRE_1, 24, 20) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.rs2 <= _rocc_inst_T_6 @[AXILToRocc.scala 29:38]
    node _rocc_inst_T_7 = bits(_rocc_inst_WIRE_1, 31, 25) @[AXILToRocc.scala 29:38]
    _rocc_inst_WIRE.funct <= _rocc_inst_T_7 @[AXILToRocc.scala 29:38]
    rocc.inst <= _rocc_inst_WIRE @[AXILToRocc.scala 29:13]
    node _rocc_rs1_T = cat(bitsBuffer[1], bitsBuffer[2]) @[Cat.scala 33:92]
    rocc.rs1 <= _rocc_rs1_T @[AXILToRocc.scala 30:12]
    node _rocc_rs2_T = cat(bitsBuffer[3], bitsBuffer[4]) @[Cat.scala 33:92]
    rocc.rs2 <= _rocc_rs2_T @[AXILToRocc.scala 31:12]
    wire _rocc_status_WIRE : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>} @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.uie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.hie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.upie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.spie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.ube <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mpie <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.spp <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.vs <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mpp <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.fs <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.xs <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mprv <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sum <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mxr <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.tvm <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.tw <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.tsr <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.zero1 <= UInt<8>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sd_rv32 <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.uxl <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sxl <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sbe <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mbe <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.gva <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.mpv <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.zero2 <= UInt<23>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.sd <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.v <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.prv <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.dv <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.dprv <= UInt<2>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.isa <= UInt<32>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.wfi <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.cease <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    _rocc_status_WIRE.debug <= UInt<1>("h0") @[AXILToRocc.scala 32:30]
    rocc.status <= _rocc_status_WIRE @[AXILToRocc.scala 32:15]
    io.rocc.bits <= rocc @[AXILToRocc.scala 33:16]
    node _io_in_ready_T = lt(counter, UInt<3>("h5")) @[AXILToRocc.scala 34:27]
    node _io_in_ready_T_1 = and(_io_in_ready_T, io.rocc.ready) @[AXILToRocc.scala 34:39]
    io.in.ready <= _io_in_ready_T_1 @[AXILToRocc.scala 34:15]
    node _io_rocc_valid_T = eq(counter, UInt<3>("h5")) @[AXILToRocc.scala 35:29]
    io.rocc.valid <= _io_rocc_valid_T @[AXILToRocc.scala 35:17]
    node _T = and(io.in.ready, io.in.valid) @[Decoupled.scala 51:35]
    when _T : @[AXILToRocc.scala 36:20]
      node _T_1 = bits(counter, 2, 0)
      node _bitsBuffer_T = bits(io.in.bits, 31, 0) @[AXILToRocc.scala 37:38]
      bitsBuffer[_T_1] <= _bitsBuffer_T @[AXILToRocc.scala 37:25]
      node _counter_T = add(counter, UInt<1>("h1")) @[AXILToRocc.scala 38:24]
      node _counter_T_1 = tail(_counter_T, 1) @[AXILToRocc.scala 38:24]
      counter <= _counter_T_1 @[AXILToRocc.scala 38:13]
    node _T_2 = and(io.rocc.ready, io.rocc.valid) @[Decoupled.scala 51:35]
    when _T_2 : @[AXILToRocc.scala 41:22]
      counter <= UInt<1>("h0") @[AXILToRocc.scala 42:13]


  module RoccToAXIL :
    input clock : Clock
    input reset : Reset
    output io : { out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip rocc : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}}

    reg buffer : UInt<64>, clock with :
      reset => (UInt<1>("h0"), buffer) @[RoccToAXIL.scala 27:19]
    reg rd : UInt<5>, clock with :
      reset => (UInt<1>("h0"), rd) @[RoccToAXIL.scala 29:15]
    node _wholePayload_T = cat(UInt<27>("h0"), rd) @[Cat.scala 33:92]
    node _wholePayload_T_1 = bits(buffer, 31, 0) @[RoccToAXIL.scala 30:53]
    node _wholePayload_T_2 = bits(buffer, 63, 32) @[RoccToAXIL.scala 30:68]
    node wholePayload_hi = cat(_wholePayload_T, _wholePayload_T_1) @[Cat.scala 33:92]
    node wholePayload = cat(wholePayload_hi, _wholePayload_T_2) @[Cat.scala 33:92]
    node _beats_T = bits(wholePayload, 31, 0) @[RoccToAXIL.scala 32:17]
    node _beats_T_1 = bits(wholePayload, 63, 32) @[RoccToAXIL.scala 32:17]
    node _beats_T_2 = bits(wholePayload, 95, 64) @[RoccToAXIL.scala 32:17]
    wire beats : UInt<32>[3] @[RoccToAXIL.scala 31:22]
    beats[0] <= _beats_T @[RoccToAXIL.scala 31:22]
    beats[1] <= _beats_T_1 @[RoccToAXIL.scala 31:22]
    beats[2] <= _beats_T_2 @[RoccToAXIL.scala 31:22]
    reg beatCounter : UInt<2>, clock with :
      reset => (UInt<1>("h0"), beatCounter) @[RoccToAXIL.scala 34:24]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[RoccToAXIL.scala 37:22]
    io.out.valid <= UInt<1>("h0") @[RoccToAXIL.scala 38:16]
    io.out.bits is invalid @[RoccToAXIL.scala 39:15]
    node _io_rocc_ready_T = eq(state, UInt<1>("h0")) @[RoccToAXIL.scala 40:27]
    io.rocc.ready <= _io_rocc_ready_T @[RoccToAXIL.scala 40:17]
    node _T = eq(UInt<1>("h0"), state) @[RoccToAXIL.scala 41:17]
    when _T : @[RoccToAXIL.scala 41:17]
      node _T_1 = and(io.rocc.ready, io.rocc.valid) @[Decoupled.scala 51:35]
      when _T_1 : @[RoccToAXIL.scala 43:26]
        buffer <= io.rocc.bits.data @[RoccToAXIL.scala 44:16]
        rd <= io.rocc.bits.rd @[RoccToAXIL.scala 45:12]
        state <= UInt<1>("h1") @[RoccToAXIL.scala 46:15]
        beatCounter <= UInt<1>("h0") @[RoccToAXIL.scala 47:21]
    else :
      node _T_2 = eq(UInt<1>("h1"), state) @[RoccToAXIL.scala 41:17]
      when _T_2 : @[RoccToAXIL.scala 41:17]
        io.out.valid <= UInt<1>("h1") @[RoccToAXIL.scala 51:20]
        io.out.bits <= beats[beatCounter] @[RoccToAXIL.scala 52:19]
        node _T_3 = and(io.out.ready, io.out.valid) @[Decoupled.scala 51:35]
        when _T_3 : @[RoccToAXIL.scala 53:25]
          node _T_4 = eq(beatCounter, UInt<2>("h2")) @[RoccToAXIL.scala 54:26]
          when _T_4 : @[RoccToAXIL.scala 54:46]
            state <= UInt<1>("h0") @[RoccToAXIL.scala 55:17]
          node _beatCounter_T = add(beatCounter, UInt<1>("h1")) @[RoccToAXIL.scala 57:36]
          node _beatCounter_T_1 = tail(_beatCounter_T, 1) @[RoccToAXIL.scala 57:36]
          beatCounter <= _beatCounter_T_1 @[RoccToAXIL.scala 57:21]


  module AXILHub :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}
    output io : { rocc_in : { flip ready : UInt<1>, valid : UInt<1>, bits : { inst : { funct : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, xd : UInt<1>, xs1 : UInt<1>, xs2 : UInt<1>, rd : UInt<5>, opcode : UInt<7>}, rs1 : UInt<64>, rs2 : UInt<64>, status : { debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, dv : UInt<1>, prv : UInt<2>, v : UInt<1>, sd : UInt<1>, zero2 : UInt<23>, mpv : UInt<1>, gva : UInt<1>, mbe : UInt<1>, sbe : UInt<1>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, ube : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}}}, flip rocc_out : { flip ready : UInt<1>, valid : UInt<1>, bits : { rd : UInt<5>, data : UInt<64>}}}

    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    inst axil_widget of AXILWidget @[AXILHub.scala 13:31]
    axil_widget.clock is invalid
    axil_widget.reset is invalid
    axil_widget.auto is invalid
    axil_widget.io is invalid
    axil_widget.clock <= clock
    axil_widget.reset <= reset
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    wire x1_1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_1 is invalid @[Nodes.scala 1215:84]
    x1 <- x1_1 @[Nodes.scala 1509:55]
    axil_widget.auto.in <- x1 @[LazyModule.scala 355:16]
    x1_1 <- auto.in @[LazyModule.scala 366:16]
    inst axil_to_rocc of AXILToRocc @[AXILHub.scala 29:28]
    axil_to_rocc.clock <= clock
    axil_to_rocc.reset <= reset
    inst rocc_to_axil of RoccToAXIL @[AXILHub.scala 30:28]
    rocc_to_axil.clock <= clock
    rocc_to_axil.reset <= reset
    axil_widget.io.resp <= rocc_to_axil.io.out @[AXILHub.scala 32:23]
    rocc_to_axil.io.rocc <= io.rocc_out @[AXILHub.scala 33:24]
    axil_to_rocc.io.in <= axil_widget.io.cmds @[AXILHub.scala 34:22]
    io.rocc_in.bits <= axil_to_rocc.io.rocc.bits @[AXILHub.scala 35:14]
    io.rocc_in.valid <= axil_to_rocc.io.rocc.valid @[AXILHub.scala 35:14]
    axil_to_rocc.io.rocc.ready <= io.rocc_in.ready @[AXILHub.scala 35:14]

  module Queue_182 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_183 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, count : UInt<2>}

    cmem ram : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_184 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_185 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, count : UInt<2>}

    cmem ram : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_186 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}, count : UInt<2>}

    cmem ram : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module AXI4Buffer_6 :
    input clock : Clock
    input reset : Reset
    output auto : { flip in : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}, out : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}}}

    clock is invalid
    reset is invalid
    auto is invalid
    wire bundleIn_0 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    bundleIn_0 is invalid @[Nodes.scala 1215:84]
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    auto.out <- x1 @[LazyModule.scala 368:12]
    bundleIn_0 <- auto.in @[LazyModule.scala 366:16]
    inst x1_aw_deq of Queue_182 @[Decoupled.scala 375:21]
    x1_aw_deq.clock <= clock
    x1_aw_deq.reset <= reset
    x1_aw_deq.io.enq.valid <= bundleIn_0.aw.valid @[Decoupled.scala 377:22]
    x1_aw_deq.io.enq.bits.qos <= bundleIn_0.aw.bits.qos @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.prot <= bundleIn_0.aw.bits.prot @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.cache <= bundleIn_0.aw.bits.cache @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.lock <= bundleIn_0.aw.bits.lock @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.burst <= bundleIn_0.aw.bits.burst @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.size <= bundleIn_0.aw.bits.size @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.len <= bundleIn_0.aw.bits.len @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.addr <= bundleIn_0.aw.bits.addr @[Decoupled.scala 378:21]
    x1_aw_deq.io.enq.bits.id <= bundleIn_0.aw.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.aw.ready <= x1_aw_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_aw_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_aw_irr.bits <= x1_aw_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_aw_irr.valid <= x1_aw_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_aw_deq.io.deq.ready <= x1_aw_irr.ready @[Decoupled.scala 417:15]
    x1.aw <= x1_aw_irr @[Buffer.scala 42:14]
    inst x1_w_deq of Queue_183 @[Decoupled.scala 375:21]
    x1_w_deq.clock <= clock
    x1_w_deq.reset <= reset
    x1_w_deq.io.enq.valid <= bundleIn_0.w.valid @[Decoupled.scala 377:22]
    x1_w_deq.io.enq.bits.last <= bundleIn_0.w.bits.last @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.strb <= bundleIn_0.w.bits.strb @[Decoupled.scala 378:21]
    x1_w_deq.io.enq.bits.data <= bundleIn_0.w.bits.data @[Decoupled.scala 378:21]
    bundleIn_0.w.ready <= x1_w_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_w_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}} @[Decoupled.scala 414:19]
    x1_w_irr.bits <= x1_w_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_w_irr.valid <= x1_w_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_w_deq.io.deq.ready <= x1_w_irr.ready @[Decoupled.scala 417:15]
    x1.w <= x1_w_irr @[Buffer.scala 43:14]
    inst bundleIn_0_b_deq of Queue_184 @[Decoupled.scala 375:21]
    bundleIn_0_b_deq.clock <= clock
    bundleIn_0_b_deq.reset <= reset
    bundleIn_0_b_deq.io.enq.valid <= x1.b.valid @[Decoupled.scala 377:22]
    bundleIn_0_b_deq.io.enq.bits.resp <= x1.b.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_b_deq.io.enq.bits.id <= x1.b.bits.id @[Decoupled.scala 378:21]
    x1.b.ready <= bundleIn_0_b_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_b_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    bundleIn_0_b_irr.bits <= bundleIn_0_b_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_b_irr.valid <= bundleIn_0_b_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_b_deq.io.deq.ready <= bundleIn_0_b_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.b <= bundleIn_0_b_irr @[Buffer.scala 44:14]
    inst x1_ar_deq of Queue_185 @[Decoupled.scala 375:21]
    x1_ar_deq.clock <= clock
    x1_ar_deq.reset <= reset
    x1_ar_deq.io.enq.valid <= bundleIn_0.ar.valid @[Decoupled.scala 377:22]
    x1_ar_deq.io.enq.bits.qos <= bundleIn_0.ar.bits.qos @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.prot <= bundleIn_0.ar.bits.prot @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.cache <= bundleIn_0.ar.bits.cache @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.lock <= bundleIn_0.ar.bits.lock @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.burst <= bundleIn_0.ar.bits.burst @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.size <= bundleIn_0.ar.bits.size @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.len <= bundleIn_0.ar.bits.len @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.addr <= bundleIn_0.ar.bits.addr @[Decoupled.scala 378:21]
    x1_ar_deq.io.enq.bits.id <= bundleIn_0.ar.bits.id @[Decoupled.scala 378:21]
    bundleIn_0.ar.ready <= x1_ar_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire x1_ar_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}} @[Decoupled.scala 414:19]
    x1_ar_irr.bits <= x1_ar_deq.io.deq.bits @[Decoupled.scala 415:14]
    x1_ar_irr.valid <= x1_ar_deq.io.deq.valid @[Decoupled.scala 416:15]
    x1_ar_deq.io.deq.ready <= x1_ar_irr.ready @[Decoupled.scala 417:15]
    x1.ar <= x1_ar_irr @[Buffer.scala 45:14]
    inst bundleIn_0_r_deq of Queue_186 @[Decoupled.scala 375:21]
    bundleIn_0_r_deq.clock <= clock
    bundleIn_0_r_deq.reset <= reset
    bundleIn_0_r_deq.io.enq.valid <= x1.r.valid @[Decoupled.scala 377:22]
    bundleIn_0_r_deq.io.enq.bits.last <= x1.r.bits.last @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.resp <= x1.r.bits.resp @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.data <= x1.r.bits.data @[Decoupled.scala 378:21]
    bundleIn_0_r_deq.io.enq.bits.id <= x1.r.bits.id @[Decoupled.scala 378:21]
    x1.r.ready <= bundleIn_0_r_deq.io.enq.ready @[Decoupled.scala 379:17]
    wire bundleIn_0_r_irr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}} @[Decoupled.scala 414:19]
    bundleIn_0_r_irr.bits <= bundleIn_0_r_deq.io.deq.bits @[Decoupled.scala 415:14]
    bundleIn_0_r_irr.valid <= bundleIn_0_r_deq.io.deq.valid @[Decoupled.scala 416:15]
    bundleIn_0_r_deq.io.deq.ready <= bundleIn_0_r_irr.ready @[Decoupled.scala 417:15]
    bundleIn_0.r <= bundleIn_0_r_irr @[Buffer.scala 46:14]

  module ComposerTop :
    input clock : Clock
    input reset : UInt<1>
    output auto : { }
    input S00_AXI : { awid : UInt<16>, awaddr : UInt<16>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awlock : UInt<1>, awcache : UInt<4>, awprot : UInt<3>, awregion : UInt<4>, awqos : UInt<4>, awvalid : UInt<1>, flip awready : UInt<1>, wdata : UInt<32>, wstrb : UInt<4>, wlast : UInt<1>, wvalid : UInt<1>, flip wready : UInt<1>, flip bid : UInt<16>, flip bresp : UInt<2>, flip bvalid : UInt<1>, bready : UInt<1>, arid : UInt<16>, araddr : UInt<16>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arlock : UInt<1>, arcache : UInt<4>, arprot : UInt<3>, arregion : UInt<4>, arqos : UInt<4>, arvalid : UInt<1>, flip arready : UInt<1>, flip rid : UInt<16>, flip rdata : UInt<32>, flip rresp : UInt<2>, flip rlast : UInt<1>, flip rvalid : UInt<1>, rready : UInt<1>}
    output M00_AXI : { awid : UInt<6>, awaddr : UInt<34>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awlock : UInt<1>, awcache : UInt<4>, awprot : UInt<3>, awregion : UInt<4>, awqos : UInt<4>, awvalid : UInt<1>, flip awready : UInt<1>, wdata : UInt<512>, wstrb : UInt<64>, wlast : UInt<1>, wvalid : UInt<1>, flip wready : UInt<1>, flip bid : UInt<6>, flip bresp : UInt<2>, flip bvalid : UInt<1>, bready : UInt<1>, arid : UInt<6>, araddr : UInt<34>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arlock : UInt<1>, arcache : UInt<4>, arprot : UInt<3>, arregion : UInt<4>, arqos : UInt<4>, arvalid : UInt<1>, flip arready : UInt<1>, flip rid : UInt<6>, flip rdata : UInt<512>, flip rresp : UInt<2>, flip rlast : UInt<1>, flip rvalid : UInt<1>, rready : UInt<1>}
    input dma : { awid : UInt<6>, awaddr : UInt<34>, awlen : UInt<8>, awsize : UInt<3>, awburst : UInt<2>, awlock : UInt<1>, awcache : UInt<4>, awprot : UInt<3>, awregion : UInt<4>, awqos : UInt<4>, awvalid : UInt<1>, flip awready : UInt<1>, wdata : UInt<512>, wstrb : UInt<64>, wlast : UInt<1>, wvalid : UInt<1>, flip wready : UInt<1>, flip bid : UInt<6>, flip bresp : UInt<2>, flip bvalid : UInt<1>, bready : UInt<1>, arid : UInt<6>, araddr : UInt<34>, arlen : UInt<8>, arsize : UInt<3>, arburst : UInt<2>, arlock : UInt<1>, arcache : UInt<4>, arprot : UInt<3>, arregion : UInt<4>, arqos : UInt<4>, arvalid : UInt<1>, flip arready : UInt<1>, flip rid : UInt<6>, flip rdata : UInt<512>, flip rresp : UInt<2>, flip rlast : UInt<1>, flip rvalid : UInt<1>, rready : UInt<1>}

    clock is invalid
    reset is invalid
    auto is invalid
    S00_AXI is invalid
    M00_AXI is invalid
    dma is invalid
    inst acc of ComposerAccSystem @[ComposerTop.scala 80:23]
    acc.clock is invalid
    acc.reset is invalid
    acc.auto is invalid
    acc.io is invalid
    acc.clock <= clock
    acc.reset <= reset
    inst axi4buf of AXI4Buffer @[Buffer.scala 63:29]
    axi4buf.clock is invalid
    axi4buf.reset is invalid
    axi4buf.auto is invalid
    axi4buf.clock <= clock
    axi4buf.reset <= reset
    inst axi4buf_1 of AXI4Buffer_1 @[Buffer.scala 63:29]
    axi4buf_1.clock is invalid
    axi4buf_1.reset is invalid
    axi4buf_1.auto is invalid
    axi4buf_1.clock <= clock
    axi4buf_1.reset <= reset
    inst tl2axi4 of TLToAXI4 @[ToAXI4.scala 286:29]
    tl2axi4.clock is invalid
    tl2axi4.reset is invalid
    tl2axi4.auto is invalid
    tl2axi4.clock <= clock
    tl2axi4.reset <= reset
    inst axi4xbar of AXI4Xbar @[Xbar.scala 231:30]
    axi4xbar.clock is invalid
    axi4xbar.reset is invalid
    axi4xbar.auto is invalid
    axi4xbar.clock <= clock
    axi4xbar.reset <= reset
    inst axi4xbar_1 of AXI4Xbar_1 @[Xbar.scala 231:30]
    axi4xbar_1.clock is invalid
    axi4xbar_1.reset is invalid
    axi4xbar_1.auto is invalid
    axi4xbar_1.clock <= clock
    axi4xbar_1.reset <= reset
    inst axi4buf_2 of AXI4Buffer_2 @[Buffer.scala 63:29]
    axi4buf_2.clock is invalid
    axi4buf_2.reset is invalid
    axi4buf_2.auto is invalid
    axi4buf_2.clock <= clock
    axi4buf_2.reset <= reset
    inst axi4buf_3 of AXI4Buffer_3 @[Buffer.scala 63:29]
    axi4buf_3.clock is invalid
    axi4buf_3.reset is invalid
    axi4buf_3.auto is invalid
    axi4buf_3.clock <= clock
    axi4buf_3.reset <= reset
    inst axi4yank of AXI4UserYanker @[UserYanker.scala 108:30]
    axi4yank.clock is invalid
    axi4yank.reset is invalid
    axi4yank.auto is invalid
    axi4yank.clock <= clock
    axi4yank.reset <= reset
    inst axi4buf_4 of AXI4Buffer_4 @[Buffer.scala 63:29]
    axi4buf_4.clock is invalid
    axi4buf_4.reset is invalid
    axi4buf_4.auto is invalid
    axi4buf_4.clock <= clock
    axi4buf_4.reset <= reset
    inst axi4index of AXI4IdIndexer @[IdIndexer.scala 94:31]
    axi4index.clock is invalid
    axi4index.reset is invalid
    axi4index.auto is invalid
    axi4index.clock <= clock
    axi4index.reset <= reset
    inst axi4buf_5 of AXI4Buffer_5 @[Buffer.scala 63:29]
    axi4buf_5.clock is invalid
    axi4buf_5.reset is invalid
    axi4buf_5.auto is invalid
    axi4buf_5.clock <= clock
    axi4buf_5.reset <= reset
    inst cmd_resp_axilhub of AXILHub @[ComposerTop.scala 134:36]
    cmd_resp_axilhub.clock is invalid
    cmd_resp_axilhub.reset is invalid
    cmd_resp_axilhub.auto is invalid
    cmd_resp_axilhub.io is invalid
    cmd_resp_axilhub.clock <= clock
    cmd_resp_axilhub.reset <= reset
    inst axi4buf_6 of AXI4Buffer_6 @[Buffer.scala 63:29]
    axi4buf_6.clock is invalid
    axi4buf_6.reset is invalid
    axi4buf_6.auto is invalid
    axi4buf_6.clock <= clock
    axi4buf_6.reset <= reset
    wire x1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, addr : UInt<16>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<16>, data : UInt<32>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1 is invalid @[Nodes.scala 1212:84]
    wire q : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1215:84]
    q is invalid @[Nodes.scala 1215:84]
    wire x1_1 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, resp : UInt<2>, user : { }, echo : { }}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { }}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<6>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { }, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_1 is invalid @[Nodes.scala 1212:84]
    wire x1_2 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1212:84]
    x1_2 is invalid @[Nodes.scala 1212:84]
    wire x1_3 : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<512>, strb : UInt<64>, last : UInt<1>, user : { }}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, addr : UInt<34>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<7>, data : UInt<512>, resp : UInt<2>, user : { }, echo : { tl_state : { size : UInt<4>, source : UInt<7>}}, last : UInt<1>}}} @[Nodes.scala 1215:84]
    x1_3 is invalid @[Nodes.scala 1215:84]
    x1_2 <- x1_3 @[Nodes.scala 1509:55]
    axi4buf_6.auto.in <- x1 @[LazyModule.scala 355:16]
    tl2axi4.auto.in <- acc.auto.mem_out @[LazyModule.scala 355:16]
    axi4buf_2.auto.in <- x1_1 @[LazyModule.scala 355:16]
    axi4xbar.auto.in_0 <- x1_2 @[LazyModule.scala 355:16]
    x1_3 <- axi4buf.auto.out @[LazyModule.scala 353:16]
    axi4buf.auto.in <- axi4buf_1.auto.out @[LazyModule.scala 353:16]
    axi4buf_1.auto.in <- tl2axi4.auto.out @[LazyModule.scala 353:16]
    axi4buf_5.auto.in <- axi4xbar.auto.out @[LazyModule.scala 355:16]
    axi4xbar.auto.in_1 <- axi4xbar_1.auto.out @[LazyModule.scala 353:16]
    axi4xbar_1.auto.in <- axi4buf_2.auto.out @[LazyModule.scala 353:16]
    q <- axi4buf_3.auto.out @[LazyModule.scala 353:16]
    axi4buf_3.auto.in <- axi4yank.auto.out @[LazyModule.scala 353:16]
    axi4yank.auto.in <- axi4buf_4.auto.out @[LazyModule.scala 353:16]
    axi4buf_4.auto.in <- axi4index.auto.out @[LazyModule.scala 353:16]
    axi4index.auto.in <- axi4buf_5.auto.out @[LazyModule.scala 353:16]
    cmd_resp_axilhub.auto.in <- axi4buf_6.auto.out @[LazyModule.scala 353:16]
    acc.io.cmd <= cmd_resp_axilhub.io.rocc_in @[ComposerTop.scala 148:21]
    cmd_resp_axilhub.io.rocc_out <= acc.io.resp @[ComposerTop.scala 149:31]
    S00_AXI.rid <= x1.r.bits.id @[AXI4Compat.scala 102:16]
    S00_AXI.rdata <= x1.r.bits.data @[AXI4Compat.scala 103:18]
    S00_AXI.rresp <= x1.r.bits.resp @[AXI4Compat.scala 104:18]
    S00_AXI.rlast <= x1.r.bits.last @[AXI4Compat.scala 105:18]
    S00_AXI.rvalid <= x1.r.valid @[AXI4Compat.scala 106:19]
    x1.r.ready <= S00_AXI.rready @[AXI4Compat.scala 107:18]
    x1.ar.bits.id <= S00_AXI.arid @[AXI4Compat.scala 109:21]
    x1.ar.bits.qos <= S00_AXI.arqos @[AXI4Compat.scala 110:22]
    x1.ar.bits.len <= S00_AXI.arlen @[AXI4Compat.scala 111:22]
    x1.ar.bits.lock <= S00_AXI.arlock @[AXI4Compat.scala 112:23]
    x1.ar.bits.prot <= S00_AXI.arprot @[AXI4Compat.scala 113:23]
    x1.ar.bits.addr <= S00_AXI.araddr @[AXI4Compat.scala 114:23]
    x1.ar.bits.burst <= S00_AXI.arburst @[AXI4Compat.scala 115:24]
    x1.ar.bits.cache <= S00_AXI.arcache @[AXI4Compat.scala 116:24]
    x1.ar.bits.size <= S00_AXI.arsize @[AXI4Compat.scala 117:23]
    S00_AXI.arready <= x1.ar.ready @[AXI4Compat.scala 118:20]
    x1.ar.valid <= S00_AXI.arvalid @[AXI4Compat.scala 119:19]
    x1.aw.bits.id <= S00_AXI.awid @[AXI4Compat.scala 121:21]
    x1.aw.bits.qos <= S00_AXI.awqos @[AXI4Compat.scala 122:22]
    x1.aw.bits.len <= S00_AXI.awlen @[AXI4Compat.scala 123:22]
    x1.aw.bits.lock <= S00_AXI.awlock @[AXI4Compat.scala 124:23]
    x1.aw.bits.prot <= S00_AXI.awprot @[AXI4Compat.scala 125:23]
    x1.aw.bits.addr <= S00_AXI.awaddr @[AXI4Compat.scala 126:23]
    x1.aw.bits.burst <= S00_AXI.awburst @[AXI4Compat.scala 127:24]
    x1.aw.bits.cache <= S00_AXI.awcache @[AXI4Compat.scala 128:24]
    x1.aw.bits.size <= S00_AXI.awsize @[AXI4Compat.scala 129:23]
    S00_AXI.awready <= x1.aw.ready @[AXI4Compat.scala 130:20]
    x1.aw.valid <= S00_AXI.awvalid @[AXI4Compat.scala 131:19]
    S00_AXI.bid <= x1.b.bits.id @[AXI4Compat.scala 133:16]
    S00_AXI.bresp <= x1.b.bits.resp @[AXI4Compat.scala 134:18]
    x1.b.ready <= S00_AXI.bready @[AXI4Compat.scala 135:18]
    S00_AXI.bvalid <= x1.b.valid @[AXI4Compat.scala 136:19]
    x1.w.bits.data <= S00_AXI.wdata @[AXI4Compat.scala 138:22]
    x1.w.bits.strb <= S00_AXI.wstrb @[AXI4Compat.scala 139:22]
    x1.w.bits.last <= S00_AXI.wlast @[AXI4Compat.scala 140:22]
    x1.w.valid <= S00_AXI.wvalid @[AXI4Compat.scala 141:18]
    S00_AXI.wready <= x1.w.ready @[AXI4Compat.scala 142:19]
    q.r.bits.id <= M00_AXI.rid @[AXI4Compat.scala 56:20]
    q.r.bits.data <= M00_AXI.rdata @[AXI4Compat.scala 57:22]
    q.r.bits.resp <= M00_AXI.rresp @[AXI4Compat.scala 58:22]
    q.r.bits.last <= M00_AXI.rlast @[AXI4Compat.scala 59:22]
    q.r.valid <= M00_AXI.rvalid @[AXI4Compat.scala 60:18]
    M00_AXI.rready <= q.r.ready @[AXI4Compat.scala 61:19]
    M00_AXI.arid <= q.ar.bits.id @[AXI4Compat.scala 63:17]
    M00_AXI.arqos <= q.ar.bits.qos @[AXI4Compat.scala 64:18]
    M00_AXI.arlen <= q.ar.bits.len @[AXI4Compat.scala 65:18]
    M00_AXI.arlock <= q.ar.bits.lock @[AXI4Compat.scala 66:19]
    M00_AXI.arprot <= q.ar.bits.prot @[AXI4Compat.scala 67:19]
    M00_AXI.araddr <= q.ar.bits.addr @[AXI4Compat.scala 68:19]
    M00_AXI.arburst <= q.ar.bits.burst @[AXI4Compat.scala 69:20]
    M00_AXI.arcache <= q.ar.bits.cache @[AXI4Compat.scala 70:20]
    M00_AXI.arregion <= UInt<1>("h0") @[AXI4Compat.scala 71:21]
    M00_AXI.arsize <= q.ar.bits.size @[AXI4Compat.scala 72:19]
    q.ar.ready <= M00_AXI.arready @[AXI4Compat.scala 73:19]
    M00_AXI.arvalid <= q.ar.valid @[AXI4Compat.scala 74:20]
    q.b.bits.id <= M00_AXI.bid @[AXI4Compat.scala 76:20]
    q.b.bits.resp <= M00_AXI.bresp @[AXI4Compat.scala 77:22]
    M00_AXI.bready <= q.b.ready @[AXI4Compat.scala 78:19]
    q.b.valid <= M00_AXI.bvalid @[AXI4Compat.scala 79:18]
    M00_AXI.awid <= q.aw.bits.id @[AXI4Compat.scala 81:17]
    M00_AXI.awqos <= q.aw.bits.qos @[AXI4Compat.scala 82:18]
    M00_AXI.awlen <= q.aw.bits.len @[AXI4Compat.scala 83:18]
    M00_AXI.awlock <= q.aw.bits.lock @[AXI4Compat.scala 84:19]
    M00_AXI.awprot <= q.aw.bits.prot @[AXI4Compat.scala 85:19]
    M00_AXI.awaddr <= q.aw.bits.addr @[AXI4Compat.scala 86:19]
    M00_AXI.awburst <= q.aw.bits.burst @[AXI4Compat.scala 87:20]
    M00_AXI.awcache <= q.aw.bits.cache @[AXI4Compat.scala 88:20]
    M00_AXI.awsize <= q.aw.bits.size @[AXI4Compat.scala 89:19]
    M00_AXI.awregion <= UInt<1>("h0") @[AXI4Compat.scala 90:21]
    q.aw.ready <= M00_AXI.awready @[AXI4Compat.scala 91:19]
    M00_AXI.awvalid <= q.aw.valid @[AXI4Compat.scala 92:20]
    M00_AXI.wdata <= q.w.bits.data @[AXI4Compat.scala 94:18]
    M00_AXI.wstrb <= q.w.bits.strb @[AXI4Compat.scala 95:18]
    M00_AXI.wlast <= q.w.bits.last @[AXI4Compat.scala 96:18]
    M00_AXI.wvalid <= q.w.valid @[AXI4Compat.scala 97:19]
    q.w.ready <= M00_AXI.wready @[AXI4Compat.scala 98:18]
    dma.rid <= x1_1.r.bits.id @[AXI4Compat.scala 102:16]
    dma.rdata <= x1_1.r.bits.data @[AXI4Compat.scala 103:18]
    dma.rresp <= x1_1.r.bits.resp @[AXI4Compat.scala 104:18]
    dma.rlast <= x1_1.r.bits.last @[AXI4Compat.scala 105:18]
    dma.rvalid <= x1_1.r.valid @[AXI4Compat.scala 106:19]
    x1_1.r.ready <= dma.rready @[AXI4Compat.scala 107:18]
    x1_1.ar.bits.id <= dma.arid @[AXI4Compat.scala 109:21]
    x1_1.ar.bits.qos <= dma.arqos @[AXI4Compat.scala 110:22]
    x1_1.ar.bits.len <= dma.arlen @[AXI4Compat.scala 111:22]
    x1_1.ar.bits.lock <= dma.arlock @[AXI4Compat.scala 112:23]
    x1_1.ar.bits.prot <= dma.arprot @[AXI4Compat.scala 113:23]
    x1_1.ar.bits.addr <= dma.araddr @[AXI4Compat.scala 114:23]
    x1_1.ar.bits.burst <= dma.arburst @[AXI4Compat.scala 115:24]
    x1_1.ar.bits.cache <= dma.arcache @[AXI4Compat.scala 116:24]
    x1_1.ar.bits.size <= dma.arsize @[AXI4Compat.scala 117:23]
    dma.arready <= x1_1.ar.ready @[AXI4Compat.scala 118:20]
    x1_1.ar.valid <= dma.arvalid @[AXI4Compat.scala 119:19]
    x1_1.aw.bits.id <= dma.awid @[AXI4Compat.scala 121:21]
    x1_1.aw.bits.qos <= dma.awqos @[AXI4Compat.scala 122:22]
    x1_1.aw.bits.len <= dma.awlen @[AXI4Compat.scala 123:22]
    x1_1.aw.bits.lock <= dma.awlock @[AXI4Compat.scala 124:23]
    x1_1.aw.bits.prot <= dma.awprot @[AXI4Compat.scala 125:23]
    x1_1.aw.bits.addr <= dma.awaddr @[AXI4Compat.scala 126:23]
    x1_1.aw.bits.burst <= dma.awburst @[AXI4Compat.scala 127:24]
    x1_1.aw.bits.cache <= dma.awcache @[AXI4Compat.scala 128:24]
    x1_1.aw.bits.size <= dma.awsize @[AXI4Compat.scala 129:23]
    dma.awready <= x1_1.aw.ready @[AXI4Compat.scala 130:20]
    x1_1.aw.valid <= dma.awvalid @[AXI4Compat.scala 131:19]
    dma.bid <= x1_1.b.bits.id @[AXI4Compat.scala 133:16]
    dma.bresp <= x1_1.b.bits.resp @[AXI4Compat.scala 134:18]
    x1_1.b.ready <= dma.bready @[AXI4Compat.scala 135:18]
    dma.bvalid <= x1_1.b.valid @[AXI4Compat.scala 136:19]
    x1_1.w.bits.data <= dma.wdata @[AXI4Compat.scala 138:22]
    x1_1.w.bits.strb <= dma.wstrb @[AXI4Compat.scala 139:22]
    x1_1.w.bits.last <= dma.wlast @[AXI4Compat.scala 140:22]
    x1_1.w.valid <= dma.wvalid @[AXI4Compat.scala 141:18]
    dma.wready <= x1_1.w.ready @[AXI4Compat.scala 142:19]
    reg arCnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 171:22]
    reg awCnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 172:22]
    reg rCnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 173:21]
    reg wCnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 174:21]
    reg bCnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 175:21]
    node _T = and(q.ar.ready, q.ar.valid) @[Decoupled.scala 51:35]
    when _T : @[ComposerTop.scala 178:19]
      node _arCnt_T = add(arCnt, UInt<1>("h1")) @[ComposerTop.scala 179:20]
      node _arCnt_T_1 = tail(_arCnt_T, 1) @[ComposerTop.scala 179:20]
      arCnt <= _arCnt_T_1 @[ComposerTop.scala 179:11]
    node _T_1 = and(q.aw.ready, q.aw.valid) @[Decoupled.scala 51:35]
    when _T_1 : @[ComposerTop.scala 181:19]
      node _awCnt_T = add(awCnt, UInt<1>("h1")) @[ComposerTop.scala 182:20]
      node _awCnt_T_1 = tail(_awCnt_T, 1) @[ComposerTop.scala 182:20]
      awCnt <= _awCnt_T_1 @[ComposerTop.scala 182:11]
    node _T_2 = and(q.r.ready, q.r.valid) @[Decoupled.scala 51:35]
    when _T_2 : @[ComposerTop.scala 184:18]
      node _rCnt_T = add(rCnt, UInt<1>("h1")) @[ComposerTop.scala 185:18]
      node _rCnt_T_1 = tail(_rCnt_T, 1) @[ComposerTop.scala 185:18]
      rCnt <= _rCnt_T_1 @[ComposerTop.scala 185:10]
    node _T_3 = and(q.w.ready, q.w.valid) @[Decoupled.scala 51:35]
    when _T_3 : @[ComposerTop.scala 187:18]
      node _wCnt_T = add(wCnt, UInt<1>("h1")) @[ComposerTop.scala 188:18]
      node _wCnt_T_1 = tail(_wCnt_T, 1) @[ComposerTop.scala 188:18]
      wCnt <= _wCnt_T_1 @[ComposerTop.scala 188:10]
    node _T_4 = and(q.b.ready, q.b.valid) @[Decoupled.scala 51:35]
    when _T_4 : @[ComposerTop.scala 190:18]
      node _bCnt_T = add(bCnt, UInt<1>("h1")) @[ComposerTop.scala 191:18]
      node _bCnt_T_1 = tail(_bCnt_T, 1) @[ComposerTop.scala 191:18]
      bCnt <= _bCnt_T_1 @[ComposerTop.scala 191:10]
    reg rWait : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 194:22]
    reg bWait : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[ComposerTop.scala 195:22]
    node _T_5 = eq(q.r.valid, UInt<1>("h0")) @[ComposerTop.scala 196:21]
    node _T_6 = and(q.r.ready, _T_5) @[ComposerTop.scala 196:18]
    when _T_6 : @[ComposerTop.scala 196:33]
      node _rWait_T = add(rWait, UInt<1>("h1")) @[ComposerTop.scala 197:20]
      node _rWait_T_1 = tail(_rWait_T, 1) @[ComposerTop.scala 197:20]
      rWait <= _rWait_T_1 @[ComposerTop.scala 197:11]
    node _T_7 = eq(q.b.valid, UInt<1>("h0")) @[ComposerTop.scala 200:21]
    node _T_8 = and(q.b.ready, _T_7) @[ComposerTop.scala 200:18]
    when _T_8 : @[ComposerTop.scala 200:33]
      node _bWait_T = add(bWait, UInt<1>("h1")) @[ComposerTop.scala 201:20]
      node _bWait_T_1 = tail(_bWait_T, 1) @[ComposerTop.scala 201:20]
      bWait <= _bWait_T_1 @[ComposerTop.scala 201:11]
    node _T_9 = eq(UInt<5>("h10"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
    when _T_9 : @[ComposerTop.scala 204:38]
      cmd_resp_axilhub.io.rocc_out.bits.data <= arCnt @[ComposerTop.scala 206:45]
    else :
      node _T_10 = eq(UInt<5>("h11"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
      when _T_10 : @[ComposerTop.scala 204:38]
        cmd_resp_axilhub.io.rocc_out.bits.data <= awCnt @[ComposerTop.scala 209:45]
      else :
        node _T_11 = eq(UInt<5>("h12"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
        when _T_11 : @[ComposerTop.scala 204:38]
          cmd_resp_axilhub.io.rocc_out.bits.data <= rCnt @[ComposerTop.scala 212:45]
        else :
          node _T_12 = eq(UInt<5>("h13"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
          when _T_12 : @[ComposerTop.scala 204:38]
            cmd_resp_axilhub.io.rocc_out.bits.data <= wCnt @[ComposerTop.scala 215:45]
          else :
            node _T_13 = eq(UInt<5>("h14"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
            when _T_13 : @[ComposerTop.scala 204:38]
              cmd_resp_axilhub.io.rocc_out.bits.data <= bCnt @[ComposerTop.scala 218:45]
            else :
              node _T_14 = eq(UInt<5>("h15"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
              when _T_14 : @[ComposerTop.scala 204:38]
                cmd_resp_axilhub.io.rocc_out.bits.data <= rWait @[ComposerTop.scala 221:45]
              else :
                node _T_15 = eq(UInt<5>("h16"), acc.io.resp.bits.rd) @[ComposerTop.scala 204:38]
                when _T_15 : @[ComposerTop.scala 204:38]
                  cmd_resp_axilhub.io.rocc_out.bits.data <= bWait @[ComposerTop.scala 224:45]

