diff --git a/src/main/scala/amba/axi4/ToTL.scala b/src/main/scala/amba/axi4/ToTL.scala
index a26bdb79d..6ffe1bf75 100644
--- a/src/main/scala/amba/axi4/ToTL.scala
+++ b/src/main/scala/amba/axi4/ToTL.scala
@@ -83,20 +83,21 @@ class AXI4ToTL(wcorrupt: Boolean)(implicit p: Parameters) extends LazyModule
       edgeOut.manager.requireFifo()
 
       // Look for an Error device to redirect bad requests
-      val errorDevs = edgeOut.manager.managers.filter(_.nodePath.last.lazyModule.className == "TLError")
-      require (!errorDevs.isEmpty, "There is no TLError reachable from AXI4ToTL. One must be instantiated.")
-      val errorDev = errorDevs.maxBy(_.maxTransfer)
-      val error = errorDev.address.head.base
-      require (errorDev.supportsPutPartial.contains(edgeOut.manager.maxTransfer),
-        s"Error device supports ${errorDev.supportsPutPartial} PutPartial but must support ${edgeOut.manager.maxTransfer}")
-      require (errorDev.supportsGet.contains(edgeOut.manager.maxTransfer),
-        s"Error device supports ${errorDev.supportsGet} Get but must support ${edgeOut.manager.maxTransfer}")
+      // Don't need error device for Composer
+//      val errorDevs = edgeOut.manager.managers.filter(_.nodePath.last.lazyModule.className == "TLError")
+//      require (!errorDevs.isEmpty, "There is no TLError reachable from AXI4ToTL. One must be instantiated.")
+//      val errorDev = errorDevs.maxBy(_.maxTransfer)
+      val error = 0x10000000000L // errorDev.address.head.base
+//      require (errorDev.supportsPutPartial.contains(edgeOut.manager.maxTransfer),
+//        s"Error device supports ${errorDev.supportsPutPartial} PutPartial but must support ${edgeOut.manager.maxTransfer}")
+//      require (errorDev.supportsGet.contains(edgeOut.manager.maxTransfer),
+//        s"Error device supports ${errorDev.supportsGet} Get but must support ${edgeOut.manager.maxTransfer}")
 
       val r_out = Wire(out.a)
       val r_size1 = in.ar.bits.bytes1()
       val r_size = OH1ToUInt(r_size1)
       val r_ok = edgeOut.manager.supportsGetSafe(in.ar.bits.addr, r_size)
-      val r_addr = Mux(r_ok, in.ar.bits.addr, UInt(error) | in.ar.bits.addr(log2Up(beatBytes)-1, 0))
+      val r_addr = in.ar.bits.addr
       val r_count = RegInit(Vec.fill(numIds) { UInt(0, width = txnCountBits) })
       val r_id = if (maxFlight == 1) {
         Cat(in.ar.bits.id, UInt(0, width=1))
@@ -129,7 +130,7 @@ class AXI4ToTL(wcorrupt: Boolean)(implicit p: Parameters) extends LazyModule
       val w_size1 = in.aw.bits.bytes1()
       val w_size = OH1ToUInt(w_size1)
       val w_ok = edgeOut.manager.supportsPutPartialSafe(in.aw.bits.addr, w_size)
-      val w_addr = Mux(w_ok, in.aw.bits.addr, UInt(error) | in.aw.bits.addr(log2Up(beatBytes)-1, 0))
+      val w_addr = in.aw.bits.addr
       val w_count = RegInit(Vec.fill(numIds) { UInt(0, width = txnCountBits) })
       val w_id = if (maxFlight == 1) {
         Cat(in.aw.bits.id, UInt(1, width=1))
